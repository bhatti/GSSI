// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: api/did/doc/types/doc.proto

package types

import (
	types "github.com/bhatti/GSSI/api/did/jwk/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// These are the encodings specified in the standard, not are all
// These are the encodings specified in the standard, not are all
// supported yet
type Encoding int32

const (
	Encoding_Identity          Encoding = 0
	Encoding_Base2             Encoding = 48     // '0'
	Encoding_Base8             Encoding = 55     // '7'
	Encoding_Base10            Encoding = 57     // '9'
	Encoding_Base16            Encoding = 102    //'f'
	Encoding_Base16Upper       Encoding = 70     // 'F'
	Encoding_Base32            Encoding = 98     // 'b'
	Encoding_Base32Upper       Encoding = 66     // 'B'
	Encoding_Base32pad         Encoding = 99     /// 'c'
	Encoding_Base32padUpper    Encoding = 67     // 'C'
	Encoding_Base32hex         Encoding = 118    // 'v'
	Encoding_Base32hexUpper    Encoding = 86     // 'V'
	Encoding_Base32hexPad      Encoding = 116    // 't'
	Encoding_Base32hexPadUpper Encoding = 84     // 'T'
	Encoding_Base36            Encoding = 107    // 'k'
	Encoding_Base36Upper       Encoding = 75     // 'K'
	Encoding_Base58BTC         Encoding = 122    // 'z'
	Encoding_Base58Flickr      Encoding = 90     // 'Z'
	Encoding_Base64            Encoding = 109    // 'm'
	Encoding_Base64url         Encoding = 117    // 'u'
	Encoding_Base64pad         Encoding = 77     // 'M'
	Encoding_Base64urlPad      Encoding = 85     // 'U'
	Encoding_Base256Emoji      Encoding = 128640 /// 'ðŸš€'
)

// Enum value maps for Encoding.
var (
	Encoding_name = map[int32]string{
		0:      "Identity",
		48:     "Base2",
		55:     "Base8",
		57:     "Base10",
		102:    "Base16",
		70:     "Base16Upper",
		98:     "Base32",
		66:     "Base32Upper",
		99:     "Base32pad",
		67:     "Base32padUpper",
		118:    "Base32hex",
		86:     "Base32hexUpper",
		116:    "Base32hexPad",
		84:     "Base32hexPadUpper",
		107:    "Base36",
		75:     "Base36Upper",
		122:    "Base58BTC",
		90:     "Base58Flickr",
		109:    "Base64",
		117:    "Base64url",
		77:     "Base64pad",
		85:     "Base64urlPad",
		128640: "Base256Emoji",
	}
	Encoding_value = map[string]int32{
		"Identity":          0,
		"Base2":             48,
		"Base8":             55,
		"Base10":            57,
		"Base16":            102,
		"Base16Upper":       70,
		"Base32":            98,
		"Base32Upper":       66,
		"Base32pad":         99,
		"Base32padUpper":    67,
		"Base32hex":         118,
		"Base32hexUpper":    86,
		"Base32hexPad":      116,
		"Base32hexPadUpper": 84,
		"Base36":            107,
		"Base36Upper":       75,
		"Base58BTC":         122,
		"Base58Flickr":      90,
		"Base64":            109,
		"Base64url":         117,
		"Base64pad":         77,
		"Base64urlPad":      85,
		"Base256Emoji":      128640,
	}
)

func (x Encoding) Enum() *Encoding {
	p := new(Encoding)
	*p = x
	return p
}

func (x Encoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Encoding) Descriptor() protoreflect.EnumDescriptor {
	return file_api_did_doc_types_doc_proto_enumTypes[0].Descriptor()
}

func (Encoding) Type() protoreflect.EnumType {
	return &file_api_did_doc_types_doc_proto_enumTypes[0]
}

func (x Encoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Encoding.Descriptor instead.
func (Encoding) EnumDescriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{0}
}

// VerificationRelationship defines a verification relationship between DID subject and a verification method.
type VerificationRelationship int32

const (
	// VerificationRelationshipGeneral is a special case of verification relationship: when a verification method
	// defined in Verification is not used by any Verification.
	VerificationRelationship_VerificationRelationshipGeneral VerificationRelationship = 0
	// Authentication defines verification relationship.
	VerificationRelationship_Authentication VerificationRelationship = 1
	// AssertionMethod defines verification relationship.
	VerificationRelationship_AssertionMethod VerificationRelationship = 2
	// CapabilityDelegation defines verification relationship.
	VerificationRelationship_CapabilityDelegation VerificationRelationship = 3
	// CapabilityInvocation defines verification relationship.
	VerificationRelationship_CapabilityInvocation VerificationRelationship = 4
	// KeyAgreement defines verification relationship.
	VerificationRelationship_KeyAgreement VerificationRelationship = 5
)

// Enum value maps for VerificationRelationship.
var (
	VerificationRelationship_name = map[int32]string{
		0: "VerificationRelationshipGeneral",
		1: "Authentication",
		2: "AssertionMethod",
		3: "CapabilityDelegation",
		4: "CapabilityInvocation",
		5: "KeyAgreement",
	}
	VerificationRelationship_value = map[string]int32{
		"VerificationRelationshipGeneral": 0,
		"Authentication":                  1,
		"AssertionMethod":                 2,
		"CapabilityDelegation":            3,
		"CapabilityInvocation":            4,
		"KeyAgreement":                    5,
	}
)

func (x VerificationRelationship) Enum() *VerificationRelationship {
	p := new(VerificationRelationship)
	*p = x
	return p
}

func (x VerificationRelationship) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerificationRelationship) Descriptor() protoreflect.EnumDescriptor {
	return file_api_did_doc_types_doc_proto_enumTypes[1].Descriptor()
}

func (VerificationRelationship) Type() protoreflect.EnumType {
	return &file_api_did_doc_types_doc_proto_enumTypes[1]
}

func (x VerificationRelationship) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerificationRelationship.Descriptor instead.
func (VerificationRelationship) EnumDescriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{1}
}

// EndpointType endpoint type.
type EndpointType int32

const (
	// DIDCommV1 type.
	EndpointType_DIDCommV1 EndpointType = 0
	// DIDCommV2 type.
	EndpointType_DIDCommV2 EndpointType = 1
	// Generic type.
	EndpointType_Generic EndpointType = 2
)

// Enum value maps for EndpointType.
var (
	EndpointType_name = map[int32]string{
		0: "DIDCommV1",
		1: "DIDCommV2",
		2: "Generic",
	}
	EndpointType_value = map[string]int32{
		"DIDCommV1": 0,
		"DIDCommV2": 1,
		"Generic":   2,
	}
)

func (x EndpointType) Enum() *EndpointType {
	p := new(EndpointType)
	*p = x
	return p
}

func (x EndpointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EndpointType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_did_doc_types_doc_proto_enumTypes[2].Descriptor()
}

func (EndpointType) Type() protoreflect.EnumType {
	return &file_api_did_doc_types_doc_proto_enumTypes[2]
}

func (x EndpointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EndpointType.Descriptor instead.
func (EndpointType) EnumDescriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{2}
}

// Thread thread data.
type Thread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Thid           string           `protobuf:"bytes,1,opt,name=thid,proto3" json:"thid,omitempty"`
	Pthid          string           `protobuf:"bytes,2,opt,name=pthid,proto3" json:"pthid,omitempty"`
	SenderOrder    int32            `protobuf:"varint,3,opt,name=sender_order,json=senderOrder,proto3" json:"sender_order,omitempty"`
	ReceivedOrders map[string]int32 `protobuf:"bytes,4,rep,name=received_orders,json=receivedOrders,proto3" json:"received_orders,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Thread) Reset() {
	*x = Thread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_doc_types_doc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Thread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thread) ProtoMessage() {}

func (x *Thread) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_doc_types_doc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thread.ProtoReflect.Descriptor instead.
func (*Thread) Descriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{0}
}

func (x *Thread) GetThid() string {
	if x != nil {
		return x.Thid
	}
	return ""
}

func (x *Thread) GetPthid() string {
	if x != nil {
		return x.Pthid
	}
	return ""
}

func (x *Thread) GetSenderOrder() int32 {
	if x != nil {
		return x.SenderOrder
	}
	return 0
}

func (x *Thread) GetReceivedOrders() map[string]int32 {
	if x != nil {
		return x.ReceivedOrders
	}
	return nil
}

// Timing keeps expiration time.
type Timing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpiresTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=expires_time,json=expiresTime,proto3" json:"expires_time,omitempty"`
}

func (x *Timing) Reset() {
	*x = Timing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_doc_types_doc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timing) ProtoMessage() {}

func (x *Timing) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_doc_types_doc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timing.ProtoReflect.Descriptor instead.
func (*Timing) Descriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{1}
}

func (x *Timing) GetExpiresTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresTime
	}
	return nil
}

// Endpoint contains endpoint specific content. Content of ServiceEndpoint api above will be used by priority:
// 1- DIDcomm V2
// 2- DIDComm V1
// 3- DIDCore
// To force lower priority endpoint content, avoid setting higher priority data during Unmarshal() execution.
type Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawDIDCommV2 []*DIDCommV2Endpoint `protobuf:"bytes,1,rep,name=rawDIDCommV2,proto3" json:"rawDIDCommV2,omitempty"`
	RawDIDCommV1 string               `protobuf:"bytes,2,opt,name=rawDIDCommV1,proto3" json:"rawDIDCommV1,omitempty"`
	RawObj       *anypb.Any           `protobuf:"bytes,3,opt,name=rawObj,proto3" json:"rawObj,omitempty"`
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_doc_types_doc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_doc_types_doc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{2}
}

func (x *Endpoint) GetRawDIDCommV2() []*DIDCommV2Endpoint {
	if x != nil {
		return x.RawDIDCommV2
	}
	return nil
}

func (x *Endpoint) GetRawDIDCommV1() string {
	if x != nil {
		return x.RawDIDCommV1
	}
	return ""
}

func (x *Endpoint) GetRawObj() *anypb.Any {
	if x != nil {
		return x.RawObj
	}
	return nil
}

// DIDRotationRecord holds information about a DID Rotation.
type DIDRotationRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldDID    string `protobuf:"bytes,1,opt,name=oldDID,proto3" json:"oldDID,omitempty"`
	NewDID    string `protobuf:"bytes,2,opt,name=newDID,proto3" json:"newDID,omitempty"`
	FromPrior string `protobuf:"bytes,3,opt,name=fromPrior,proto3" json:"fromPrior,omitempty"`
}

func (x *DIDRotationRecord) Reset() {
	*x = DIDRotationRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_doc_types_doc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DIDRotationRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DIDRotationRecord) ProtoMessage() {}

func (x *DIDRotationRecord) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_doc_types_doc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DIDRotationRecord.ProtoReflect.Descriptor instead.
func (*DIDRotationRecord) Descriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{3}
}

func (x *DIDRotationRecord) GetOldDID() string {
	if x != nil {
		return x.OldDID
	}
	return ""
}

func (x *DIDRotationRecord) GetNewDID() string {
	if x != nil {
		return x.NewDID
	}
	return ""
}

func (x *DIDRotationRecord) GetFromPrior() string {
	if x != nil {
		return x.FromPrior
	}
	return ""
}

// Record contain info about did exchange connection.
type Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId        string             `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	State               string             `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	ThreadId            string             `protobuf:"bytes,3,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	ParentThreadId      string             `protobuf:"bytes,4,opt,name=parent_thread_id,json=parentThreadId,proto3" json:"parent_thread_id,omitempty"`
	TheirLabel          string             `protobuf:"bytes,5,opt,name=their_label,json=theirLabel,proto3" json:"their_label,omitempty"`
	TheirDid            string             `protobuf:"bytes,6,opt,name=their_did,json=theirDid,proto3" json:"their_did,omitempty"`
	MyDid               string             `protobuf:"bytes,7,opt,name=my_did,json=myDid,proto3" json:"my_did,omitempty"`
	ServiceEndPoint     *Endpoint          `protobuf:"bytes,8,opt,name=service_endPoint,json=serviceEndPoint,proto3" json:"service_endPoint,omitempty"` // ServiceEndPoint is 'their' DIDComm service endpoint.
	RecipientKeys       []string           `protobuf:"bytes,9,rep,name=recipient_keys,json=recipientKeys,proto3" json:"recipient_keys,omitempty"`       // RecipientKeys holds 'their' DIDComm recipient keys.
	RoutingKeys         []string           `protobuf:"bytes,10,rep,name=routing_keys,json=routingKeys,proto3" json:"routing_keys,omitempty"`            // RoutingKeys holds 'their' DIDComm routing keys.
	InvitationId        string             `protobuf:"bytes,11,opt,name=invitation_id,json=invitationId,proto3" json:"invitation_id,omitempty"`
	InvitationDid       string             `protobuf:"bytes,12,opt,name=invitation_did,json=invitationDid,proto3" json:"invitation_did,omitempty"`
	Implicit            bool               `protobuf:"varint,13,opt,name=implicit,proto3" json:"implicit,omitempty"`
	Namespace           string             `protobuf:"bytes,14,opt,name=namespace,proto3" json:"namespace,omitempty"`
	MediaTypeProfiles   []string           `protobuf:"bytes,15,rep,name=media_type_profiles,json=mediaTypeProfiles,proto3" json:"media_type_profiles,omitempty"`
	DidCommVersion      string             `protobuf:"bytes,16,opt,name=did_comm_version,json=didCommVersion,proto3" json:"did_comm_version,omitempty"`
	PeerDidInitialState string             `protobuf:"bytes,17,opt,name=peer_did_initial_state,json=peerDidInitialState,proto3" json:"peer_did_initial_state,omitempty"`
	MyDidRotation       *DIDRotationRecord `protobuf:"bytes,18,opt,name=my_did_rotation,json=myDidRotation,proto3" json:"my_did_rotation,omitempty"`
}

func (x *Record) Reset() {
	*x = Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_doc_types_doc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Record) ProtoMessage() {}

func (x *Record) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_doc_types_doc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Record.ProtoReflect.Descriptor instead.
func (*Record) Descriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{4}
}

func (x *Record) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *Record) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Record) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *Record) GetParentThreadId() string {
	if x != nil {
		return x.ParentThreadId
	}
	return ""
}

func (x *Record) GetTheirLabel() string {
	if x != nil {
		return x.TheirLabel
	}
	return ""
}

func (x *Record) GetTheirDid() string {
	if x != nil {
		return x.TheirDid
	}
	return ""
}

func (x *Record) GetMyDid() string {
	if x != nil {
		return x.MyDid
	}
	return ""
}

func (x *Record) GetServiceEndPoint() *Endpoint {
	if x != nil {
		return x.ServiceEndPoint
	}
	return nil
}

func (x *Record) GetRecipientKeys() []string {
	if x != nil {
		return x.RecipientKeys
	}
	return nil
}

func (x *Record) GetRoutingKeys() []string {
	if x != nil {
		return x.RoutingKeys
	}
	return nil
}

func (x *Record) GetInvitationId() string {
	if x != nil {
		return x.InvitationId
	}
	return ""
}

func (x *Record) GetInvitationDid() string {
	if x != nil {
		return x.InvitationDid
	}
	return ""
}

func (x *Record) GetImplicit() bool {
	if x != nil {
		return x.Implicit
	}
	return false
}

func (x *Record) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Record) GetMediaTypeProfiles() []string {
	if x != nil {
		return x.MediaTypeProfiles
	}
	return nil
}

func (x *Record) GetDidCommVersion() string {
	if x != nil {
		return x.DidCommVersion
	}
	return ""
}

func (x *Record) GetPeerDidInitialState() string {
	if x != nil {
		return x.PeerDidInitialState
	}
	return ""
}

func (x *Record) GetMyDidRotation() *DIDRotationRecord {
	if x != nil {
		return x.MyDidRotation
	}
	return nil
}

// RecordResult holds the credential records.
type RecordResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Result
	Result []*Record `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *RecordResult) Reset() {
	*x = RecordResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_doc_types_doc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordResult) ProtoMessage() {}

func (x *RecordResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_doc_types_doc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordResult.ProtoReflect.Descriptor instead.
func (*RecordResult) Descriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{5}
}

func (x *RecordResult) GetResult() []*Record {
	if x != nil {
		return x.Result
	}
	return nil
}

// QueryConnectionsParams model
//
// Parameters for querying connections.
//
type QueryConnectionsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Alias of connection invitation
	Alias string `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	// Initiator is Connection invitation initiator
	Initiator string `protobuf:"bytes,2,opt,name=initiator,proto3" json:"initiator,omitempty"`
	// Invitation key
	InvitationKey string `protobuf:"bytes,3,opt,name=invitation_key,json=invitationKey,proto3" json:"invitation_key,omitempty"`
	// Invitation ID
	InvitationId string `protobuf:"bytes,4,opt,name=invitation_id,json=invitationId,proto3" json:"invitation_id,omitempty"`
	// Parent threadID
	ParentThreadId string `protobuf:"bytes,5,opt,name=parent_thread_id,json=parentThreadId,proto3" json:"parent_thread_id,omitempty"`
	// MyDID is DID of the agent
	MyDid string `protobuf:"bytes,6,opt,name=my_did,json=myDid,proto3" json:"my_did,omitempty"`
	// State of the connection invitation
	State string `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	// TheirDID is other party's DID
	TheirDid string `protobuf:"bytes,8,opt,name=their_did,json=theirDid,proto3" json:"their_did,omitempty"`
	// TheirRole is other party's role
	TheirRole string `protobuf:"bytes,9,opt,name=their_role,json=theirRole,proto3" json:"their_role,omitempty"`
}

func (x *QueryConnectionsParams) Reset() {
	*x = QueryConnectionsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_doc_types_doc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryConnectionsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryConnectionsParams) ProtoMessage() {}

func (x *QueryConnectionsParams) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_doc_types_doc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryConnectionsParams.ProtoReflect.Descriptor instead.
func (*QueryConnectionsParams) Descriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{6}
}

func (x *QueryConnectionsParams) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *QueryConnectionsParams) GetInitiator() string {
	if x != nil {
		return x.Initiator
	}
	return ""
}

func (x *QueryConnectionsParams) GetInvitationKey() string {
	if x != nil {
		return x.InvitationKey
	}
	return ""
}

func (x *QueryConnectionsParams) GetInvitationId() string {
	if x != nil {
		return x.InvitationId
	}
	return ""
}

func (x *QueryConnectionsParams) GetParentThreadId() string {
	if x != nil {
		return x.ParentThreadId
	}
	return ""
}

func (x *QueryConnectionsParams) GetMyDid() string {
	if x != nil {
		return x.MyDid
	}
	return ""
}

func (x *QueryConnectionsParams) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *QueryConnectionsParams) GetTheirDid() string {
	if x != nil {
		return x.TheirDid
	}
	return ""
}

func (x *QueryConnectionsParams) GetTheirRole() string {
	if x != nil {
		return x.TheirRole
	}
	return ""
}

// DIDInfo model for specifying public DID and associated label.
type DIDInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the DID
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	// the label associated with DID
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *DIDInfo) Reset() {
	*x = DIDInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_doc_types_doc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DIDInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DIDInfo) ProtoMessage() {}

func (x *DIDInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_doc_types_doc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DIDInfo.ProtoReflect.Descriptor instead.
func (*DIDInfo) Descriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{7}
}

func (x *DIDInfo) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *DIDInfo) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// DIDCommV2Endpoint contains ServiceEndpoint data specifically for DIDcommV2 and is wrapped in Endpoint as an array.
type DIDCommV2Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URI contains the endpoint URI.
	Uri string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	// Accept contains the MediaType profiles accepted by this endpoint.
	Accept []string `protobuf:"bytes,2,rep,name=accept,proto3" json:"accept,omitempty"`
	// RoutingKeys contains the list of keys trusted as routing keys for the mediators/routers of this endpoint.
	RoutingKeys []string `protobuf:"bytes,3,rep,name=routingKeys,proto3" json:"routingKeys,omitempty"`
}

func (x *DIDCommV2Endpoint) Reset() {
	*x = DIDCommV2Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_doc_types_doc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DIDCommV2Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DIDCommV2Endpoint) ProtoMessage() {}

func (x *DIDCommV2Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_doc_types_doc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DIDCommV2Endpoint.ProtoReflect.Descriptor instead.
func (*DIDCommV2Endpoint) Descriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{8}
}

func (x *DIDCommV2Endpoint) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *DIDCommV2Endpoint) GetAccept() []string {
	if x != nil {
		return x.Accept
	}
	return nil
}

func (x *DIDCommV2Endpoint) GetRoutingKeys() []string {
	if x != nil {
		return x.RoutingKeys
	}
	return nil
}

// DID is parsed according to the generic syntax: https://w3c.github.io/did-core/#generic-did-syntax
type DID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheme           string `protobuf:"bytes,1,opt,name=scheme,proto3" json:"scheme,omitempty"`                     // is always "did"
	Method           string `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`                     // Method is the specific DID methods
	MethodSpecificId string `protobuf:"bytes,3,opt,name=methodSpecificId,proto3" json:"methodSpecificId,omitempty"` // MethodSpecificID is the unique ID computed or assigned by the DID method
}

func (x *DID) Reset() {
	*x = DID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_doc_types_doc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DID) ProtoMessage() {}

func (x *DID) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_doc_types_doc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DID.ProtoReflect.Descriptor instead.
func (*DID) Descriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{9}
}

func (x *DID) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *DID) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *DID) GetMethodSpecificId() string {
	if x != nil {
		return x.MethodSpecificId
	}
	return ""
}

// DIDURL holds a DID URL.
type DIDURL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheme           string            `protobuf:"bytes,1,opt,name=scheme,proto3" json:"scheme,omitempty"`                     // is always "did"
	Method           string            `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`                     // Method is the specific DID methods
	MethodSpecificId string            `protobuf:"bytes,3,opt,name=methodSpecificId,proto3" json:"methodSpecificId,omitempty"` // MethodSpecificID is the unique ID computed or assigned by the DID method
	Path             string            `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Queries          map[string][]byte `protobuf:"bytes,5,rep,name=queries,proto3" json:"queries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // string -> []string
	Fragment         string            `protobuf:"bytes,6,opt,name=fragment,proto3" json:"fragment,omitempty"`
}

func (x *DIDURL) Reset() {
	*x = DIDURL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_doc_types_doc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DIDURL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DIDURL) ProtoMessage() {}

func (x *DIDURL) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_doc_types_doc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DIDURL.ProtoReflect.Descriptor instead.
func (*DIDURL) Descriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{10}
}

func (x *DIDURL) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *DIDURL) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *DIDURL) GetMethodSpecificId() string {
	if x != nil {
		return x.MethodSpecificId
	}
	return ""
}

func (x *DIDURL) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DIDURL) GetQueries() map[string][]byte {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *DIDURL) GetFragment() string {
	if x != nil {
		return x.Fragment
	}
	return ""
}

// DocResolution did resolution.
type DocResolution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context          []string          `protobuf:"bytes,1,rep,name=context,proto3" json:"context,omitempty"`
	DidDocument      *Doc              `protobuf:"bytes,2,opt,name=didDocument,proto3" json:"didDocument,omitempty"`
	DocumentMetadata *DocumentMetadata `protobuf:"bytes,3,opt,name=documentMetadata,proto3" json:"documentMetadata,omitempty"`
}

func (x *DocResolution) Reset() {
	*x = DocResolution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_doc_types_doc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocResolution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocResolution) ProtoMessage() {}

func (x *DocResolution) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_doc_types_doc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocResolution.ProtoReflect.Descriptor instead.
func (*DocResolution) Descriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{11}
}

func (x *DocResolution) GetContext() []string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *DocResolution) GetDidDocument() *Doc {
	if x != nil {
		return x.DidDocument
	}
	return nil
}

func (x *DocResolution) GetDocumentMetadata() *DocumentMetadata {
	if x != nil {
		return x.DocumentMetadata
	}
	return nil
}

// MethodMetadata method metadata.
type MethodMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UpdateCommitment is update commitment key.
	UpdateCommitment string `protobuf:"bytes,1,opt,name=updateCommitment,proto3" json:"updateCommitment,omitempty"`
	// RecoveryCommitment is recovery commitment key.
	RecoveryCommitment string `protobuf:"bytes,2,opt,name=recoveryCommitment,proto3" json:"recoveryCommitment,omitempty"`
	// Published is published key.
	Published bool `protobuf:"varint,3,opt,name=published,proto3" json:"published,omitempty"`
	// AnchorOrigin is anchor origin.
	AnchorOrigin string `protobuf:"bytes,4,opt,name=anchorOrigin,proto3" json:"anchorOrigin,omitempty"`
	// UnpublishedOperations unpublished operations
	UnpublishedOperations []*ProtocolOperation `protobuf:"bytes,5,rep,name=unpublishedOperations,proto3" json:"unpublishedOperations,omitempty"`
	// PublishedOperations published operations
	PublishedOperations []*ProtocolOperation `protobuf:"bytes,6,rep,name=publishedOperations,proto3" json:"publishedOperations,omitempty"`
}

func (x *MethodMetadata) Reset() {
	*x = MethodMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_doc_types_doc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodMetadata) ProtoMessage() {}

func (x *MethodMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_doc_types_doc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodMetadata.ProtoReflect.Descriptor instead.
func (*MethodMetadata) Descriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{12}
}

func (x *MethodMetadata) GetUpdateCommitment() string {
	if x != nil {
		return x.UpdateCommitment
	}
	return ""
}

func (x *MethodMetadata) GetRecoveryCommitment() string {
	if x != nil {
		return x.RecoveryCommitment
	}
	return ""
}

func (x *MethodMetadata) GetPublished() bool {
	if x != nil {
		return x.Published
	}
	return false
}

func (x *MethodMetadata) GetAnchorOrigin() string {
	if x != nil {
		return x.AnchorOrigin
	}
	return ""
}

func (x *MethodMetadata) GetUnpublishedOperations() []*ProtocolOperation {
	if x != nil {
		return x.UnpublishedOperations
	}
	return nil
}

func (x *MethodMetadata) GetPublishedOperations() []*ProtocolOperation {
	if x != nil {
		return x.PublishedOperations
	}
	return nil
}

// ProtocolOperation info.
type ProtocolOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation is operation request.
	Operation string `protobuf:"bytes,1,opt,name=operation,proto3" json:"operation,omitempty"`
	// ProtocolVersion is protocol version.
	ProtocolVersion int32 `protobuf:"varint,2,opt,name=protocolVersion,proto3" json:"protocolVersion,omitempty"`
	// TransactionNumber is transaction number.
	TransactionNumber int32 `protobuf:"varint,3,opt,name=transactionNumber,proto3" json:"transactionNumber,omitempty"`
	// TransactionTime is transaction time.
	TransactionTime int64 `protobuf:"varint,4,opt,name=transactionTime,proto3" json:"transactionTime,omitempty"`
	// Type is type of operation.
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// AnchorOrigin is anchor origin.
	AnchorOrigin string `protobuf:"bytes,6,opt,name=anchorOrigin,proto3" json:"anchorOrigin,omitempty"`
	// CanonicalReference is canonical reference
	CanonicalReference string `protobuf:"bytes,7,opt,name=canonicalReference,proto3" json:"canonicalReference,omitempty"`
	// EquivalentReferences is equivalent references
	EquivalentReferences []string `protobuf:"bytes,8,rep,name=equivalentReferences,proto3" json:"equivalentReferences,omitempty"`
}

func (x *ProtocolOperation) Reset() {
	*x = ProtocolOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_doc_types_doc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolOperation) ProtoMessage() {}

func (x *ProtocolOperation) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_doc_types_doc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolOperation.ProtoReflect.Descriptor instead.
func (*ProtocolOperation) Descriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{13}
}

func (x *ProtocolOperation) GetOperation() string {
	if x != nil {
		return x.Operation
	}
	return ""
}

func (x *ProtocolOperation) GetProtocolVersion() int32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *ProtocolOperation) GetTransactionNumber() int32 {
	if x != nil {
		return x.TransactionNumber
	}
	return 0
}

func (x *ProtocolOperation) GetTransactionTime() int64 {
	if x != nil {
		return x.TransactionTime
	}
	return 0
}

func (x *ProtocolOperation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProtocolOperation) GetAnchorOrigin() string {
	if x != nil {
		return x.AnchorOrigin
	}
	return ""
}

func (x *ProtocolOperation) GetCanonicalReference() string {
	if x != nil {
		return x.CanonicalReference
	}
	return ""
}

func (x *ProtocolOperation) GetEquivalentReferences() []string {
	if x != nil {
		return x.EquivalentReferences
	}
	return nil
}

// DocumentMetadata document metadata.
type DocumentMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VersionID is version ID key.
	VersionId string `protobuf:"bytes,1,opt,name=versionId,proto3" json:"versionId,omitempty"`
	// Deactivated is deactivated flag key.
	Deactivated bool `protobuf:"varint,2,opt,name=deactivated,proto3" json:"deactivated,omitempty"`
	// CanonicalID is canonical ID key.
	CanonicalId string `protobuf:"bytes,3,opt,name=canonicalId,proto3" json:"canonicalId,omitempty"`
	// EquivalentID is equivalent ID array.
	EquivalentId []string `protobuf:"bytes,4,rep,name=equivalentId,proto3" json:"equivalentId,omitempty"`
	// Method is used for method metadata within did document metadata.
	Method *MethodMetadata `protobuf:"bytes,5,opt,name=method,proto3" json:"method,omitempty"`
}

func (x *DocumentMetadata) Reset() {
	*x = DocumentMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_doc_types_doc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentMetadata) ProtoMessage() {}

func (x *DocumentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_doc_types_doc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentMetadata.ProtoReflect.Descriptor instead.
func (*DocumentMetadata) Descriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{14}
}

func (x *DocumentMetadata) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *DocumentMetadata) GetDeactivated() bool {
	if x != nil {
		return x.Deactivated
	}
	return false
}

func (x *DocumentMetadata) GetCanonicalId() string {
	if x != nil {
		return x.CanonicalId
	}
	return ""
}

func (x *DocumentMetadata) GetEquivalentId() []string {
	if x != nil {
		return x.EquivalentId
	}
	return nil
}

func (x *DocumentMetadata) GetMethod() *MethodMetadata {
	if x != nil {
		return x.Method
	}
	return nil
}

// ProcessingMeta include info how to process the doc.
type ProcessingMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseUri string `protobuf:"bytes,1,opt,name=baseUri,proto3" json:"baseUri,omitempty"`
}

func (x *ProcessingMeta) Reset() {
	*x = ProcessingMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_doc_types_doc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessingMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingMeta) ProtoMessage() {}

func (x *ProcessingMeta) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_doc_types_doc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingMeta.ProtoReflect.Descriptor instead.
func (*ProcessingMeta) Descriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{15}
}

func (x *ProcessingMeta) GetBaseUri() string {
	if x != nil {
		return x.BaseUri
	}
	return ""
}

// Doc DID Document definition.
type Doc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Context              []string               `protobuf:"bytes,2,rep,name=context,proto3" json:"context,omitempty"`
	VerificationMethod   []*VerificationMethod  `protobuf:"bytes,3,rep,name=verificationMethod,proto3" json:"verificationMethod,omitempty"`
	Service              []*Service             `protobuf:"bytes,4,rep,name=service,proto3" json:"service,omitempty"`
	Authentication       []*Verification        `protobuf:"bytes,5,rep,name=authentication,proto3" json:"authentication,omitempty"`
	AssertionMethod      []*Verification        `protobuf:"bytes,6,rep,name=assertionMethod,proto3" json:"assertionMethod,omitempty"`
	CapabilityDelegation []*Verification        `protobuf:"bytes,7,rep,name=capabilityDelegation,proto3" json:"capabilityDelegation,omitempty"`
	CapabilityInvocation []*Verification        `protobuf:"bytes,8,rep,name=capabilityInvocation,proto3" json:"capabilityInvocation,omitempty"`
	KeyAgreement         []*Verification        `protobuf:"bytes,9,rep,name=keyAgreement,proto3" json:"keyAgreement,omitempty"`
	Proof                []*Proof               `protobuf:"bytes,10,rep,name=proof,proto3" json:"proof,omitempty"`
	ProcessingMeta       *ProcessingMeta        `protobuf:"bytes,11,opt,name=processingMeta,proto3" json:"processingMeta,omitempty"`
	Created              *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=created,proto3" json:"created,omitempty"`
	Updated              *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *Doc) Reset() {
	*x = Doc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_doc_types_doc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Doc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Doc) ProtoMessage() {}

func (x *Doc) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_doc_types_doc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Doc.ProtoReflect.Descriptor instead.
func (*Doc) Descriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{16}
}

func (x *Doc) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Doc) GetContext() []string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Doc) GetVerificationMethod() []*VerificationMethod {
	if x != nil {
		return x.VerificationMethod
	}
	return nil
}

func (x *Doc) GetService() []*Service {
	if x != nil {
		return x.Service
	}
	return nil
}

func (x *Doc) GetAuthentication() []*Verification {
	if x != nil {
		return x.Authentication
	}
	return nil
}

func (x *Doc) GetAssertionMethod() []*Verification {
	if x != nil {
		return x.AssertionMethod
	}
	return nil
}

func (x *Doc) GetCapabilityDelegation() []*Verification {
	if x != nil {
		return x.CapabilityDelegation
	}
	return nil
}

func (x *Doc) GetCapabilityInvocation() []*Verification {
	if x != nil {
		return x.CapabilityInvocation
	}
	return nil
}

func (x *Doc) GetKeyAgreement() []*Verification {
	if x != nil {
		return x.KeyAgreement
	}
	return nil
}

func (x *Doc) GetProof() []*Proof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *Doc) GetProcessingMeta() *ProcessingMeta {
	if x != nil {
		return x.ProcessingMeta
	}
	return nil
}

func (x *Doc) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *Doc) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

// VerificationMethod DID doc verification method.
// The value of the verification method is defined either as raw public key bytes (Value field) or as JSON Web Key.
// In the first case the Type field can hold additional information to understand the nature of the raw public key.
type VerificationMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // @id
	Type              string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // @type
	Controller        string            `protobuf:"bytes,3,opt,name=controller,proto3" json:"controller,omitempty"`
	Value             []byte            `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	RelativeURL       bool              `protobuf:"varint,5,opt,name=relativeURL,proto3" json:"relativeURL,omitempty"`
	JsonWebKey        *types.JSONWebKey `protobuf:"bytes,6,opt,name=jsonWebKey,proto3" json:"jsonWebKey,omitempty"`
	MultibaseEncoding Encoding          `protobuf:"varint,7,opt,name=multibaseEncoding,proto3,enum=api.did.doc.types.Encoding" json:"multibaseEncoding,omitempty"`
}

func (x *VerificationMethod) Reset() {
	*x = VerificationMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_doc_types_doc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerificationMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerificationMethod) ProtoMessage() {}

func (x *VerificationMethod) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_doc_types_doc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerificationMethod.ProtoReflect.Descriptor instead.
func (*VerificationMethod) Descriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{17}
}

func (x *VerificationMethod) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VerificationMethod) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *VerificationMethod) GetController() string {
	if x != nil {
		return x.Controller
	}
	return ""
}

func (x *VerificationMethod) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *VerificationMethod) GetRelativeURL() bool {
	if x != nil {
		return x.RelativeURL
	}
	return false
}

func (x *VerificationMethod) GetJsonWebKey() *types.JSONWebKey {
	if x != nil {
		return x.JsonWebKey
	}
	return nil
}

func (x *VerificationMethod) GetMultibaseEncoding() Encoding {
	if x != nil {
		return x.MultibaseEncoding
	}
	return Encoding_Identity
}

// Service DID doc service.
type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // @id
	Type                     string                `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // @type
	Priority                 uint32                `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	RecipientKeys            []string              `protobuf:"bytes,4,rep,name=recipientKeys,proto3" json:"recipientKeys,omitempty"`
	RoutingKeys              []string              `protobuf:"bytes,5,rep,name=routingKeys,proto3" json:"routingKeys,omitempty"`
	ServiceEndpoint          *Endpoint             `protobuf:"bytes,6,opt,name=serviceEndpoint,proto3" json:"serviceEndpoint,omitempty"`
	Accept                   []string              `protobuf:"bytes,7,rep,name=accept,proto3" json:"accept,omitempty"`
	Properties               map[string]*anypb.Any `protobuf:"bytes,8,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RecipientKeysRelativeUrl map[string]bool       `protobuf:"bytes,9,rep,name=recipientKeysRelativeUrl,proto3" json:"recipientKeysRelativeUrl,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RoutingKeysRelativeUrl   map[string]bool       `protobuf:"bytes,10,rep,name=routingKeysRelativeUrl,proto3" json:"routingKeysRelativeUrl,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	RelativeUrl              bool                  `protobuf:"varint,11,opt,name=relativeUrl,proto3" json:"relativeUrl,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_doc_types_doc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_doc_types_doc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{18}
}

func (x *Service) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Service) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Service) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Service) GetRecipientKeys() []string {
	if x != nil {
		return x.RecipientKeys
	}
	return nil
}

func (x *Service) GetRoutingKeys() []string {
	if x != nil {
		return x.RoutingKeys
	}
	return nil
}

func (x *Service) GetServiceEndpoint() *Endpoint {
	if x != nil {
		return x.ServiceEndpoint
	}
	return nil
}

func (x *Service) GetAccept() []string {
	if x != nil {
		return x.Accept
	}
	return nil
}

func (x *Service) GetProperties() map[string]*anypb.Any {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Service) GetRecipientKeysRelativeUrl() map[string]bool {
	if x != nil {
		return x.RecipientKeysRelativeUrl
	}
	return nil
}

func (x *Service) GetRoutingKeysRelativeUrl() map[string]bool {
	if x != nil {
		return x.RoutingKeysRelativeUrl
	}
	return nil
}

func (x *Service) GetRelativeUrl() bool {
	if x != nil {
		return x.RelativeUrl
	}
	return false
}

// Verification authentication verification.
type Verification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VerificationMethod *VerificationMethod      `protobuf:"bytes,1,opt,name=verificationMethod,proto3" json:"verificationMethod,omitempty"`
	Relationship       VerificationRelationship `protobuf:"varint,2,opt,name=relationship,proto3,enum=api.did.doc.types.VerificationRelationship" json:"relationship,omitempty"`
	Embedded           bool                     `protobuf:"varint,3,opt,name=embedded,proto3" json:"embedded,omitempty"`
}

func (x *Verification) Reset() {
	*x = Verification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_doc_types_doc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Verification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verification) ProtoMessage() {}

func (x *Verification) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_doc_types_doc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verification.ProtoReflect.Descriptor instead.
func (*Verification) Descriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{19}
}

func (x *Verification) GetVerificationMethod() *VerificationMethod {
	if x != nil {
		return x.VerificationMethod
	}
	return nil
}

func (x *Verification) GetRelationship() VerificationRelationship {
	if x != nil {
		return x.Relationship
	}
	return VerificationRelationship_VerificationRelationshipGeneral
}

func (x *Verification) GetEmbedded() bool {
	if x != nil {
		return x.Embedded
	}
	return false
}

// Proof is cryptographic proof of the integrity of the DID Document.
type Proof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Creator      string                 `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	ProofValue   []byte                 `protobuf:"bytes,3,opt,name=proofValue,proto3" json:"proofValue,omitempty"`
	Domain       string                 `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	Nonce        []byte                 `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ProofPurpose string                 `protobuf:"bytes,6,opt,name=proofPurpose,proto3" json:"proofPurpose,omitempty"`
	RelativeUrl  bool                   `protobuf:"varint,7,opt,name=relativeUrl,proto3" json:"relativeUrl,omitempty"`
	Created      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *Proof) Reset() {
	*x = Proof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_doc_types_doc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proof) ProtoMessage() {}

func (x *Proof) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_doc_types_doc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proof.ProtoReflect.Descriptor instead.
func (*Proof) Descriptor() ([]byte, []int) {
	return file_api_did_doc_types_doc_proto_rawDescGZIP(), []int{20}
}

func (x *Proof) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Proof) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Proof) GetProofValue() []byte {
	if x != nil {
		return x.ProofValue
	}
	return nil
}

func (x *Proof) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Proof) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *Proof) GetProofPurpose() string {
	if x != nil {
		return x.ProofPurpose
	}
	return ""
}

func (x *Proof) GetRelativeUrl() bool {
	if x != nil {
		return x.RelativeUrl
	}
	return false
}

func (x *Proof) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

var File_api_did_doc_types_doc_proto protoreflect.FileDescriptor

var file_api_did_doc_types_doc_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x63, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x64, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61, 0x70,
	0x69, 0x2f, 0x64, 0x69, 0x64, 0x2f, 0x6a, 0x77, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x6a, 0x77, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x01, 0x0a, 0x06, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x68, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x68, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x74, 0x68, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x74, 0x68, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x56, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x06,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x72, 0x61, 0x77, 0x44, 0x49, 0x44, 0x43, 0x6f, 0x6d, 0x6d,
	0x56, 0x32, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x49, 0x44,
	0x43, 0x6f, 0x6d, 0x6d, 0x56, 0x32, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c,
	0x72, 0x61, 0x77, 0x44, 0x49, 0x44, 0x43, 0x6f, 0x6d, 0x6d, 0x56, 0x32, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x61, 0x77, 0x44, 0x49, 0x44, 0x43, 0x6f, 0x6d, 0x6d, 0x56, 0x31, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x61, 0x77, 0x44, 0x49, 0x44, 0x43, 0x6f, 0x6d, 0x6d, 0x56, 0x31,
	0x12, 0x2c, 0x0a, 0x06, 0x72, 0x61, 0x77, 0x4f, 0x62, 0x6a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x61, 0x77, 0x4f, 0x62, 0x6a, 0x22, 0x61,
	0x0a, 0x11, 0x44, 0x49, 0x44, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6c, 0x64, 0x44, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x6c, 0x64, 0x44, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x65, 0x77, 0x44, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x65, 0x77,
	0x44, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x22, 0xd4, 0x05, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x68, 0x65, 0x69, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x64, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x65, 0x69, 0x72, 0x44, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x6d, 0x79, 0x5f, 0x64, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x79,
	0x44, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x64,
	0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x64, 0x69,
	0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x65, 0x65, 0x72, 0x44, 0x69, 0x64, 0x49, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x6d, 0x79,
	0x5f, 0x64, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f,
	0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x49, 0x44, 0x52, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0d, 0x6d, 0x79, 0x44, 0x69, 0x64,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xab, 0x02, 0x0a, 0x16,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x6d, 0x79, 0x5f, 0x64, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x79, 0x44, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x64, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x68, 0x65, 0x69, 0x72, 0x44, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x68,
	0x65, 0x69, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x68, 0x65, 0x69, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x31, 0x0a, 0x07, 0x44, 0x49, 0x44,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x64, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x5f, 0x0a, 0x11,
	0x44, 0x49, 0x44, 0x43, 0x6f, 0x6d, 0x6d, 0x56, 0x32, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x69, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x61, 0x0a,
	0x03, 0x44, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x49, 0x64,
	0x22, 0x92, 0x02, 0x0a, 0x06, 0x44, 0x49, 0x44, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x07, 0x71,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x44, 0x49, 0x44, 0x55, 0x52, 0x4c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x3a, 0x0a, 0x0c, 0x51, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x01, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x38, 0x0a, 0x0b, 0x64, 0x69, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64,
	0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x6f, 0x63, 0x52, 0x0b,
	0x64, 0x69, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x10, 0x64,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e,
	0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe2, 0x02, 0x0a,
	0x0e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x2a, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x72,
	0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x5a, 0x0a,
	0x15, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x15, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x13, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64,
	0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xcf, 0x02, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x2e, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x61, 0x6e,
	0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x32, 0x0a, 0x14, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x65,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x22, 0xd3, 0x01, 0x0a, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x71,
	0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x2a, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x61, 0x73, 0x65, 0x55, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61,
	0x73, 0x65, 0x55, 0x72, 0x69, 0x22, 0xa6, 0x06, 0x0a, 0x03, 0x44, 0x6f, 0x63, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x55, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f,
	0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x12, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x34,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a,
	0x0f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64,
	0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x53, 0x0a, 0x14, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64,
	0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a,
	0x14, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x41, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64,
	0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x49, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x9a,
	0x02, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x52,
	0x4c, 0x12, 0x3d, 0x0a, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e,
	0x6a, 0x77, 0x6b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4a, 0x53, 0x4f, 0x4e, 0x57, 0x65,
	0x62, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x57, 0x65, 0x62, 0x4b, 0x65, 0x79,
	0x12, 0x49, 0x0a, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x62, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x62,
	0x61, 0x73, 0x65, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xb1, 0x06, 0x0a, 0x07,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x45, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x12, 0x4a,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x74, 0x0a, 0x18, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x72,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x6e, 0x0a, 0x16, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x55, 0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x16, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x72, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55,
	0x72, 0x6c, 0x1a, 0x53, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x55, 0x72, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a, 0x1b, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x72, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xd2, 0x01, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x55, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x4f, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x65, 0x64, 0x22, 0xff, 0x01, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2a, 0xf1, 0x02, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x61, 0x73, 0x65, 0x32, 0x10, 0x30, 0x12, 0x09, 0x0a, 0x05,
	0x42, 0x61, 0x73, 0x65, 0x38, 0x10, 0x37, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x65, 0x31,
	0x30, 0x10, 0x39, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x65, 0x31, 0x36, 0x10, 0x66, 0x12,
	0x0f, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x31, 0x36, 0x55, 0x70, 0x70, 0x65, 0x72, 0x10, 0x46,
	0x12, 0x0a, 0x0a, 0x06, 0x42, 0x61, 0x73, 0x65, 0x33, 0x32, 0x10, 0x62, 0x12, 0x0f, 0x0a, 0x0b,
	0x42, 0x61, 0x73, 0x65, 0x33, 0x32, 0x55, 0x70, 0x70, 0x65, 0x72, 0x10, 0x42, 0x12, 0x0d, 0x0a,
	0x09, 0x42, 0x61, 0x73, 0x65, 0x33, 0x32, 0x70, 0x61, 0x64, 0x10, 0x63, 0x12, 0x12, 0x0a, 0x0e,
	0x42, 0x61, 0x73, 0x65, 0x33, 0x32, 0x70, 0x61, 0x64, 0x55, 0x70, 0x70, 0x65, 0x72, 0x10, 0x43,
	0x12, 0x0d, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x33, 0x32, 0x68, 0x65, 0x78, 0x10, 0x76, 0x12,
	0x12, 0x0a, 0x0e, 0x42, 0x61, 0x73, 0x65, 0x33, 0x32, 0x68, 0x65, 0x78, 0x55, 0x70, 0x70, 0x65,
	0x72, 0x10, 0x56, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x33, 0x32, 0x68, 0x65, 0x78,
	0x50, 0x61, 0x64, 0x10, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x61, 0x73, 0x65, 0x33, 0x32, 0x68,
	0x65, 0x78, 0x50, 0x61, 0x64, 0x55, 0x70, 0x70, 0x65, 0x72, 0x10, 0x54, 0x12, 0x0a, 0x0a, 0x06,
	0x42, 0x61, 0x73, 0x65, 0x33, 0x36, 0x10, 0x6b, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65,
	0x33, 0x36, 0x55, 0x70, 0x70, 0x65, 0x72, 0x10, 0x4b, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x61, 0x73,
	0x65, 0x35, 0x38, 0x42, 0x54, 0x43, 0x10, 0x7a, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65,
	0x35, 0x38, 0x46, 0x6c, 0x69, 0x63, 0x6b, 0x72, 0x10, 0x5a, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x10, 0x6d, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34,
	0x75, 0x72, 0x6c, 0x10, 0x75, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x70,
	0x61, 0x64, 0x10, 0x4d, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x75, 0x72,
	0x6c, 0x50, 0x61, 0x64, 0x10, 0x55, 0x12, 0x12, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x32, 0x35,
	0x36, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x10, 0x80, 0xed, 0x07, 0x2a, 0xae, 0x01, 0x0a, 0x18, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x03, 0x12,
	0x18, 0x0a, 0x14, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x65, 0x79,
	0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x05, 0x2a, 0x39, 0x0a, 0x0c, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x44,
	0x49, 0x44, 0x43, 0x6f, 0x6d, 0x6d, 0x56, 0x31, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49,
	0x44, 0x43, 0x6f, 0x6d, 0x6d, 0x56, 0x32, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x10, 0x02, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x68, 0x61, 0x74, 0x74, 0x69, 0x2f, 0x47, 0x53, 0x53, 0x49,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x63, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_did_doc_types_doc_proto_rawDescOnce sync.Once
	file_api_did_doc_types_doc_proto_rawDescData = file_api_did_doc_types_doc_proto_rawDesc
)

func file_api_did_doc_types_doc_proto_rawDescGZIP() []byte {
	file_api_did_doc_types_doc_proto_rawDescOnce.Do(func() {
		file_api_did_doc_types_doc_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_did_doc_types_doc_proto_rawDescData)
	})
	return file_api_did_doc_types_doc_proto_rawDescData
}

var file_api_did_doc_types_doc_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_did_doc_types_doc_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_api_did_doc_types_doc_proto_goTypes = []interface{}{
	(Encoding)(0),                  // 0: api.did.doc.types.Encoding
	(VerificationRelationship)(0),  // 1: api.did.doc.types.VerificationRelationship
	(EndpointType)(0),              // 2: api.did.doc.types.EndpointType
	(*Thread)(nil),                 // 3: api.did.doc.types.Thread
	(*Timing)(nil),                 // 4: api.did.doc.types.Timing
	(*Endpoint)(nil),               // 5: api.did.doc.types.Endpoint
	(*DIDRotationRecord)(nil),      // 6: api.did.doc.types.DIDRotationRecord
	(*Record)(nil),                 // 7: api.did.doc.types.Record
	(*RecordResult)(nil),           // 8: api.did.doc.types.RecordResult
	(*QueryConnectionsParams)(nil), // 9: api.did.doc.types.QueryConnectionsParams
	(*DIDInfo)(nil),                // 10: api.did.doc.types.DIDInfo
	(*DIDCommV2Endpoint)(nil),      // 11: api.did.doc.types.DIDCommV2Endpoint
	(*DID)(nil),                    // 12: api.did.doc.types.DID
	(*DIDURL)(nil),                 // 13: api.did.doc.types.DIDURL
	(*DocResolution)(nil),          // 14: api.did.doc.types.DocResolution
	(*MethodMetadata)(nil),         // 15: api.did.doc.types.MethodMetadata
	(*ProtocolOperation)(nil),      // 16: api.did.doc.types.ProtocolOperation
	(*DocumentMetadata)(nil),       // 17: api.did.doc.types.DocumentMetadata
	(*ProcessingMeta)(nil),         // 18: api.did.doc.types.ProcessingMeta
	(*Doc)(nil),                    // 19: api.did.doc.types.Doc
	(*VerificationMethod)(nil),     // 20: api.did.doc.types.VerificationMethod
	(*Service)(nil),                // 21: api.did.doc.types.Service
	(*Verification)(nil),           // 22: api.did.doc.types.Verification
	(*Proof)(nil),                  // 23: api.did.doc.types.Proof
	nil,                            // 24: api.did.doc.types.Thread.ReceivedOrdersEntry
	nil,                            // 25: api.did.doc.types.DIDURL.QueriesEntry
	nil,                            // 26: api.did.doc.types.Service.PropertiesEntry
	nil,                            // 27: api.did.doc.types.Service.RecipientKeysRelativeUrlEntry
	nil,                            // 28: api.did.doc.types.Service.RoutingKeysRelativeUrlEntry
	(*timestamppb.Timestamp)(nil),  // 29: google.protobuf.Timestamp
	(*anypb.Any)(nil),              // 30: google.protobuf.Any
	(*types.JSONWebKey)(nil),       // 31: api.did.jwk.types.JSONWebKey
}
var file_api_did_doc_types_doc_proto_depIdxs = []int32{
	24, // 0: api.did.doc.types.Thread.received_orders:type_name -> api.did.doc.types.Thread.ReceivedOrdersEntry
	29, // 1: api.did.doc.types.Timing.expires_time:type_name -> google.protobuf.Timestamp
	11, // 2: api.did.doc.types.Endpoint.rawDIDCommV2:type_name -> api.did.doc.types.DIDCommV2Endpoint
	30, // 3: api.did.doc.types.Endpoint.rawObj:type_name -> google.protobuf.Any
	5,  // 4: api.did.doc.types.Record.service_endPoint:type_name -> api.did.doc.types.Endpoint
	6,  // 5: api.did.doc.types.Record.my_did_rotation:type_name -> api.did.doc.types.DIDRotationRecord
	7,  // 6: api.did.doc.types.RecordResult.result:type_name -> api.did.doc.types.Record
	25, // 7: api.did.doc.types.DIDURL.queries:type_name -> api.did.doc.types.DIDURL.QueriesEntry
	19, // 8: api.did.doc.types.DocResolution.didDocument:type_name -> api.did.doc.types.Doc
	17, // 9: api.did.doc.types.DocResolution.documentMetadata:type_name -> api.did.doc.types.DocumentMetadata
	16, // 10: api.did.doc.types.MethodMetadata.unpublishedOperations:type_name -> api.did.doc.types.ProtocolOperation
	16, // 11: api.did.doc.types.MethodMetadata.publishedOperations:type_name -> api.did.doc.types.ProtocolOperation
	15, // 12: api.did.doc.types.DocumentMetadata.method:type_name -> api.did.doc.types.MethodMetadata
	20, // 13: api.did.doc.types.Doc.verificationMethod:type_name -> api.did.doc.types.VerificationMethod
	21, // 14: api.did.doc.types.Doc.service:type_name -> api.did.doc.types.Service
	22, // 15: api.did.doc.types.Doc.authentication:type_name -> api.did.doc.types.Verification
	22, // 16: api.did.doc.types.Doc.assertionMethod:type_name -> api.did.doc.types.Verification
	22, // 17: api.did.doc.types.Doc.capabilityDelegation:type_name -> api.did.doc.types.Verification
	22, // 18: api.did.doc.types.Doc.capabilityInvocation:type_name -> api.did.doc.types.Verification
	22, // 19: api.did.doc.types.Doc.keyAgreement:type_name -> api.did.doc.types.Verification
	23, // 20: api.did.doc.types.Doc.proof:type_name -> api.did.doc.types.Proof
	18, // 21: api.did.doc.types.Doc.processingMeta:type_name -> api.did.doc.types.ProcessingMeta
	29, // 22: api.did.doc.types.Doc.created:type_name -> google.protobuf.Timestamp
	29, // 23: api.did.doc.types.Doc.updated:type_name -> google.protobuf.Timestamp
	31, // 24: api.did.doc.types.VerificationMethod.jsonWebKey:type_name -> api.did.jwk.types.JSONWebKey
	0,  // 25: api.did.doc.types.VerificationMethod.multibaseEncoding:type_name -> api.did.doc.types.Encoding
	5,  // 26: api.did.doc.types.Service.serviceEndpoint:type_name -> api.did.doc.types.Endpoint
	26, // 27: api.did.doc.types.Service.properties:type_name -> api.did.doc.types.Service.PropertiesEntry
	27, // 28: api.did.doc.types.Service.recipientKeysRelativeUrl:type_name -> api.did.doc.types.Service.RecipientKeysRelativeUrlEntry
	28, // 29: api.did.doc.types.Service.routingKeysRelativeUrl:type_name -> api.did.doc.types.Service.RoutingKeysRelativeUrlEntry
	20, // 30: api.did.doc.types.Verification.verificationMethod:type_name -> api.did.doc.types.VerificationMethod
	1,  // 31: api.did.doc.types.Verification.relationship:type_name -> api.did.doc.types.VerificationRelationship
	29, // 32: api.did.doc.types.Proof.created:type_name -> google.protobuf.Timestamp
	30, // 33: api.did.doc.types.Service.PropertiesEntry.value:type_name -> google.protobuf.Any
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_api_did_doc_types_doc_proto_init() }
func file_api_did_doc_types_doc_proto_init() {
	if File_api_did_doc_types_doc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_did_doc_types_doc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Thread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_doc_types_doc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_doc_types_doc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_doc_types_doc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DIDRotationRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_doc_types_doc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_doc_types_doc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_doc_types_doc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryConnectionsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_doc_types_doc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DIDInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_doc_types_doc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DIDCommV2Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_doc_types_doc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_doc_types_doc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DIDURL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_doc_types_doc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocResolution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_doc_types_doc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_doc_types_doc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_doc_types_doc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_doc_types_doc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessingMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_doc_types_doc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Doc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_doc_types_doc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerificationMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_doc_types_doc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_doc_types_doc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Verification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_doc_types_doc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_did_doc_types_doc_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_did_doc_types_doc_proto_goTypes,
		DependencyIndexes: file_api_did_doc_types_doc_proto_depIdxs,
		EnumInfos:         file_api_did_doc_types_doc_proto_enumTypes,
		MessageInfos:      file_api_did_doc_types_doc_proto_msgTypes,
	}.Build()
	File_api_did_doc_types_doc_proto = out.File
	file_api_did_doc_types_doc_proto_rawDesc = nil
	file_api_did_doc_types_doc_proto_goTypes = nil
	file_api_did_doc_types_doc_proto_depIdxs = nil
}
