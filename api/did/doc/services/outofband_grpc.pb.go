// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/did/doc/services/outofband.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OutOfBandControllerClient is the client API for OutOfBandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OutOfBandControllerClient interface {
	// CreateInvitation creates and saves an out-of-band invitation.
	// CreateInvitation swagger:route POST /outofband/create-invitation outofband outofbandCreateInvitation
	// Responses:
	//        200: outofbandCreateInvitationResponse
	CreateInvitation(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*CreateInvitationResponse, error)
	// CreateInvitationV2 swagger:route POST /outofband/2.0/create-invitation outofbandv2 outofbandV2CreateInvitation
	//
	// Creates an invitation.
	//
	// Responses:
	//    default: genericError
	//        200: outofbandV2CreateInvitationResponse
	CreateInvitationV2(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*CreateInvitationResponse, error)
	// AcceptInvitation from another agent and return the ID of the new connection records.
	// AcceptInvitation swagger:route POST /outofband/accept-invitation outofband outofbandAcceptInvitation
	// Responses:
	//        200: outofbandAcceptInvitationResponse
	AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*AcceptInvitationResponse, error)
	// AcceptInvitation swagger:route POST /outofband/2.0/accept-invitation outofbandv2 outofbandV2AcceptInvitation
	//
	// Accepts an invitation.
	//
	// Responses:
	//    default: genericError
	//        200: outofbandV2AcceptInvitationResponse
	AcceptInvitationV2(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*AcceptInvitationResponse, error)
	// Actions returns pending actions that have not yet to be executed or canceled.
	// Actions swagger:route GET /outofband/actions outofband outofbandActions
	// Responses:
	//        200: outofbandActionsResponse
	Actions(ctx context.Context, in *ActionsRequest, opts ...grpc.CallOption) (*ActionsResponse, error)
	// ActionContinue allows continuing with the protocol after an action event was triggered.a
	// ActionContinue swagger:route POST /outofband/{piid}/action-continue outofband outofbandActionContinue
	// Responses:
	//        200: outofbandActionContinueResponse
	ActionContinue(ctx context.Context, in *ActionContinueRequest, opts ...grpc.CallOption) (*ActionContinueResponse, error)
	// ActionStop stops the protocol after an action event was triggered.
	// ActionStop swagger:route POST /outofband/{piid}/action-stop outofband outofbandActionStop
	// Responses:
	//        200: outofbandActionStopResponse
	ActionStop(ctx context.Context, in *ActionStopRequest, opts ...grpc.CallOption) (*ActionStopResponse, error)
}

type outOfBandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewOutOfBandControllerClient(cc grpc.ClientConnInterface) OutOfBandControllerClient {
	return &outOfBandControllerClient{cc}
}

func (c *outOfBandControllerClient) CreateInvitation(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*CreateInvitationResponse, error) {
	out := new(CreateInvitationResponse)
	err := c.cc.Invoke(ctx, "/api.did.outofband.services.OutOfBandController/createInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outOfBandControllerClient) CreateInvitationV2(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*CreateInvitationResponse, error) {
	out := new(CreateInvitationResponse)
	err := c.cc.Invoke(ctx, "/api.did.outofband.services.OutOfBandController/createInvitationV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outOfBandControllerClient) AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*AcceptInvitationResponse, error) {
	out := new(AcceptInvitationResponse)
	err := c.cc.Invoke(ctx, "/api.did.outofband.services.OutOfBandController/acceptInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outOfBandControllerClient) AcceptInvitationV2(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*AcceptInvitationResponse, error) {
	out := new(AcceptInvitationResponse)
	err := c.cc.Invoke(ctx, "/api.did.outofband.services.OutOfBandController/acceptInvitationV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outOfBandControllerClient) Actions(ctx context.Context, in *ActionsRequest, opts ...grpc.CallOption) (*ActionsResponse, error) {
	out := new(ActionsResponse)
	err := c.cc.Invoke(ctx, "/api.did.outofband.services.OutOfBandController/actions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outOfBandControllerClient) ActionContinue(ctx context.Context, in *ActionContinueRequest, opts ...grpc.CallOption) (*ActionContinueResponse, error) {
	out := new(ActionContinueResponse)
	err := c.cc.Invoke(ctx, "/api.did.outofband.services.OutOfBandController/actionContinue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *outOfBandControllerClient) ActionStop(ctx context.Context, in *ActionStopRequest, opts ...grpc.CallOption) (*ActionStopResponse, error) {
	out := new(ActionStopResponse)
	err := c.cc.Invoke(ctx, "/api.did.outofband.services.OutOfBandController/actionStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OutOfBandControllerServer is the server API for OutOfBandController service.
// All implementations must embed UnimplementedOutOfBandControllerServer
// for forward compatibility
type OutOfBandControllerServer interface {
	// CreateInvitation creates and saves an out-of-band invitation.
	// CreateInvitation swagger:route POST /outofband/create-invitation outofband outofbandCreateInvitation
	// Responses:
	//        200: outofbandCreateInvitationResponse
	CreateInvitation(context.Context, *CreateInvitationRequest) (*CreateInvitationResponse, error)
	// CreateInvitationV2 swagger:route POST /outofband/2.0/create-invitation outofbandv2 outofbandV2CreateInvitation
	//
	// Creates an invitation.
	//
	// Responses:
	//    default: genericError
	//        200: outofbandV2CreateInvitationResponse
	CreateInvitationV2(context.Context, *CreateInvitationRequest) (*CreateInvitationResponse, error)
	// AcceptInvitation from another agent and return the ID of the new connection records.
	// AcceptInvitation swagger:route POST /outofband/accept-invitation outofband outofbandAcceptInvitation
	// Responses:
	//        200: outofbandAcceptInvitationResponse
	AcceptInvitation(context.Context, *AcceptInvitationRequest) (*AcceptInvitationResponse, error)
	// AcceptInvitation swagger:route POST /outofband/2.0/accept-invitation outofbandv2 outofbandV2AcceptInvitation
	//
	// Accepts an invitation.
	//
	// Responses:
	//    default: genericError
	//        200: outofbandV2AcceptInvitationResponse
	AcceptInvitationV2(context.Context, *AcceptInvitationRequest) (*AcceptInvitationResponse, error)
	// Actions returns pending actions that have not yet to be executed or canceled.
	// Actions swagger:route GET /outofband/actions outofband outofbandActions
	// Responses:
	//        200: outofbandActionsResponse
	Actions(context.Context, *ActionsRequest) (*ActionsResponse, error)
	// ActionContinue allows continuing with the protocol after an action event was triggered.a
	// ActionContinue swagger:route POST /outofband/{piid}/action-continue outofband outofbandActionContinue
	// Responses:
	//        200: outofbandActionContinueResponse
	ActionContinue(context.Context, *ActionContinueRequest) (*ActionContinueResponse, error)
	// ActionStop stops the protocol after an action event was triggered.
	// ActionStop swagger:route POST /outofband/{piid}/action-stop outofband outofbandActionStop
	// Responses:
	//        200: outofbandActionStopResponse
	ActionStop(context.Context, *ActionStopRequest) (*ActionStopResponse, error)
	mustEmbedUnimplementedOutOfBandControllerServer()
}

// UnimplementedOutOfBandControllerServer must be embedded to have forward compatible implementations.
type UnimplementedOutOfBandControllerServer struct {
}

func (UnimplementedOutOfBandControllerServer) CreateInvitation(context.Context, *CreateInvitationRequest) (*CreateInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvitation not implemented")
}
func (UnimplementedOutOfBandControllerServer) CreateInvitationV2(context.Context, *CreateInvitationRequest) (*CreateInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvitationV2 not implemented")
}
func (UnimplementedOutOfBandControllerServer) AcceptInvitation(context.Context, *AcceptInvitationRequest) (*AcceptInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvitation not implemented")
}
func (UnimplementedOutOfBandControllerServer) AcceptInvitationV2(context.Context, *AcceptInvitationRequest) (*AcceptInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvitationV2 not implemented")
}
func (UnimplementedOutOfBandControllerServer) Actions(context.Context, *ActionsRequest) (*ActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Actions not implemented")
}
func (UnimplementedOutOfBandControllerServer) ActionContinue(context.Context, *ActionContinueRequest) (*ActionContinueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionContinue not implemented")
}
func (UnimplementedOutOfBandControllerServer) ActionStop(context.Context, *ActionStopRequest) (*ActionStopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionStop not implemented")
}
func (UnimplementedOutOfBandControllerServer) mustEmbedUnimplementedOutOfBandControllerServer() {}

// UnsafeOutOfBandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OutOfBandControllerServer will
// result in compilation errors.
type UnsafeOutOfBandControllerServer interface {
	mustEmbedUnimplementedOutOfBandControllerServer()
}

func RegisterOutOfBandControllerServer(s grpc.ServiceRegistrar, srv OutOfBandControllerServer) {
	s.RegisterService(&OutOfBandController_ServiceDesc, srv)
}

func _OutOfBandController_CreateInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutOfBandControllerServer).CreateInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.outofband.services.OutOfBandController/createInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutOfBandControllerServer).CreateInvitation(ctx, req.(*CreateInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutOfBandController_CreateInvitationV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutOfBandControllerServer).CreateInvitationV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.outofband.services.OutOfBandController/createInvitationV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutOfBandControllerServer).CreateInvitationV2(ctx, req.(*CreateInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutOfBandController_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutOfBandControllerServer).AcceptInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.outofband.services.OutOfBandController/acceptInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutOfBandControllerServer).AcceptInvitation(ctx, req.(*AcceptInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutOfBandController_AcceptInvitationV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutOfBandControllerServer).AcceptInvitationV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.outofband.services.OutOfBandController/acceptInvitationV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutOfBandControllerServer).AcceptInvitationV2(ctx, req.(*AcceptInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutOfBandController_Actions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutOfBandControllerServer).Actions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.outofband.services.OutOfBandController/actions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutOfBandControllerServer).Actions(ctx, req.(*ActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutOfBandController_ActionContinue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionContinueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutOfBandControllerServer).ActionContinue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.outofband.services.OutOfBandController/actionContinue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutOfBandControllerServer).ActionContinue(ctx, req.(*ActionContinueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OutOfBandController_ActionStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OutOfBandControllerServer).ActionStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.outofband.services.OutOfBandController/actionStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OutOfBandControllerServer).ActionStop(ctx, req.(*ActionStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OutOfBandController_ServiceDesc is the grpc.ServiceDesc for OutOfBandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OutOfBandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.did.outofband.services.OutOfBandController",
	HandlerType: (*OutOfBandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createInvitation",
			Handler:    _OutOfBandController_CreateInvitation_Handler,
		},
		{
			MethodName: "createInvitationV2",
			Handler:    _OutOfBandController_CreateInvitationV2_Handler,
		},
		{
			MethodName: "acceptInvitation",
			Handler:    _OutOfBandController_AcceptInvitation_Handler,
		},
		{
			MethodName: "acceptInvitationV2",
			Handler:    _OutOfBandController_AcceptInvitationV2_Handler,
		},
		{
			MethodName: "actions",
			Handler:    _OutOfBandController_Actions_Handler,
		},
		{
			MethodName: "actionContinue",
			Handler:    _OutOfBandController_ActionContinue_Handler,
		},
		{
			MethodName: "actionStop",
			Handler:    _OutOfBandController_ActionStop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/did/doc/services/outofband.proto",
}
