// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/did/msg/services/message.proto

package services

import (
	context "context"
	types "github.com/bhatti/GSSI/api/common/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessagingControllerClient is the client API for MessagingController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessagingControllerClient interface {
	// RegisterService registers new message service to message handler registrar.
	// RegisterService swagger:route POST /message/register-service message registerMsgSvc
	//
	// registers new message service to message handler registrar
	//
	// Responses:
	//    default: genericError
	RegisterService(ctx context.Context, in *RegisterMsgSvcRequest, opts ...grpc.CallOption) (*types.EmptyResponse, error)
	// UnregisterService unregisters given message service handler registrar.
	// UnregisterService swagger:route POST /message/unregister-service message http-over-didcomm unregisterMsgSvc
	//
	// unregisters given message service handler registrar
	//
	// Responses:
	//    default: genericError
	UnregisterService(ctx context.Context, in *UnregisterMsgSvcRequest, opts ...grpc.CallOption) (*types.EmptyResponse, error)
	// Services returns list of registered service names.
	// Services swagger:route GET /message/services message http-over-didcomm services
	//
	// returns list of registered service names
	//
	// Responses:
	//    default: genericError
	//    200: registeredServicesResponse
	Services(ctx context.Context, in *RegisteredServicesRequest, opts ...grpc.CallOption) (*RegisteredServicesResponse, error)
	// Send sends new message to destination provided.
	// Send swagger:route POST /message/send message sendNewMessage
	//
	// sends new message to destination provided
	//
	// Responses:
	//    default: genericError
	//    200: sendMessageResponse
	Send(ctx context.Context, in *SendNewMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// Reply sends reply to existing message.
	// Reply swagger:route POST /message/reply message sendReplyMessage
	//
	// sends reply to existing message
	//
	// Responses:
	//    default: genericError
	//    200: sendMessageResponse
	Reply(ctx context.Context, in *SendReplyMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// RegisterHTTPService registers new http over didcomm service to message handler registrar.
	// RegisterHTTPService swagger:route POST /http-over-didcomm/register http-over-didcomm registerHttpMsgSvc
	//
	// registers new http over didcomm service to message handler registrar
	//
	// Responses:
	//    default: genericError
	RegisterHTTPService(ctx context.Context, in *RegisterHTTPMsgSvcRequest, opts ...grpc.CallOption) (*types.EmptyResponse, error)
}

type messagingControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessagingControllerClient(cc grpc.ClientConnInterface) MessagingControllerClient {
	return &messagingControllerClient{cc}
}

func (c *messagingControllerClient) RegisterService(ctx context.Context, in *RegisterMsgSvcRequest, opts ...grpc.CallOption) (*types.EmptyResponse, error) {
	out := new(types.EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.did.msg.services.MessagingController/registerService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingControllerClient) UnregisterService(ctx context.Context, in *UnregisterMsgSvcRequest, opts ...grpc.CallOption) (*types.EmptyResponse, error) {
	out := new(types.EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.did.msg.services.MessagingController/unregisterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingControllerClient) Services(ctx context.Context, in *RegisteredServicesRequest, opts ...grpc.CallOption) (*RegisteredServicesResponse, error) {
	out := new(RegisteredServicesResponse)
	err := c.cc.Invoke(ctx, "/api.did.msg.services.MessagingController/services", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingControllerClient) Send(ctx context.Context, in *SendNewMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/api.did.msg.services.MessagingController/send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingControllerClient) Reply(ctx context.Context, in *SendReplyMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, "/api.did.msg.services.MessagingController/reply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messagingControllerClient) RegisterHTTPService(ctx context.Context, in *RegisterHTTPMsgSvcRequest, opts ...grpc.CallOption) (*types.EmptyResponse, error) {
	out := new(types.EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.did.msg.services.MessagingController/registerHTTPService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessagingControllerServer is the server API for MessagingController service.
// All implementations must embed UnimplementedMessagingControllerServer
// for forward compatibility
type MessagingControllerServer interface {
	// RegisterService registers new message service to message handler registrar.
	// RegisterService swagger:route POST /message/register-service message registerMsgSvc
	//
	// registers new message service to message handler registrar
	//
	// Responses:
	//    default: genericError
	RegisterService(context.Context, *RegisterMsgSvcRequest) (*types.EmptyResponse, error)
	// UnregisterService unregisters given message service handler registrar.
	// UnregisterService swagger:route POST /message/unregister-service message http-over-didcomm unregisterMsgSvc
	//
	// unregisters given message service handler registrar
	//
	// Responses:
	//    default: genericError
	UnregisterService(context.Context, *UnregisterMsgSvcRequest) (*types.EmptyResponse, error)
	// Services returns list of registered service names.
	// Services swagger:route GET /message/services message http-over-didcomm services
	//
	// returns list of registered service names
	//
	// Responses:
	//    default: genericError
	//    200: registeredServicesResponse
	Services(context.Context, *RegisteredServicesRequest) (*RegisteredServicesResponse, error)
	// Send sends new message to destination provided.
	// Send swagger:route POST /message/send message sendNewMessage
	//
	// sends new message to destination provided
	//
	// Responses:
	//    default: genericError
	//    200: sendMessageResponse
	Send(context.Context, *SendNewMessageRequest) (*SendMessageResponse, error)
	// Reply sends reply to existing message.
	// Reply swagger:route POST /message/reply message sendReplyMessage
	//
	// sends reply to existing message
	//
	// Responses:
	//    default: genericError
	//    200: sendMessageResponse
	Reply(context.Context, *SendReplyMessageRequest) (*SendMessageResponse, error)
	// RegisterHTTPService registers new http over didcomm service to message handler registrar.
	// RegisterHTTPService swagger:route POST /http-over-didcomm/register http-over-didcomm registerHttpMsgSvc
	//
	// registers new http over didcomm service to message handler registrar
	//
	// Responses:
	//    default: genericError
	RegisterHTTPService(context.Context, *RegisterHTTPMsgSvcRequest) (*types.EmptyResponse, error)
	mustEmbedUnimplementedMessagingControllerServer()
}

// UnimplementedMessagingControllerServer must be embedded to have forward compatible implementations.
type UnimplementedMessagingControllerServer struct {
}

func (UnimplementedMessagingControllerServer) RegisterService(context.Context, *RegisterMsgSvcRequest) (*types.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterService not implemented")
}
func (UnimplementedMessagingControllerServer) UnregisterService(context.Context, *UnregisterMsgSvcRequest) (*types.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterService not implemented")
}
func (UnimplementedMessagingControllerServer) Services(context.Context, *RegisteredServicesRequest) (*RegisteredServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Services not implemented")
}
func (UnimplementedMessagingControllerServer) Send(context.Context, *SendNewMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedMessagingControllerServer) Reply(context.Context, *SendReplyMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reply not implemented")
}
func (UnimplementedMessagingControllerServer) RegisterHTTPService(context.Context, *RegisterHTTPMsgSvcRequest) (*types.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterHTTPService not implemented")
}
func (UnimplementedMessagingControllerServer) mustEmbedUnimplementedMessagingControllerServer() {}

// UnsafeMessagingControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessagingControllerServer will
// result in compilation errors.
type UnsafeMessagingControllerServer interface {
	mustEmbedUnimplementedMessagingControllerServer()
}

func RegisterMessagingControllerServer(s grpc.ServiceRegistrar, srv MessagingControllerServer) {
	s.RegisterService(&MessagingController_ServiceDesc, srv)
}

func _MessagingController_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMsgSvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingControllerServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.msg.services.MessagingController/registerService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingControllerServer).RegisterService(ctx, req.(*RegisterMsgSvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingController_UnregisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterMsgSvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingControllerServer).UnregisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.msg.services.MessagingController/unregisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingControllerServer).UnregisterService(ctx, req.(*UnregisterMsgSvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingController_Services_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisteredServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingControllerServer).Services(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.msg.services.MessagingController/services",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingControllerServer).Services(ctx, req.(*RegisteredServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingController_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendNewMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingControllerServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.msg.services.MessagingController/send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingControllerServer).Send(ctx, req.(*SendNewMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingController_Reply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendReplyMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingControllerServer).Reply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.msg.services.MessagingController/reply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingControllerServer).Reply(ctx, req.(*SendReplyMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessagingController_RegisterHTTPService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterHTTPMsgSvcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessagingControllerServer).RegisterHTTPService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.msg.services.MessagingController/registerHTTPService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessagingControllerServer).RegisterHTTPService(ctx, req.(*RegisterHTTPMsgSvcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MessagingController_ServiceDesc is the grpc.ServiceDesc for MessagingController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessagingController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.did.msg.services.MessagingController",
	HandlerType: (*MessagingControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registerService",
			Handler:    _MessagingController_RegisterService_Handler,
		},
		{
			MethodName: "unregisterService",
			Handler:    _MessagingController_UnregisterService_Handler,
		},
		{
			MethodName: "services",
			Handler:    _MessagingController_Services_Handler,
		},
		{
			MethodName: "send",
			Handler:    _MessagingController_Send_Handler,
		},
		{
			MethodName: "reply",
			Handler:    _MessagingController_Reply_Handler,
		},
		{
			MethodName: "registerHTTPService",
			Handler:    _MessagingController_RegisterHTTPService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/did/msg/services/message.proto",
}
