// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: api/did/msg/types/message.proto

package types

import (
	types "github.com/bhatti/GSSI/api/did/doc/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message is message model for basic message protocol
// Reference:
//  https://github.com/hyperledger/aries-rfcs/tree/master/features/0095-basic-message#reference
type I10N struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locale string `protobuf:"bytes,1,opt,name=locale,proto3" json:"locale,omitempty"`
}

func (x *I10N) Reset() {
	*x = I10N{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_msg_types_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *I10N) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*I10N) ProtoMessage() {}

func (x *I10N) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_msg_types_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use I10N.ProtoReflect.Descriptor instead.
func (*I10N) Descriptor() ([]byte, []int) {
	return file_api_did_msg_types_message_proto_rawDescGZIP(), []int{0}
}

func (x *I10N) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // @id
	Type     string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // @type
	L10N     *I10N                  `protobuf:"bytes,3,opt,name=l10n,proto3" json:"l10n,omitempty"` // ~l10n
	Content  string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	SentTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=sent_time,json=sentTime,proto3" json:"sent_time,omitempty"`
	// Message messagepickup wrapper.
	Msg       []byte                 `protobuf:"bytes,6,opt,name=msg,proto3" json:"msg,omitempty"`
	AddedTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=added_time,json=addedTime,proto3" json:"added_time,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_msg_types_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_msg_types_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_api_did_msg_types_message_proto_rawDescGZIP(), []int{1}
}

func (x *Message) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Message) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Message) GetL10N() *I10N {
	if x != nil {
		return x.L10N
	}
	return nil
}

func (x *Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Message) GetSentTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SentTime
	}
	return nil
}

func (x *Message) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *Message) GetAddedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AddedTime
	}
	return nil
}

// StatusRequest sent by the recipient to the message_holder to request a status message./0212-pickup#statusrequest
// https://github.com/hyperledger/aries-rfcs/tree/master/features/0212-pickup#statusrequest
type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`         // @id
	Type   string        `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`     // @type
	Thread *types.Thread `protobuf:"bytes,3,opt,name=thread,proto3" json:"thread,omitempty"` // ~thread
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_msg_types_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_msg_types_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_api_did_msg_types_message_proto_rawDescGZIP(), []int{2}
}

func (x *StatusRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StatusRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StatusRequest) GetThread() *types.Thread {
	if x != nil {
		return x.Thread
	}
	return nil
}

// Status details about pending messages
// https://github.com/hyperledger/aries-rfcs/tree/master/features/0212-pickup#status
type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // @id
	Type              string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // @type
	MessageCount      int32                  `protobuf:"varint,3,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
	DurationWaited    int32                  `protobuf:"varint,4,opt,name=duration_waited,json=durationWaited,proto3" json:"duration_waited,omitempty"`
	LastAddedTime     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_added_time,json=lastAddedTime,proto3" json:"last_added_time,omitempty"`
	LastDeliveredTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_delivered_time,json=lastDeliveredTime,proto3" json:"last_delivered_time,omitempty"`
	LastRemovedTime   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=last_removed_time,json=lastRemovedTime,proto3" json:"last_removed_time,omitempty"`
	TotalSize         int32                  `protobuf:"varint,8,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	Thread            *types.Thread          `protobuf:"bytes,9,opt,name=thread,proto3" json:"thread,omitempty"` // ~thread
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_msg_types_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_msg_types_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_api_did_msg_types_message_proto_rawDescGZIP(), []int{3}
}

func (x *Status) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Status) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Status) GetMessageCount() int32 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

func (x *Status) GetDurationWaited() int32 {
	if x != nil {
		return x.DurationWaited
	}
	return 0
}

func (x *Status) GetLastAddedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAddedTime
	}
	return nil
}

func (x *Status) GetLastDeliveredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastDeliveredTime
	}
	return nil
}

func (x *Status) GetLastRemovedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRemovedTime
	}
	return nil
}

func (x *Status) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *Status) GetThread() *types.Thread {
	if x != nil {
		return x.Thread
	}
	return nil
}

// BatchPickup a request to have multiple waiting messages sent inside a batch message.
// https://github.com/hyperledger/aries-rfcs/tree/master/features/0212-pickup#batch-pickup
type BatchPickup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // @id
	Type      string        `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // @type
	BatchSize int32         `protobuf:"varint,3,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	Thread    *types.Thread `protobuf:"bytes,4,opt,name=thread,proto3" json:"thread,omitempty"` // ~thread
}

func (x *BatchPickup) Reset() {
	*x = BatchPickup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_msg_types_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchPickup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchPickup) ProtoMessage() {}

func (x *BatchPickup) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_msg_types_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchPickup.ProtoReflect.Descriptor instead.
func (*BatchPickup) Descriptor() ([]byte, []int) {
	return file_api_did_msg_types_message_proto_rawDescGZIP(), []int{4}
}

func (x *BatchPickup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BatchPickup) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BatchPickup) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *BatchPickup) GetThread() *types.Thread {
	if x != nil {
		return x.Thread
	}
	return nil
}

// Batch a message that contains multiple waiting messages.
// https://github.com/hyperledger/aries-rfcs/tree/master/features/0212-pickup#batch
type Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // @id
	Type      string        `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // @type
	BatchSize int32         `protobuf:"varint,3,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	Thread    *types.Thread `protobuf:"bytes,4,opt,name=thread,proto3" json:"thread,omitempty"`     // ~thread
	Messages  []*Message    `protobuf:"bytes,5,rep,name=messages,proto3" json:"messages,omitempty"` // messages~attach
}

func (x *Batch) Reset() {
	*x = Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_msg_types_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_msg_types_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_api_did_msg_types_message_proto_rawDescGZIP(), []int{5}
}

func (x *Batch) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Batch) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Batch) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *Batch) GetThread() *types.Thread {
	if x != nil {
		return x.Thread
	}
	return nil
}

func (x *Batch) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

// Noop message
// https://github.com/hyperledger/aries-rfcs/tree/master/features/0212-pickup#noop
type Noop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // @id
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // @type
}

func (x *Noop) Reset() {
	*x = Noop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_msg_types_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Noop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Noop) ProtoMessage() {}

func (x *Noop) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_msg_types_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Noop.ProtoReflect.Descriptor instead.
func (*Noop) Descriptor() ([]byte, []int) {
	return file_api_did_msg_types_message_proto_rawDescGZIP(), []int{6}
}

func (x *Noop) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Noop) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type Inbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Did               string                 `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	MessageCount      int32                  `protobuf:"varint,2,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
	LastAddedTime     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_added_time,json=lastAddedTime,proto3" json:"last_added_time,omitempty"`
	LastDeliveredTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=last_delivered_time,json=lastDeliveredTime,proto3" json:"last_delivered_time,omitempty"`
	LastRemovedTime   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_removed_time,json=lastRemovedTime,proto3" json:"last_removed_time,omitempty"`
	TotalSize         int32                  `protobuf:"varint,6,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
	Messages          []*Message             `protobuf:"bytes,7,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *Inbox) Reset() {
	*x = Inbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_msg_types_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Inbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Inbox) ProtoMessage() {}

func (x *Inbox) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_msg_types_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Inbox.ProtoReflect.Descriptor instead.
func (*Inbox) Descriptor() ([]byte, []int) {
	return file_api_did_msg_types_message_proto_rawDescGZIP(), []int{7}
}

func (x *Inbox) GetDid() string {
	if x != nil {
		return x.Did
	}
	return ""
}

func (x *Inbox) GetMessageCount() int32 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

func (x *Inbox) GetLastAddedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAddedTime
	}
	return nil
}

func (x *Inbox) GetLastDeliveredTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastDeliveredTime
	}
	return nil
}

func (x *Inbox) GetLastRemovedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRemovedTime
	}
	return nil
}

func (x *Inbox) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

func (x *Inbox) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

// httpOverDIDCommMsg is incoming DIDComm message for http-over-didcomm message types
// Reference:
//  https://github.com/hyperledger/aries-rfcs/blob/master/features/0335-http-over-didcomm/README.md#message-format
type HttpHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *HttpHeader) Reset() {
	*x = HttpHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_msg_types_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpHeader) ProtoMessage() {}

func (x *HttpHeader) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_msg_types_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpHeader.ProtoReflect.Descriptor instead.
func (*HttpHeader) Descriptor() ([]byte, []int) {
	return file_api_did_msg_types_message_proto_rawDescGZIP(), []int{8}
}

func (x *HttpHeader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HttpHeader) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type HttpOverDIDCommMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // @id
	Method      string        `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	ResourceUri string        `protobuf:"bytes,3,opt,name=resource_uri,json=resourceUri,proto3" json:"resource_uri,omitempty"` //resource-uri
	Version     string        `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Headers     []*HttpHeader `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty"`
	Body        string        `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *HttpOverDIDCommMsg) Reset() {
	*x = HttpOverDIDCommMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_msg_types_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpOverDIDCommMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpOverDIDCommMsg) ProtoMessage() {}

func (x *HttpOverDIDCommMsg) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_msg_types_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpOverDIDCommMsg.ProtoReflect.Descriptor instead.
func (*HttpOverDIDCommMsg) Descriptor() ([]byte, []int) {
	return file_api_did_msg_types_message_proto_rawDescGZIP(), []int{9}
}

func (x *HttpOverDIDCommMsg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *HttpOverDIDCommMsg) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HttpOverDIDCommMsg) GetResourceUri() string {
	if x != nil {
		return x.ResourceUri
	}
	return ""
}

func (x *HttpOverDIDCommMsg) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *HttpOverDIDCommMsg) GetHeaders() []*HttpHeader {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HttpOverDIDCommMsg) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

var File_api_did_msg_types_message_proto protoreflect.FileDescriptor

var file_api_did_msg_types_message_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x64, 0x2f, 0x6d, 0x73, 0x67, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x64, 0x2f, 0x64,
	0x6f, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x64, 0x6f, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x1e, 0x0a, 0x04, 0x49, 0x31, 0x30, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x31, 0x30, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x31, 0x30, 0x6e, 0x52, 0x04, 0x6c, 0x31, 0x30, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x64, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x66, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64,
	0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0xa4, 0x03, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61,
	0x69, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x41,
	0x64, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0x83,
	0x01, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x06, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x31, 0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x06, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x2a, 0x0a, 0x04,
	0x4e, 0x6f, 0x6f, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xed, 0x02, 0x0a, 0x05, 0x49, 0x6e, 0x62,
	0x6f, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x64, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x6c, 0x61, 0x73, 0x74, 0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a,
	0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x36, 0x0a, 0x0a, 0x48, 0x74, 0x74, 0x70,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xc6, 0x01, 0x0a, 0x12, 0x48, 0x74, 0x74, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x44, 0x49, 0x44,
	0x43, 0x6f, 0x6d, 0x6d, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55,
	0x72, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x68, 0x61, 0x74, 0x74, 0x69, 0x2f, 0x47,
	0x53, 0x53, 0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x64, 0x2f, 0x6d, 0x73, 0x67, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_did_msg_types_message_proto_rawDescOnce sync.Once
	file_api_did_msg_types_message_proto_rawDescData = file_api_did_msg_types_message_proto_rawDesc
)

func file_api_did_msg_types_message_proto_rawDescGZIP() []byte {
	file_api_did_msg_types_message_proto_rawDescOnce.Do(func() {
		file_api_did_msg_types_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_did_msg_types_message_proto_rawDescData)
	})
	return file_api_did_msg_types_message_proto_rawDescData
}

var file_api_did_msg_types_message_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_api_did_msg_types_message_proto_goTypes = []interface{}{
	(*I10N)(nil),                  // 0: api.did.msg.types.I10n
	(*Message)(nil),               // 1: api.did.msg.types.Message
	(*StatusRequest)(nil),         // 2: api.did.msg.types.StatusRequest
	(*Status)(nil),                // 3: api.did.msg.types.Status
	(*BatchPickup)(nil),           // 4: api.did.msg.types.BatchPickup
	(*Batch)(nil),                 // 5: api.did.msg.types.Batch
	(*Noop)(nil),                  // 6: api.did.msg.types.Noop
	(*Inbox)(nil),                 // 7: api.did.msg.types.Inbox
	(*HttpHeader)(nil),            // 8: api.did.msg.types.HttpHeader
	(*HttpOverDIDCommMsg)(nil),    // 9: api.did.msg.types.HttpOverDIDCommMsg
	(*timestamppb.Timestamp)(nil), // 10: google.protobuf.Timestamp
	(*types.Thread)(nil),          // 11: api.did.doc.types.Thread
}
var file_api_did_msg_types_message_proto_depIdxs = []int32{
	0,  // 0: api.did.msg.types.Message.l10n:type_name -> api.did.msg.types.I10n
	10, // 1: api.did.msg.types.Message.sent_time:type_name -> google.protobuf.Timestamp
	10, // 2: api.did.msg.types.Message.added_time:type_name -> google.protobuf.Timestamp
	11, // 3: api.did.msg.types.StatusRequest.thread:type_name -> api.did.doc.types.Thread
	10, // 4: api.did.msg.types.Status.last_added_time:type_name -> google.protobuf.Timestamp
	10, // 5: api.did.msg.types.Status.last_delivered_time:type_name -> google.protobuf.Timestamp
	10, // 6: api.did.msg.types.Status.last_removed_time:type_name -> google.protobuf.Timestamp
	11, // 7: api.did.msg.types.Status.thread:type_name -> api.did.doc.types.Thread
	11, // 8: api.did.msg.types.BatchPickup.thread:type_name -> api.did.doc.types.Thread
	11, // 9: api.did.msg.types.Batch.thread:type_name -> api.did.doc.types.Thread
	1,  // 10: api.did.msg.types.Batch.messages:type_name -> api.did.msg.types.Message
	10, // 11: api.did.msg.types.Inbox.last_added_time:type_name -> google.protobuf.Timestamp
	10, // 12: api.did.msg.types.Inbox.last_delivered_time:type_name -> google.protobuf.Timestamp
	10, // 13: api.did.msg.types.Inbox.last_removed_time:type_name -> google.protobuf.Timestamp
	1,  // 14: api.did.msg.types.Inbox.messages:type_name -> api.did.msg.types.Message
	8,  // 15: api.did.msg.types.HttpOverDIDCommMsg.headers:type_name -> api.did.msg.types.HttpHeader
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_api_did_msg_types_message_proto_init() }
func file_api_did_msg_types_message_proto_init() {
	if File_api_did_msg_types_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_did_msg_types_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*I10N); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_msg_types_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_msg_types_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_msg_types_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_msg_types_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchPickup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_msg_types_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_msg_types_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Noop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_msg_types_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Inbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_msg_types_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_msg_types_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpOverDIDCommMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_did_msg_types_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_did_msg_types_message_proto_goTypes,
		DependencyIndexes: file_api_did_msg_types_message_proto_depIdxs,
		MessageInfos:      file_api_did_msg_types_message_proto_msgTypes,
	}.Build()
	File_api_did_msg_types_message_proto = out.File
	file_api_did_msg_types_message_proto_rawDesc = nil
	file_api_did_msg_types_message_proto_goTypes = nil
	file_api_did_msg_types_message_proto_depIdxs = nil
}
