// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/did/introduce/services/introduce.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IntroduceControllerClient is the client API for IntroduceController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntroduceControllerClient interface {
	// Actions returns unfinished actions for the async usage.
	// Returns pending actions that have not yet to be executed or cancelled.
	// Actions swagger:route GET /introduce/actions introduce introduceActionsReq
	//
	// Returns pending actions that have not yet to be executed or cancelled.
	//
	// Responses:
	//        200: introduceActionsResponse
	Actions(ctx context.Context, in *IntroduceActionsRequest, opts ...grpc.CallOption) (*IntroduceActionsResponse, error)
	// SendProposal sends a proposal to the introducees (the client has not published an out-of-band message)
	// SendProposal swagger:route POST /introduce/send-proposal introduce introduceSendProposalRequest
	//
	// Sends a proposal.
	//
	// Responses:
	//    default: genericError
	//        200: introduceSendProposalResponse
	SendProposal(ctx context.Context, in *IntroduceSendProposalRequest, opts ...grpc.CallOption) (*IntroduceSendProposalResponse, error)
	// SendProposalWithOOBInvitation sends a proposal to the introducee (the client has published an out-of-band request)
	// SendProposalWithOOBInvitation swagger:route POST /introduce/send-proposal-with-oob-invitation introduce introduceSendProposalWithOOBInvitationRequest
	//
	// Sends a proposal with OOBRequest.
	//
	// Responses:
	//        200: introduceSendProposalWithOOBInvitationResponse
	SendProposalWithOOBInvitation(ctx context.Context, in *IntroduceSendProposalWithOOBInvitationRequest, opts ...grpc.CallOption) (*IntroduceSendProposalWithOOBInvitationResponse, error)
	// SendRequest sends a request showing that the introducee is willing to share their own out-of-band message
	// SendRequest swagger:route POST /introduce/send-request introduce introduceSendRequest
	//
	// Sends a request.
	//
	// Responses:
	//    default: genericError
	//        200: introduceSendResponse
	SendRequest(ctx context.Context, in *IntroduceSendProposalRequest, opts ...grpc.CallOption) (*IntroduceSendProposalResponse, error)
	// AcceptProposalWithOOBInvitation is used when introducee wants to provide an out-of-band request
	// AcceptProposalWithOOBInvitation swagger:route POST /introduce/{piid}/accept-proposal-with-oob-invitation introduce introduceAcceptProposalWithOOBInvitation
	//
	// Accepts a proposal with OOBRequest.
	//
	// Responses:
	//    default: genericError
	//        200: introduceAcceptProposalWithOOBResponse
	AcceptProposalWithOOBInvitation(ctx context.Context, in *IntroduceAcceptProposalWithOOBInvitationRequest, opts ...grpc.CallOption) (*IntroduceAcceptProposalWithOOBResponse, error)
	// AcceptProposal is used when introducee wants to accept a proposal without providing a OOBRequest
	// AcceptProposal swagger:route POST /introduce/{piid}/accept-proposal introduce introduceAcceptProposal
	//
	// Accepts a proposal.
	//
	// Responses:
	//        200: introduceAcceptProposalResponse
	AcceptProposal(ctx context.Context, in *IntroduceAcceptProposalRequest, opts ...grpc.CallOption) (*IntroduceAcceptProposalResponse, error)
	// AcceptRequestWithPublicOOBInvitation is used when introducer wants to provide a published out-of-band request
	// AcceptRequestWithPublicOOBInvitation swagger:route POST /introduce/{piid}/accept-request-with-public-oob-invitation introduce introduceAcceptRequestWithPublicOOBInvitation
	//
	// Accept a request with public OOBRequest.
	//
	// Responses:
	//        200: introduceAcceptRequestWithPublicOOBInvitationResponse
	AcceptRequestWithPublicOOBInvitation(ctx context.Context, in *IntroduceAcceptProposalWithOOBInvitationRequest, opts ...grpc.CallOption) (*IntroduceAcceptRequestWithPublicOOBInvitationResponse, error)
	// AcceptRequestWithRecipients is used when the introducer does not have a published out-of-band message on hand
	// but they are willing to introduce agents to each other
	// AcceptRequestWithRecipients swagger:route POST /introduce/{piid}/accept-request-with-recipients introduce introduceAcceptRequestWithRecipients
	//
	// Accept a request with recipients.
	//
	// Responses:
	//        200: introduceAcceptRequestWithRecipientsResponse
	AcceptRequestWithRecipients(ctx context.Context, in *IntroduceAcceptRequestWithRecipients, opts ...grpc.CallOption) (*IntroduceAcceptRequestWithRecipientsResponse, error)
	// DeclineProposal is used to reject the proposal
	// DeclineProposal swagger:route POST /introduce/{piid}/decline-proposal introduce introduceDeclineProposal
	//
	// Declines a proposal.
	//
	// Responses:
	//    default: genericError
	//        200: introduceDeclineProposalResponse
	DeclineProposal(ctx context.Context, in *IntroduceDeclineProposalRequest, opts ...grpc.CallOption) (*IntroduceDeclineProposalRequest, error)
	// DeclineRequest swagger:route POST /introduce/{piid}/decline-request introduce introduceDeclineRequest
	//
	// Declines a request.
	//
	// Responses:
	//    default: genericError
	//        200: introduceDeclineRequestResponse
	DeclineRequest(ctx context.Context, in *IntroduceDeclineRequest, opts ...grpc.CallOption) (*IntroduceDeclineResponse, error)
	// AcceptProblemReport swagger:route POST /introduce/{piid}/accept-problem-report introduce introduceAcceptProblemReport
	//
	// Accepts a problem report.
	//
	// Responses:
	//        200: introduceAcceptProblemReportResponse
	AcceptProblemReport(ctx context.Context, in *IntroduceAcceptProblemReportRequest, opts ...grpc.CallOption) (*IntroduceAcceptProblemReportResponse, error)
}

type introduceControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewIntroduceControllerClient(cc grpc.ClientConnInterface) IntroduceControllerClient {
	return &introduceControllerClient{cc}
}

func (c *introduceControllerClient) Actions(ctx context.Context, in *IntroduceActionsRequest, opts ...grpc.CallOption) (*IntroduceActionsResponse, error) {
	out := new(IntroduceActionsResponse)
	err := c.cc.Invoke(ctx, "/api.did.introduce.services.IntroduceController/actions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *introduceControllerClient) SendProposal(ctx context.Context, in *IntroduceSendProposalRequest, opts ...grpc.CallOption) (*IntroduceSendProposalResponse, error) {
	out := new(IntroduceSendProposalResponse)
	err := c.cc.Invoke(ctx, "/api.did.introduce.services.IntroduceController/sendProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *introduceControllerClient) SendProposalWithOOBInvitation(ctx context.Context, in *IntroduceSendProposalWithOOBInvitationRequest, opts ...grpc.CallOption) (*IntroduceSendProposalWithOOBInvitationResponse, error) {
	out := new(IntroduceSendProposalWithOOBInvitationResponse)
	err := c.cc.Invoke(ctx, "/api.did.introduce.services.IntroduceController/sendProposalWithOOBInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *introduceControllerClient) SendRequest(ctx context.Context, in *IntroduceSendProposalRequest, opts ...grpc.CallOption) (*IntroduceSendProposalResponse, error) {
	out := new(IntroduceSendProposalResponse)
	err := c.cc.Invoke(ctx, "/api.did.introduce.services.IntroduceController/sendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *introduceControllerClient) AcceptProposalWithOOBInvitation(ctx context.Context, in *IntroduceAcceptProposalWithOOBInvitationRequest, opts ...grpc.CallOption) (*IntroduceAcceptProposalWithOOBResponse, error) {
	out := new(IntroduceAcceptProposalWithOOBResponse)
	err := c.cc.Invoke(ctx, "/api.did.introduce.services.IntroduceController/acceptProposalWithOOBInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *introduceControllerClient) AcceptProposal(ctx context.Context, in *IntroduceAcceptProposalRequest, opts ...grpc.CallOption) (*IntroduceAcceptProposalResponse, error) {
	out := new(IntroduceAcceptProposalResponse)
	err := c.cc.Invoke(ctx, "/api.did.introduce.services.IntroduceController/acceptProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *introduceControllerClient) AcceptRequestWithPublicOOBInvitation(ctx context.Context, in *IntroduceAcceptProposalWithOOBInvitationRequest, opts ...grpc.CallOption) (*IntroduceAcceptRequestWithPublicOOBInvitationResponse, error) {
	out := new(IntroduceAcceptRequestWithPublicOOBInvitationResponse)
	err := c.cc.Invoke(ctx, "/api.did.introduce.services.IntroduceController/acceptRequestWithPublicOOBInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *introduceControllerClient) AcceptRequestWithRecipients(ctx context.Context, in *IntroduceAcceptRequestWithRecipients, opts ...grpc.CallOption) (*IntroduceAcceptRequestWithRecipientsResponse, error) {
	out := new(IntroduceAcceptRequestWithRecipientsResponse)
	err := c.cc.Invoke(ctx, "/api.did.introduce.services.IntroduceController/acceptRequestWithRecipients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *introduceControllerClient) DeclineProposal(ctx context.Context, in *IntroduceDeclineProposalRequest, opts ...grpc.CallOption) (*IntroduceDeclineProposalRequest, error) {
	out := new(IntroduceDeclineProposalRequest)
	err := c.cc.Invoke(ctx, "/api.did.introduce.services.IntroduceController/declineProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *introduceControllerClient) DeclineRequest(ctx context.Context, in *IntroduceDeclineRequest, opts ...grpc.CallOption) (*IntroduceDeclineResponse, error) {
	out := new(IntroduceDeclineResponse)
	err := c.cc.Invoke(ctx, "/api.did.introduce.services.IntroduceController/declineRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *introduceControllerClient) AcceptProblemReport(ctx context.Context, in *IntroduceAcceptProblemReportRequest, opts ...grpc.CallOption) (*IntroduceAcceptProblemReportResponse, error) {
	out := new(IntroduceAcceptProblemReportResponse)
	err := c.cc.Invoke(ctx, "/api.did.introduce.services.IntroduceController/acceptProblemReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntroduceControllerServer is the server API for IntroduceController service.
// All implementations must embed UnimplementedIntroduceControllerServer
// for forward compatibility
type IntroduceControllerServer interface {
	// Actions returns unfinished actions for the async usage.
	// Returns pending actions that have not yet to be executed or cancelled.
	// Actions swagger:route GET /introduce/actions introduce introduceActionsReq
	//
	// Returns pending actions that have not yet to be executed or cancelled.
	//
	// Responses:
	//        200: introduceActionsResponse
	Actions(context.Context, *IntroduceActionsRequest) (*IntroduceActionsResponse, error)
	// SendProposal sends a proposal to the introducees (the client has not published an out-of-band message)
	// SendProposal swagger:route POST /introduce/send-proposal introduce introduceSendProposalRequest
	//
	// Sends a proposal.
	//
	// Responses:
	//    default: genericError
	//        200: introduceSendProposalResponse
	SendProposal(context.Context, *IntroduceSendProposalRequest) (*IntroduceSendProposalResponse, error)
	// SendProposalWithOOBInvitation sends a proposal to the introducee (the client has published an out-of-band request)
	// SendProposalWithOOBInvitation swagger:route POST /introduce/send-proposal-with-oob-invitation introduce introduceSendProposalWithOOBInvitationRequest
	//
	// Sends a proposal with OOBRequest.
	//
	// Responses:
	//        200: introduceSendProposalWithOOBInvitationResponse
	SendProposalWithOOBInvitation(context.Context, *IntroduceSendProposalWithOOBInvitationRequest) (*IntroduceSendProposalWithOOBInvitationResponse, error)
	// SendRequest sends a request showing that the introducee is willing to share their own out-of-band message
	// SendRequest swagger:route POST /introduce/send-request introduce introduceSendRequest
	//
	// Sends a request.
	//
	// Responses:
	//    default: genericError
	//        200: introduceSendResponse
	SendRequest(context.Context, *IntroduceSendProposalRequest) (*IntroduceSendProposalResponse, error)
	// AcceptProposalWithOOBInvitation is used when introducee wants to provide an out-of-band request
	// AcceptProposalWithOOBInvitation swagger:route POST /introduce/{piid}/accept-proposal-with-oob-invitation introduce introduceAcceptProposalWithOOBInvitation
	//
	// Accepts a proposal with OOBRequest.
	//
	// Responses:
	//    default: genericError
	//        200: introduceAcceptProposalWithOOBResponse
	AcceptProposalWithOOBInvitation(context.Context, *IntroduceAcceptProposalWithOOBInvitationRequest) (*IntroduceAcceptProposalWithOOBResponse, error)
	// AcceptProposal is used when introducee wants to accept a proposal without providing a OOBRequest
	// AcceptProposal swagger:route POST /introduce/{piid}/accept-proposal introduce introduceAcceptProposal
	//
	// Accepts a proposal.
	//
	// Responses:
	//        200: introduceAcceptProposalResponse
	AcceptProposal(context.Context, *IntroduceAcceptProposalRequest) (*IntroduceAcceptProposalResponse, error)
	// AcceptRequestWithPublicOOBInvitation is used when introducer wants to provide a published out-of-band request
	// AcceptRequestWithPublicOOBInvitation swagger:route POST /introduce/{piid}/accept-request-with-public-oob-invitation introduce introduceAcceptRequestWithPublicOOBInvitation
	//
	// Accept a request with public OOBRequest.
	//
	// Responses:
	//        200: introduceAcceptRequestWithPublicOOBInvitationResponse
	AcceptRequestWithPublicOOBInvitation(context.Context, *IntroduceAcceptProposalWithOOBInvitationRequest) (*IntroduceAcceptRequestWithPublicOOBInvitationResponse, error)
	// AcceptRequestWithRecipients is used when the introducer does not have a published out-of-band message on hand
	// but they are willing to introduce agents to each other
	// AcceptRequestWithRecipients swagger:route POST /introduce/{piid}/accept-request-with-recipients introduce introduceAcceptRequestWithRecipients
	//
	// Accept a request with recipients.
	//
	// Responses:
	//        200: introduceAcceptRequestWithRecipientsResponse
	AcceptRequestWithRecipients(context.Context, *IntroduceAcceptRequestWithRecipients) (*IntroduceAcceptRequestWithRecipientsResponse, error)
	// DeclineProposal is used to reject the proposal
	// DeclineProposal swagger:route POST /introduce/{piid}/decline-proposal introduce introduceDeclineProposal
	//
	// Declines a proposal.
	//
	// Responses:
	//    default: genericError
	//        200: introduceDeclineProposalResponse
	DeclineProposal(context.Context, *IntroduceDeclineProposalRequest) (*IntroduceDeclineProposalRequest, error)
	// DeclineRequest swagger:route POST /introduce/{piid}/decline-request introduce introduceDeclineRequest
	//
	// Declines a request.
	//
	// Responses:
	//    default: genericError
	//        200: introduceDeclineRequestResponse
	DeclineRequest(context.Context, *IntroduceDeclineRequest) (*IntroduceDeclineResponse, error)
	// AcceptProblemReport swagger:route POST /introduce/{piid}/accept-problem-report introduce introduceAcceptProblemReport
	//
	// Accepts a problem report.
	//
	// Responses:
	//        200: introduceAcceptProblemReportResponse
	AcceptProblemReport(context.Context, *IntroduceAcceptProblemReportRequest) (*IntroduceAcceptProblemReportResponse, error)
	mustEmbedUnimplementedIntroduceControllerServer()
}

// UnimplementedIntroduceControllerServer must be embedded to have forward compatible implementations.
type UnimplementedIntroduceControllerServer struct {
}

func (UnimplementedIntroduceControllerServer) Actions(context.Context, *IntroduceActionsRequest) (*IntroduceActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Actions not implemented")
}
func (UnimplementedIntroduceControllerServer) SendProposal(context.Context, *IntroduceSendProposalRequest) (*IntroduceSendProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProposal not implemented")
}
func (UnimplementedIntroduceControllerServer) SendProposalWithOOBInvitation(context.Context, *IntroduceSendProposalWithOOBInvitationRequest) (*IntroduceSendProposalWithOOBInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProposalWithOOBInvitation not implemented")
}
func (UnimplementedIntroduceControllerServer) SendRequest(context.Context, *IntroduceSendProposalRequest) (*IntroduceSendProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequest not implemented")
}
func (UnimplementedIntroduceControllerServer) AcceptProposalWithOOBInvitation(context.Context, *IntroduceAcceptProposalWithOOBInvitationRequest) (*IntroduceAcceptProposalWithOOBResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptProposalWithOOBInvitation not implemented")
}
func (UnimplementedIntroduceControllerServer) AcceptProposal(context.Context, *IntroduceAcceptProposalRequest) (*IntroduceAcceptProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptProposal not implemented")
}
func (UnimplementedIntroduceControllerServer) AcceptRequestWithPublicOOBInvitation(context.Context, *IntroduceAcceptProposalWithOOBInvitationRequest) (*IntroduceAcceptRequestWithPublicOOBInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptRequestWithPublicOOBInvitation not implemented")
}
func (UnimplementedIntroduceControllerServer) AcceptRequestWithRecipients(context.Context, *IntroduceAcceptRequestWithRecipients) (*IntroduceAcceptRequestWithRecipientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptRequestWithRecipients not implemented")
}
func (UnimplementedIntroduceControllerServer) DeclineProposal(context.Context, *IntroduceDeclineProposalRequest) (*IntroduceDeclineProposalRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineProposal not implemented")
}
func (UnimplementedIntroduceControllerServer) DeclineRequest(context.Context, *IntroduceDeclineRequest) (*IntroduceDeclineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineRequest not implemented")
}
func (UnimplementedIntroduceControllerServer) AcceptProblemReport(context.Context, *IntroduceAcceptProblemReportRequest) (*IntroduceAcceptProblemReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptProblemReport not implemented")
}
func (UnimplementedIntroduceControllerServer) mustEmbedUnimplementedIntroduceControllerServer() {}

// UnsafeIntroduceControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntroduceControllerServer will
// result in compilation errors.
type UnsafeIntroduceControllerServer interface {
	mustEmbedUnimplementedIntroduceControllerServer()
}

func RegisterIntroduceControllerServer(s grpc.ServiceRegistrar, srv IntroduceControllerServer) {
	s.RegisterService(&IntroduceController_ServiceDesc, srv)
}

func _IntroduceController_Actions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntroduceActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntroduceControllerServer).Actions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.introduce.services.IntroduceController/actions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntroduceControllerServer).Actions(ctx, req.(*IntroduceActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntroduceController_SendProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntroduceSendProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntroduceControllerServer).SendProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.introduce.services.IntroduceController/sendProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntroduceControllerServer).SendProposal(ctx, req.(*IntroduceSendProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntroduceController_SendProposalWithOOBInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntroduceSendProposalWithOOBInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntroduceControllerServer).SendProposalWithOOBInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.introduce.services.IntroduceController/sendProposalWithOOBInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntroduceControllerServer).SendProposalWithOOBInvitation(ctx, req.(*IntroduceSendProposalWithOOBInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntroduceController_SendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntroduceSendProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntroduceControllerServer).SendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.introduce.services.IntroduceController/sendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntroduceControllerServer).SendRequest(ctx, req.(*IntroduceSendProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntroduceController_AcceptProposalWithOOBInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntroduceAcceptProposalWithOOBInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntroduceControllerServer).AcceptProposalWithOOBInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.introduce.services.IntroduceController/acceptProposalWithOOBInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntroduceControllerServer).AcceptProposalWithOOBInvitation(ctx, req.(*IntroduceAcceptProposalWithOOBInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntroduceController_AcceptProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntroduceAcceptProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntroduceControllerServer).AcceptProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.introduce.services.IntroduceController/acceptProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntroduceControllerServer).AcceptProposal(ctx, req.(*IntroduceAcceptProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntroduceController_AcceptRequestWithPublicOOBInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntroduceAcceptProposalWithOOBInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntroduceControllerServer).AcceptRequestWithPublicOOBInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.introduce.services.IntroduceController/acceptRequestWithPublicOOBInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntroduceControllerServer).AcceptRequestWithPublicOOBInvitation(ctx, req.(*IntroduceAcceptProposalWithOOBInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntroduceController_AcceptRequestWithRecipients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntroduceAcceptRequestWithRecipients)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntroduceControllerServer).AcceptRequestWithRecipients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.introduce.services.IntroduceController/acceptRequestWithRecipients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntroduceControllerServer).AcceptRequestWithRecipients(ctx, req.(*IntroduceAcceptRequestWithRecipients))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntroduceController_DeclineProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntroduceDeclineProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntroduceControllerServer).DeclineProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.introduce.services.IntroduceController/declineProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntroduceControllerServer).DeclineProposal(ctx, req.(*IntroduceDeclineProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntroduceController_DeclineRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntroduceDeclineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntroduceControllerServer).DeclineRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.introduce.services.IntroduceController/declineRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntroduceControllerServer).DeclineRequest(ctx, req.(*IntroduceDeclineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntroduceController_AcceptProblemReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntroduceAcceptProblemReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntroduceControllerServer).AcceptProblemReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.introduce.services.IntroduceController/acceptProblemReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntroduceControllerServer).AcceptProblemReport(ctx, req.(*IntroduceAcceptProblemReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntroduceController_ServiceDesc is the grpc.ServiceDesc for IntroduceController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntroduceController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.did.introduce.services.IntroduceController",
	HandlerType: (*IntroduceControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "actions",
			Handler:    _IntroduceController_Actions_Handler,
		},
		{
			MethodName: "sendProposal",
			Handler:    _IntroduceController_SendProposal_Handler,
		},
		{
			MethodName: "sendProposalWithOOBInvitation",
			Handler:    _IntroduceController_SendProposalWithOOBInvitation_Handler,
		},
		{
			MethodName: "sendRequest",
			Handler:    _IntroduceController_SendRequest_Handler,
		},
		{
			MethodName: "acceptProposalWithOOBInvitation",
			Handler:    _IntroduceController_AcceptProposalWithOOBInvitation_Handler,
		},
		{
			MethodName: "acceptProposal",
			Handler:    _IntroduceController_AcceptProposal_Handler,
		},
		{
			MethodName: "acceptRequestWithPublicOOBInvitation",
			Handler:    _IntroduceController_AcceptRequestWithPublicOOBInvitation_Handler,
		},
		{
			MethodName: "acceptRequestWithRecipients",
			Handler:    _IntroduceController_AcceptRequestWithRecipients_Handler,
		},
		{
			MethodName: "declineProposal",
			Handler:    _IntroduceController_DeclineProposal_Handler,
		},
		{
			MethodName: "declineRequest",
			Handler:    _IntroduceController_DeclineRequest_Handler,
		},
		{
			MethodName: "acceptProblemReport",
			Handler:    _IntroduceController_AcceptProblemReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/did/introduce/services/introduce.proto",
}
