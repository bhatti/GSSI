// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/did/services/didexchange.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DIDExchangeControllerClient is the client API for DIDExchangeController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DIDExchangeControllerClient interface {
	// createInvitation swagger:route POST /connections/create-invitation did-exchange createInvitation
	// Creates a new connection invitation....
	//
	// Responses:
	//        200: createInvitationResponse
	CreateInvitation(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*CreateInvitationResponse, error)
	// receiveInvitation swagger:route POST /connections/receive-invitation did-exchange receiveInvitation
	//
	// Receive a new connection invitation....
	//
	// Responses:
	//        200: receiveInvitationResponse
	ReceiveInvitation(ctx context.Context, in *ReceiveInvitationRequest, opts ...grpc.CallOption) (*ReceiveInvitationResponse, error)
	// AcceptInvitation swagger:route POST /connections/{id}/accept-invitation did-exchange acceptInvitation
	// Accept a stored connection invitation....
	// Responses:
	//        200: acceptInvitationResponse
	AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*AcceptInvitationResponse, error)
	// CreateImplicitInvitation swagger:route POST /connections/create-implicit-invitation did-exchange implicitInvitation
	//  Create implicit invitation using inviter DID.
	// Responses:
	//        200: implicitInvitationResponse
	CreateImplicitInvitation(ctx context.Context, in *ImplicitInvitationRequest, opts ...grpc.CallOption) (*ImplicitInvitationResponse, error)
	// acceptExchangeRequest swagger:route POST /connections/{id}/accept-request did-exchange acceptRequest
	//
	// Accepts a stored connection request.
	//
	// Responses:
	//        200: acceptExchangeResponse
	AcceptExchangeRequest(ctx context.Context, in *AcceptExchangeRequest, opts ...grpc.CallOption) (*AcceptExchangeResponse, error)
	// QueryConnections swagger:route GET /connections did-exchange queryConnections
	//
	// query agent to agent connections.
	// Responses:
	//        200: queryConnectionsResponse
	//
	QueryConnections(ctx context.Context, in *QueryConnectionsRequest, opts ...grpc.CallOption) (*QueryConnectionsResponse, error)
	// queryConnectionByID swagger:route GET /connections/{id} did-exchange getConnection
	//
	// Fetch a single connection record.
	// Responses:
	//        200: queryConnectionResponse
	QueryConnectionByID(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*QueryConnectionResponse, error)
	// createConnection swagger:route POST /connections/create did-exchange createConnection
	//
	// Saves the connection record.
	//
	// Responses:
	//    200: createConnectionResp
	CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*ConnectionID, error)
	// removeConnection swagger:route POST /connections/{id}/remove did-exchange removeConnection
	//
	// Removes given connection record.
	//
	// Responses:
	//    200: removeConnectionResponse
	RemoveConnection(ctx context.Context, in *RemoveConnectionRequest, opts ...grpc.CallOption) (*RemoveConnectionRequest, error)
}

type dIDExchangeControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewDIDExchangeControllerClient(cc grpc.ClientConnInterface) DIDExchangeControllerClient {
	return &dIDExchangeControllerClient{cc}
}

func (c *dIDExchangeControllerClient) CreateInvitation(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*CreateInvitationResponse, error) {
	out := new(CreateInvitationResponse)
	err := c.cc.Invoke(ctx, "/api.did.services.DIDExchangeController/createInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDExchangeControllerClient) ReceiveInvitation(ctx context.Context, in *ReceiveInvitationRequest, opts ...grpc.CallOption) (*ReceiveInvitationResponse, error) {
	out := new(ReceiveInvitationResponse)
	err := c.cc.Invoke(ctx, "/api.did.services.DIDExchangeController/receiveInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDExchangeControllerClient) AcceptInvitation(ctx context.Context, in *AcceptInvitationRequest, opts ...grpc.CallOption) (*AcceptInvitationResponse, error) {
	out := new(AcceptInvitationResponse)
	err := c.cc.Invoke(ctx, "/api.did.services.DIDExchangeController/acceptInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDExchangeControllerClient) CreateImplicitInvitation(ctx context.Context, in *ImplicitInvitationRequest, opts ...grpc.CallOption) (*ImplicitInvitationResponse, error) {
	out := new(ImplicitInvitationResponse)
	err := c.cc.Invoke(ctx, "/api.did.services.DIDExchangeController/createImplicitInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDExchangeControllerClient) AcceptExchangeRequest(ctx context.Context, in *AcceptExchangeRequest, opts ...grpc.CallOption) (*AcceptExchangeResponse, error) {
	out := new(AcceptExchangeResponse)
	err := c.cc.Invoke(ctx, "/api.did.services.DIDExchangeController/acceptExchangeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDExchangeControllerClient) QueryConnections(ctx context.Context, in *QueryConnectionsRequest, opts ...grpc.CallOption) (*QueryConnectionsResponse, error) {
	out := new(QueryConnectionsResponse)
	err := c.cc.Invoke(ctx, "/api.did.services.DIDExchangeController/queryConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDExchangeControllerClient) QueryConnectionByID(ctx context.Context, in *GetConnectionRequest, opts ...grpc.CallOption) (*QueryConnectionResponse, error) {
	out := new(QueryConnectionResponse)
	err := c.cc.Invoke(ctx, "/api.did.services.DIDExchangeController/queryConnectionByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDExchangeControllerClient) CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*ConnectionID, error) {
	out := new(ConnectionID)
	err := c.cc.Invoke(ctx, "/api.did.services.DIDExchangeController/createConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dIDExchangeControllerClient) RemoveConnection(ctx context.Context, in *RemoveConnectionRequest, opts ...grpc.CallOption) (*RemoveConnectionRequest, error) {
	out := new(RemoveConnectionRequest)
	err := c.cc.Invoke(ctx, "/api.did.services.DIDExchangeController/removeConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DIDExchangeControllerServer is the server API for DIDExchangeController service.
// All implementations must embed UnimplementedDIDExchangeControllerServer
// for forward compatibility
type DIDExchangeControllerServer interface {
	// createInvitation swagger:route POST /connections/create-invitation did-exchange createInvitation
	// Creates a new connection invitation....
	//
	// Responses:
	//        200: createInvitationResponse
	CreateInvitation(context.Context, *CreateInvitationRequest) (*CreateInvitationResponse, error)
	// receiveInvitation swagger:route POST /connections/receive-invitation did-exchange receiveInvitation
	//
	// Receive a new connection invitation....
	//
	// Responses:
	//        200: receiveInvitationResponse
	ReceiveInvitation(context.Context, *ReceiveInvitationRequest) (*ReceiveInvitationResponse, error)
	// AcceptInvitation swagger:route POST /connections/{id}/accept-invitation did-exchange acceptInvitation
	// Accept a stored connection invitation....
	// Responses:
	//        200: acceptInvitationResponse
	AcceptInvitation(context.Context, *AcceptInvitationRequest) (*AcceptInvitationResponse, error)
	// CreateImplicitInvitation swagger:route POST /connections/create-implicit-invitation did-exchange implicitInvitation
	//  Create implicit invitation using inviter DID.
	// Responses:
	//        200: implicitInvitationResponse
	CreateImplicitInvitation(context.Context, *ImplicitInvitationRequest) (*ImplicitInvitationResponse, error)
	// acceptExchangeRequest swagger:route POST /connections/{id}/accept-request did-exchange acceptRequest
	//
	// Accepts a stored connection request.
	//
	// Responses:
	//        200: acceptExchangeResponse
	AcceptExchangeRequest(context.Context, *AcceptExchangeRequest) (*AcceptExchangeResponse, error)
	// QueryConnections swagger:route GET /connections did-exchange queryConnections
	//
	// query agent to agent connections.
	// Responses:
	//        200: queryConnectionsResponse
	//
	QueryConnections(context.Context, *QueryConnectionsRequest) (*QueryConnectionsResponse, error)
	// queryConnectionByID swagger:route GET /connections/{id} did-exchange getConnection
	//
	// Fetch a single connection record.
	// Responses:
	//        200: queryConnectionResponse
	QueryConnectionByID(context.Context, *GetConnectionRequest) (*QueryConnectionResponse, error)
	// createConnection swagger:route POST /connections/create did-exchange createConnection
	//
	// Saves the connection record.
	//
	// Responses:
	//    200: createConnectionResp
	CreateConnection(context.Context, *CreateConnectionRequest) (*ConnectionID, error)
	// removeConnection swagger:route POST /connections/{id}/remove did-exchange removeConnection
	//
	// Removes given connection record.
	//
	// Responses:
	//    200: removeConnectionResponse
	RemoveConnection(context.Context, *RemoveConnectionRequest) (*RemoveConnectionRequest, error)
	mustEmbedUnimplementedDIDExchangeControllerServer()
}

// UnimplementedDIDExchangeControllerServer must be embedded to have forward compatible implementations.
type UnimplementedDIDExchangeControllerServer struct {
}

func (UnimplementedDIDExchangeControllerServer) CreateInvitation(context.Context, *CreateInvitationRequest) (*CreateInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvitation not implemented")
}
func (UnimplementedDIDExchangeControllerServer) ReceiveInvitation(context.Context, *ReceiveInvitationRequest) (*ReceiveInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveInvitation not implemented")
}
func (UnimplementedDIDExchangeControllerServer) AcceptInvitation(context.Context, *AcceptInvitationRequest) (*AcceptInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptInvitation not implemented")
}
func (UnimplementedDIDExchangeControllerServer) CreateImplicitInvitation(context.Context, *ImplicitInvitationRequest) (*ImplicitInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImplicitInvitation not implemented")
}
func (UnimplementedDIDExchangeControllerServer) AcceptExchangeRequest(context.Context, *AcceptExchangeRequest) (*AcceptExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptExchangeRequest not implemented")
}
func (UnimplementedDIDExchangeControllerServer) QueryConnections(context.Context, *QueryConnectionsRequest) (*QueryConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryConnections not implemented")
}
func (UnimplementedDIDExchangeControllerServer) QueryConnectionByID(context.Context, *GetConnectionRequest) (*QueryConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryConnectionByID not implemented")
}
func (UnimplementedDIDExchangeControllerServer) CreateConnection(context.Context, *CreateConnectionRequest) (*ConnectionID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (UnimplementedDIDExchangeControllerServer) RemoveConnection(context.Context, *RemoveConnectionRequest) (*RemoveConnectionRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveConnection not implemented")
}
func (UnimplementedDIDExchangeControllerServer) mustEmbedUnimplementedDIDExchangeControllerServer() {}

// UnsafeDIDExchangeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DIDExchangeControllerServer will
// result in compilation errors.
type UnsafeDIDExchangeControllerServer interface {
	mustEmbedUnimplementedDIDExchangeControllerServer()
}

func RegisterDIDExchangeControllerServer(s grpc.ServiceRegistrar, srv DIDExchangeControllerServer) {
	s.RegisterService(&DIDExchangeController_ServiceDesc, srv)
}

func _DIDExchangeController_CreateInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDExchangeControllerServer).CreateInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.services.DIDExchangeController/createInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDExchangeControllerServer).CreateInvitation(ctx, req.(*CreateInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DIDExchangeController_ReceiveInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDExchangeControllerServer).ReceiveInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.services.DIDExchangeController/receiveInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDExchangeControllerServer).ReceiveInvitation(ctx, req.(*ReceiveInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DIDExchangeController_AcceptInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDExchangeControllerServer).AcceptInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.services.DIDExchangeController/acceptInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDExchangeControllerServer).AcceptInvitation(ctx, req.(*AcceptInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DIDExchangeController_CreateImplicitInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImplicitInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDExchangeControllerServer).CreateImplicitInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.services.DIDExchangeController/createImplicitInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDExchangeControllerServer).CreateImplicitInvitation(ctx, req.(*ImplicitInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DIDExchangeController_AcceptExchangeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDExchangeControllerServer).AcceptExchangeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.services.DIDExchangeController/acceptExchangeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDExchangeControllerServer).AcceptExchangeRequest(ctx, req.(*AcceptExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DIDExchangeController_QueryConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDExchangeControllerServer).QueryConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.services.DIDExchangeController/queryConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDExchangeControllerServer).QueryConnections(ctx, req.(*QueryConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DIDExchangeController_QueryConnectionByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDExchangeControllerServer).QueryConnectionByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.services.DIDExchangeController/queryConnectionByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDExchangeControllerServer).QueryConnectionByID(ctx, req.(*GetConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DIDExchangeController_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDExchangeControllerServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.services.DIDExchangeController/createConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDExchangeControllerServer).CreateConnection(ctx, req.(*CreateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DIDExchangeController_RemoveConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DIDExchangeControllerServer).RemoveConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.services.DIDExchangeController/removeConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DIDExchangeControllerServer).RemoveConnection(ctx, req.(*RemoveConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DIDExchangeController_ServiceDesc is the grpc.ServiceDesc for DIDExchangeController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DIDExchangeController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.did.services.DIDExchangeController",
	HandlerType: (*DIDExchangeControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createInvitation",
			Handler:    _DIDExchangeController_CreateInvitation_Handler,
		},
		{
			MethodName: "receiveInvitation",
			Handler:    _DIDExchangeController_ReceiveInvitation_Handler,
		},
		{
			MethodName: "acceptInvitation",
			Handler:    _DIDExchangeController_AcceptInvitation_Handler,
		},
		{
			MethodName: "createImplicitInvitation",
			Handler:    _DIDExchangeController_CreateImplicitInvitation_Handler,
		},
		{
			MethodName: "acceptExchangeRequest",
			Handler:    _DIDExchangeController_AcceptExchangeRequest_Handler,
		},
		{
			MethodName: "queryConnections",
			Handler:    _DIDExchangeController_QueryConnections_Handler,
		},
		{
			MethodName: "queryConnectionByID",
			Handler:    _DIDExchangeController_QueryConnectionByID_Handler,
		},
		{
			MethodName: "createConnection",
			Handler:    _DIDExchangeController_CreateConnection_Handler,
		},
		{
			MethodName: "removeConnection",
			Handler:    _DIDExchangeController_RemoveConnection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/did/services/didexchange.proto",
}
