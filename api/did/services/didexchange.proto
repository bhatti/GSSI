syntax = "proto3";

package api.did.services;

option go_package = "github.com/bhatti/GSSI/api/did/services";

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

import "api/did/doc/types/doc.proto";
import "api/did/doc/types/outofband.proto";
import "api/did/introduce/types/introduce.proto";

// CreateInvitationRequest model
//
// This is used for creating an invitation.
//
message CreateInvitationRequest {
  string label = 1;
  string goal = 2;
  string goal_code = 3;

  // The Alias to be used in invitation to be created
  string alias = 4;
  // Optional public DID to be used in invitation
  string public = 5;
  repeated google.protobuf.Any service = 6;
  repeated string protocols = 7;
  repeated string accept = 8;
  string router_connection_id = 9;
  // Attachments is intended to provide the possibility to include files, links or even JSON payload to the message.
  repeated api.did.doc.types.GenericAttachment attachments = 10;
}



// createInvitationRequest model
//
// This is used for operation to create invitation
//
// swagger:parameters createInvitation
message docCreateInvitationRequest {// nolint: unused,deadcode
  // Params for creating invitation
  //
  // in: body
  // should it be path?
  CreateInvitationRequest body = 1;
}

// CreateInvitationResponse model
//
// Represents a CreateInvitation response message.
//
message CreateInvitationResponse {
  api.did.doc.types.Invitation invitation = 1;
  string alias = 2;
  string invitation_url = 3;
}

//
// This is used for returning a create invitation response with a single connection invitation as body
//
// swagger:response createInvitationResponse
message docCreateInvitationResponse {// nolint: unused,deadcode
  // in: body
  CreateInvitationResponse body = 1;
}

// AcceptInvitationRequest model
//
// This is used for accepting an invitation.
// This is used for operation to accept connection invitation.
//
message AcceptInvitationBody {
  // Optional Public DID to be used for this request
  string public = 1; // controller
  api.did.doc.types.Invitation invitation = 2;
  string my_label = 3;
  // Optional specifies router connections (comma-separated values)
  string router_connections = 4;
  string reuse_connection = 5;
  bool reuse_any_connection = 6;
}

// swagger:parameters acceptInvitation
message AcceptInvitationRequest {
  // Connection ID
  //
  // in: path
  // required: true
  string id = 1; // controller
  // in: body
  AcceptInvitationBody body = 2;
}

// AcceptInvitationResponse model
// This is used for returning a accept invitation response for single invitation.
//
// Represents a AcceptInvitation response message.
//
message AcceptInvitationResponse {
  // the connection ID of the connection invitation
  string connection_id = 1;

  // State of the connection invitation
  string state = 2;

  // Other party's DID
  string their_did = 3;

  // Connection invitation accept mode
  string accept = 4;

  // My DID
  string my_did = 5;

  // Invitation ID of invitation response
  string request_id = 6;

  // Other party's label
  string their_label = 7;

  // Alias
  string alias = 8;

  // Other party's role
  string their_role = 9;

  // Connection invitation initiator
  string initiator = 10;

  // Invitation key
  string invitation_key = 11;

  // Routing state of connection invitation
  string routing_state = 12;

  // Inbound Connection ID  of the connection invitation
  string inbound_connection_id = 13;

  // Error message
  string error_msg = 14;

  // Invitation mode
  string invitation_mode = 15;
  // Created time
  google.protobuf.Timestamp created_at = 16;

  // Updated time
  google.protobuf.Timestamp updated_at = 17;

}

// This is used for returning a accept invitation response for single invitation
//
// swagger:response acceptInvitationResponse
message docAcceptInvitationResponse {// nolint: unused,deadcode
  // in: body
  AcceptInvitationResponse body = 1;
}

// ReceiveInvitationRequest  This is used for operation to receive connection invitation
//
message ReceiveInvitationRequest {// nolint: unused,deadcode
  // The Invitation Invitation to receive
  //
  // required: true
  // in: body
  api.did.doc.types.Invitation body = 1;
}

// swagger:parameters receiveInvitation
message docReceiveInvitationRequest {// nolint: unused,deadcode
  // The Invitation Invitation to receive
  //
  // required: true
  // in: body
  api.did.doc.types.Invitation body = 1;
}


// ReceiveInvitationResponse model
//
// This is used for returning a receive invitation response with a single receive invitation response as body.
//
message ReceiveInvitationResponse {
  // State of the connection invitation
  string state = 1;
  // the connection ID of the connection invitation
  string connection_id = 2;

  // Routing state of connection invitation
  string routing_state = 3;

  // Connection invitation initiator
  string initiator = 4;

  // Connection invitation accept mode
  string accept = 5;

  // Invitation mode
  string invitation_mode = 6;

  // Invitation ID of invitation response
  string request_id = 7;

  // My DID
  string my_did = 8;

  // Invitation key
  string invitation_key = 9;

  // Other party's label
  string their_label = 10;

  // Created time
  google.protobuf.Timestamp created_at = 11;
  // Updated time
  google.protobuf.Timestamp updated_at = 12;
}

// // swagger:response receiveInvitationResponse
message docReceiveInvitationResponse {// nolint: unused,deadcode
  // in: body
  ReceiveInvitationResponse body = 1;
}


// ImplicitInvitationRequest model
//
// This is used by invitee to create implicit invitation.
//
// swagger:parameters implicitInvitation
message ImplicitInvitationRequest {
  // InviterDID
  string their_did = 1;

  // Optional inviter label
  string their_label = 2;

  // Optional invitee did
  string my_did = 3;

  // Optional invitee label
  string my_label = 4;

  // Optional specifies router connections (comma-separated values)
  string router_connections = 5;
}

// ImplicitInvitationResponse model
//
// This is used for returning create implicit invitation response.
//
message ImplicitInvitationResponse {
  // the connection ID of the connection for implicit invitation
  string connection_id = 1;
}

// This is used for returning create implicit invitation response
//
// swagger:response implicitInvitationResponse
message docImplicitInvitationResponse {// nolint: unused,deadcode
  // in: body
  ImplicitInvitationResponse body = 1;
}

// GetConnectionRequest model
//
// This is used for getting specific connection record.
//
// swagger:parameters getConnection
message GetConnectionRequest {
  // The ID of the connection to get
  //
  // in: path
  // required: true
  string id = 1;
}

// QueryConnectionsRequest model
//
// This is used for querying connections.
//
// swagger:parameters queryConnections
message QueryConnectionsRequest {// nolint: unused,deadcode
  //
  // in: path
  // required: true
  // Params for querying connections
  // QueryConnectionsParams

  // Alias of connection invitation
  string alias = 1;

  // Initiator is Connection invitation initiator
  string initiator = 2;

  // Invitation key
  string invitation_key = 3;

  // Invitation ID
  string invitation_id = 4;

  // Parent threadID
  string parent_thread_id = 5;

  // MyDID is DID of the agent
  string my_did = 6;

  // State of the connection invitation
  string state = 7;

  // TheirDID is other party's DID
  string their_did = 8;

  // TheirRole is other party's role
  string their_role = 9;

  int32 page = 10;

  int32 page_size = 11;
}



// QueryConnectionsResponse model
//
// This is used for returning query connections results.
//
message QueryConnectionsResponse {
  repeated api.did.doc.types.Record results = 1; // Connection
}

// swagger:response queryConnectionsResponse
message docQueryConnectionsResponse {
  QueryConnectionsResponse body = 1;
}



// QueryConnectionResponse model
//
// This is used for returning query connection result for single record search.
//
message QueryConnectionResponse {
  api.did.doc.types.Record result = 1; // Connection
}

// This is used for returning query connection result for single record search
//
// swagger:response queryConnectionResponse
message docQueryConnectionResponse {
  // in: body
  QueryConnectionResponse body = 1;
}

// AcceptExchangeRequest model
//
// This is used for accepting connection request.
//
// swagger:parameters acceptRequest
message AcceptExchangeRequest {
  // Connection ID
  //
  // in: path
  // required: true
  string id = 1;

  // Optional Public DID to be used for this invitation
  // request
  string public = 2;

  // Optional specifies router connections (comma-separated values)
  string router_connections = 3;
}

// ExchangeResponse model
//
// response of accept exchange request.
//
message ExchangeResponse {

  // Routing state of connection invitation
  string routing_state = 1;

  // the connection ID of the connection invitation
  string inbound_connection_id = 2;

  // Invitation key
  string invitation_key = 3;

  // TheirDID is other party's DID
  string their_did = 4;

  // Invitation ID of the connection request
  string request_id = 5;

  // Invitation mode
  string invitation_mode = 6;

  // TheirRole is other party's role
  string their_role = 7;

  // TheirRole is other party's role
  string their_label = 8;

  // the connection ID of the connection invitation
  string connection_id = 9;

  // Initiator is Connection invitation initiator
  string initiator = 10;

  // MyDID is DID of the agent
  string my_did = 11;

  // Alias of connection invitation
  string alias = 12;

  // State of the connection invitation
  string state = 13;
  // Connection invitation accept mode
  string accept = 14;

  // Error message
  string error_msg = 15;

  // Created time
  google.protobuf.Timestamp created_at = 16;
  // Updated time
  google.protobuf.Timestamp updated_at = 17;
}

// acceptExchangeResult model
//
// This is used for returning response for accept exchange request
//
// swagger:response acceptExchangeResponse
message AcceptExchangeResponse {// nolint: unused,deadcode
  // in: body
  ExchangeResponse body = 1;
}


// RemoveConnectionRequest model
//
// This is used for removing connection request.
//
// swagger:parameters removeConnection
message RemoveConnectionRequest {
  // The ID of the connection record to remove
  //
  // in: path
  // required: true
  string id = 1;
}

//
// response of remove connection action
//
// swagger:response removeConnectionResponse
message RemoveConnectionResponse {
  // in: body
  bool deleted = 1;
}

// ConnectionID model
//
// This is used for querying/removing connection by ID.
//
message ConnectionID {
  // Connection ID
  string id = 1;
}

// CreateConnectionRequest model
//
// CreateConnectionRequest request to create a didcomm v2 connection.
// This is used for creating connection request.
//
message CreateConnectionRequest {
  string my_id = 1; //myDID
  DIDDocument their_did = 2; //theirDID
  string their_label = 3;
  string invitation_id = 4;
  string invitation_did = 5;
  string parent_thread_id = 6;
  string thread_id = 7;
  bool implicit = 8;
}

// Request to create a new connection between two DIDs.
//
// swagger:parameters createConnection
message docCreateConnectionRequest {// nolint: unused,deadcode
  // Params for creating a connection.
  //
  // in: body
  // required: true
  CreateConnectionRequest params = 1;
}

// createConnectionResp model
//
// This is used as the response model for save connection api.
//
// swagger:response createConnectionResp
message docCreateConnectionResp {// nolint: unused,deadcode
  // in: body
  ConnectionID body = 1;
}

// DIDDocument model.
message DIDDocument {
  string id = 1;
  bytes contents = 2; // json.RawMessage
}



// SendProposalRequest model
//
// This is used for sending a proposal.
//
message SendProposalRequest {
  // Recipients specifies to whom proposal will be sent
  repeated api.did.introduce.types.Recipient recipients = 1;
}

// SendProposalResponse model
//
// Represents a SendProposal response message.
//
message SendProposalResponse {
  // PIID Protocol instance ID. It can be used as a correlation ID
  string piid = 1;
}

// SendProposalWithOOBInvitationRequest model
//
// This is used for sending a proposal with OOBRequest.
//
message SendProposalWithOOBInvitationRequest {
  // Invitation is the out-of-band protocol's 'invitation' message.
  api.did.doc.types.Invitation invitation = 1;
  // Recipient specifies to whom proposal will be sent
  api.did.introduce.types.Recipient recipient = 2;
}


// SendProposalWithOOBRequestResponse model
//
// Represents a SendProposalWithOOBInvitation response message.
//
message SendProposalWithOOBRequestResponse {
  // PIID Protocol instance ID. It can be used as a correlation ID
  string piid = 1;
}

// SendRequestRequest model
//
// This is used for sending a request.
//
message SendRequestRequest {
  // PleaseIntroduceTo keeps information about the introduction
  api.did.introduce.types.PleaseIntroduceTo please_introduce_to = 1;
  // MyDID sender's did
  string my_did = 2;
  // TheirDID receiver's did
  string their_did = 3;
}

// SendRequestResponse model
//
// Represents a SendRequest response message.
//
message SendRequestResponse {
  // PIID Protocol instance ID. It can be used as a correlation ID
  string piid = 1;
}

// AcceptProposalWithOOBInvitationRequest model
//
// This is used for accepting a proposal with public OOBRequest.
//
message AcceptProposalWithOOBInvitationRequest {
  // PIID Protocol instance ID
  string piid = 1;
  // Invitation is the out-of-band protocol's 'request' message.
  api.did.doc.types.Invitation invitation = 2;
}


// AcceptProposalWithOOBInvitationResponse model
//
// Represents a AcceptProposalWithOOBInvitation response message.
//
message AcceptProposalWithOOBInvitationResponse {

}

// AcceptRequestWithPublicOOBInvitationRequest model
//
// This is used for accepting a request with public OOBRequest.
//
message AcceptRequestWithPublicOOBInvitationRequest {
  // PIID Protocol instance ID
  string piid = 1;
  // Invitation is the out-of-band protocol's 'request' message.
  api.did.doc.types.Invitation invitation = 2;
  // To keeps information about the introduction
  api.did.introduce.types.To to = 3;
}

// AcceptRequestWithPublicOOBInvitationResponse model
//
// Represents a AcceptRequestWithPublicOOBInvitation response message.
//
message AcceptRequestWithPublicOOBInvitationResponse {

}

// AcceptRequestWithRecipientsRequest model
//
// This is used for accepting a request with recipients.
//
message AcceptRequestWithRecipientsRequest {
  // PIID Protocol instance ID
  string piid = 1;
  // Recipient specifies to whom proposal will be sent
  api.did.introduce.types.Recipient recipient = 2;
  // To keeps information about the introduction
  api.did.introduce.types.To to = 3;
}

// AcceptRequestWithRecipientsResponse model
//
// Represents a AcceptRequestWithRecipients response message.
//
message AcceptRequestWithRecipientsResponse {

}

// DeclineProposalRequest model
//
// This is used when proposal needs to be rejected.


message DeclineProposalRequest {
  // PIID Protocol instance ID
  string piid = 1;
  // Reason why proposal is declined
  string reason = 2;
}

// DeclineProposalResponse model
//
// Represents a DeclineProposal response message.
//
message DeclineProposalResponse {

}

// DeclineRequestRequest model
//
// This is used when request needs to be rejected.
//
message DeclineRequestRequest {
  // PIID Protocol instance ID
  string piid = 1;
  // Reason why request is declined
  string reason = 2;
}

// DeclineRequestResponse model
//
// Represents a DeclineRequest response message.
//
message DeclineRequestResponse {

}

// AcceptProposalRequest model
//
// This is used for accepting a proposal.
//
message AcceptProposalRequest {
  // PIID Protocol instance ID
  string piid = 1;
}

// AcceptProposalResponse model
//
// Represents a AcceptProposal response message.
//
message AcceptProposalResponse {

}


// AcceptProblemReportRequest model
//
// This is used for accepting a problem report.
//
message AcceptProblemReportRequest {
  // PIID Protocol instance ID
  string piid = 1;
}

// AcceptProblemReportResponse model
//
// Represents a AcceptProblemReport response message.
//
message AcceptProblemReportResponse {

}


// DIDExchangeController defines methods for the DIDExchange protocol controller. - REST service controller for DID Exchange.
service DIDExchangeController {
  // createInvitation swagger:route POST /connections/create-invitation did-exchange createInvitation
  // Creates a new connection invitation....
  //
  // Responses:
  //        200: createInvitationResponse
  rpc createInvitation(CreateInvitationRequest) returns (CreateInvitationResponse) {}


  // receiveInvitation swagger:route POST /connections/receive-invitation did-exchange receiveInvitation
  //
  // Receive a new connection invitation....
  //
  // Responses:
  //        200: receiveInvitationResponse
  rpc receiveInvitation(ReceiveInvitationRequest) returns (ReceiveInvitationResponse) {}

  // AcceptInvitation swagger:route POST /connections/{id}/accept-invitation did-exchange acceptInvitation
  // Accept a stored connection invitation....
  // Responses:
  //        200: acceptInvitationResponse
  rpc acceptInvitation(AcceptInvitationRequest) returns (AcceptInvitationResponse) {}

  // CreateImplicitInvitation swagger:route POST /connections/create-implicit-invitation did-exchange implicitInvitation
  //  Create implicit invitation using inviter DID.
  // Responses:
  //        200: implicitInvitationResponse
  rpc createImplicitInvitation(ImplicitInvitationRequest) returns (ImplicitInvitationResponse) {}

  // acceptExchangeRequest swagger:route POST /connections/{id}/accept-request did-exchange acceptRequest
  //
  // Accepts a stored connection request.
  //
  // Responses:
  //        200: acceptExchangeResponse
  rpc acceptExchangeRequest(AcceptExchangeRequest) returns (AcceptExchangeResponse) {}

  // QueryConnections swagger:route GET /connections did-exchange queryConnections
  //
  // query agent to agent connections.
  // Responses:
  //        200: queryConnectionsResponse
  //
  rpc queryConnections(QueryConnectionsRequest) returns (QueryConnectionsResponse) {}

  // queryConnectionByID swagger:route GET /connections/{id} did-exchange getConnection
  //
  // Fetch a single connection record.
  // Responses:
  //        200: queryConnectionResponse
  rpc queryConnectionByID(GetConnectionRequest) returns (QueryConnectionResponse) {}

  // createConnection swagger:route POST /connections/create did-exchange createConnection
  //
  // Saves the connection record.
  //
  // Responses:
  //    200: createConnectionResp
  rpc createConnection(CreateConnectionRequest) returns (ConnectionID) {}

  // removeConnection swagger:route POST /connections/{id}/remove did-exchange removeConnection
  //
  // Removes given connection record.
  //
  // Responses:
  //    200: removeConnectionResponse
  rpc removeConnection(RemoveConnectionRequest) returns (RemoveConnectionRequest) {}
}

