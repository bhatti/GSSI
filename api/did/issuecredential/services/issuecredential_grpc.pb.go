// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/did/issuecredential/services/issuecredential.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IssueCredentialControllerClient is the client API for IssueCredentialController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IssueCredentialControllerClient interface {
	// Actions returns pending actions that have not yet to be executed or canceled.
	// Actions swagger:route GET /issuecredential/actions issue-credential issueCredentialActions
	//
	// Returns pending actions that have not yet to be executed or cancelled.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialActionsResponse
	Actions(ctx context.Context, in *IssueCredentialActionsRequest, opts ...grpc.CallOption) (*IssueCredentialActionsResponse, error)
	// SendOffer is used by the Issuer to send an offer.
	// SendOffer swagger:route POST /issuecredential/send-offer issue-credential issueCredentialSendOffer
	//
	// Sends an offer.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialSendOfferResponse
	SendOffer(ctx context.Context, in *IssueCredentialSendOfferRequest, opts ...grpc.CallOption) (*IssueCredentialSendOfferResponse, error)
	// SendOfferV3 is used by the Issuer to send an offer.
	// SendOfferV3 swagger:route POST /issuecredential/send-offerV3 issue-credential issueCredentialSendOffer
	//
	// Sends an offer.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialSendOfferResponse
	SendOfferV3(ctx context.Context, in *IssueCredentialSendOfferRequestV3, opts ...grpc.CallOption) (*IssueCredentialSendOfferResponse, error)
	// SendProposal is used by the Holder to send a proposal.
	// SendProposal swagger:route POST /issuecredential/send-proposal issue-credential issueCredentialSendProposal
	//
	// Sends a proposal.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialSendProposalResponse
	SendProposal(ctx context.Context, in *IssueCredentialSendProposalRequest, opts ...grpc.CallOption) (*IssueCredentialSendProposalResponse, error)
	// SendProposalV3 is used by the Holder to send a proposal.
	// SendProposalV3 swagger:route POST /issuecredential/send-proposalV3 issue-credential issueCredentialSendProposal
	//
	// Sends a proposal.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialSendProposalResponse
	SendProposalV3(ctx context.Context, in *IssueCredentialSendProposalRequestV3, opts ...grpc.CallOption) (*IssueCredentialSendProposalResponse, error)
	// SendRequest is used by the Holder to send a request.
	// SendRequest swagger:route POST /issuecredential/send-request issue-credential issueCredentialSendRequest
	//
	// Sends a request.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialSendRequestResponse
	SendRequest(ctx context.Context, in *IssueCredentialSendRequestRequest, opts ...grpc.CallOption) (*IssueCredentialSendRequestResponse, error)
	// SendRequestV3 is used by the Holder to send a request.
	// SendRequestV3 swagger:route POST /issuecredential/send-requestV3 issue-credential issueCredentialSendRequest
	//
	// Sends a request.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialSendRequestResponse
	SendRequestV3(ctx context.Context, in *IssueCredentialSendRequestRequestV3, opts ...grpc.CallOption) (*IssueCredentialSendRequestResponse, error)
	// AcceptProposal is used when the Issuer is willing to accept the proposal.
	// AcceptProposal swagger:route POST /issuecredential/{piid}/accept-proposal issue-credential issueCredentialAcceptProposal
	//
	// Accepts a proposal.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialAcceptProposalResponse
	AcceptProposal(ctx context.Context, in *IssueCredentialAcceptProposalRequest, opts ...grpc.CallOption) (*IssueCredentialAcceptProposalResponse, error)
	// AcceptProposalV3 is used when the Issuer is willing to accept the proposal.
	// AcceptProposalV3 swagger:route POST /issuecredential/{piid}/accept-proposalV3 issue-credential issueCredentialAcceptProposal
	//
	// Accepts a proposal.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialAcceptProposalResponse
	AcceptProposalV3(ctx context.Context, in *IssueCredentialAcceptProposalRequestV3, opts ...grpc.CallOption) (*IssueCredentialAcceptProposalResponse, error)
	// NegotiateProposal is used when the Holder wants to negotiate about an offer he received.
	// NegotiateProposal swagger:route POST /issuecredential/{piid}/negotiate-proposal issue-credential issueCredentialNegotiateProposal
	//
	// Is used when the Holder wants to negotiate about an offer he received.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialNegotiateProposalResponse
	NegotiateProposal(ctx context.Context, in *IssueCredentialNegotiateProposalRequest, opts ...grpc.CallOption) (*IssueCredentialNegotiateProposalResponse, error)
	// NegotiateProposalV3 is used when the Holder wants to negotiate about an offer he received.
	// NegotiateProposalV3 swagger:route POST /issuecredential/{piid}/negotiate-proposalV3 issue-credential issueCredentialNegotiateProposal
	//
	// Is used when the Holder wants to negotiate about an offer he received.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialNegotiateProposalResponse
	NegotiateProposalV3(ctx context.Context, in *IssueCredentialNegotiateProposalRequestV3, opts ...grpc.CallOption) (*IssueCredentialNegotiateProposalResponse, error)
	// DeclineProposal is used when the Issuer does not want to accept the proposal.
	// DeclineProposal swagger:route POST /issuecredential/{piid}/decline-proposal issue-credential issueCredentialDeclineProposal
	//
	// Declines a proposal.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialDeclineProposalResponse
	DeclineProposal(ctx context.Context, in *IssueCredentialDeclineProposalRequest, opts ...grpc.CallOption) (*IssueCredentialDeclineProposalResponse, error)
	// AcceptOffer is used when the Holder is willing to accept the offer.
	// AcceptOffer swagger:route POST /issuecredential/{piid}/accept-offer issue-credential issueCredentialAcceptOffer
	//
	// Accepts an offer.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialAcceptOfferResponse
	AcceptOffer(ctx context.Context, in *IssueCredentialAcceptOfferRequest, opts ...grpc.CallOption) (*IssueCredentialAcceptOfferResponse, error)
	// AcceptOfferV3 is used when the Holder is willing to accept the offer.
	// AcceptOfferV3 swagger:route POST /issuecredential/{piid}/accept-offerV3 issue-credential issueCredentialAcceptOffer
	//
	// Accepts an offer.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialAcceptOfferResponse
	AcceptOfferV3(ctx context.Context, in *IssueCredentialAcceptOfferRequestV3, opts ...grpc.CallOption) (*IssueCredentialAcceptOfferResponse, error)
	// AcceptProblemReport is used for accepting problem report.
	// AcceptProblemReport swagger:route POST /issuecredential/{piid}/accept-problem-report issue-credential issueCredentialAcceptProblemReport
	//
	// Accepts a problem report.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialAcceptProblemReportResponse
	AcceptProblemReport(ctx context.Context, in *IssueCredentialAcceptProblemReportRequest, opts ...grpc.CallOption) (*IssueCredentialAcceptProblemReportResponse, error)
	// DeclineOffer is used when the Holder does not want to accept the offer.
	// DeclineOffer swagger:route POST /issuecredential/{piid}/decline-offer issue-credential issueCredentialDeclineOffer
	//
	// Declines an offer.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialDeclineOfferResponse
	DeclineOffer(ctx context.Context, in *IssueCredentialDeclineOfferRequest, opts ...grpc.CallOption) (*IssueCredentialDeclineOfferResponse, error)
	// AcceptRequest is used when the Issuer is willing to accept the request.
	// AcceptRequest swagger:route POST /issuecredential/{piid}/accept-request issue-credential issueCredentialAcceptRequest
	//
	// Accepts a request.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialAcceptRequestResponse
	AcceptRequest(ctx context.Context, in *IssueCredentialAcceptRequestRequest, opts ...grpc.CallOption) (*IssueCredentialAcceptRequestResponse, error)
	// AcceptRequestV3 is used when the Issuer is willing to accept the request.
	// AcceptRequestV3 swagger:route POST /issuecredential/{piid}/accept-requestV3 issue-credential issueCredentialAcceptRequest
	//
	// Accepts a request.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialAcceptRequestResponse
	AcceptRequestV3(ctx context.Context, in *IssueCredentialAcceptRequestRequestV3, opts ...grpc.CallOption) (*IssueCredentialAcceptRequestResponse, error)
	// DeclineRequest is used when the Issuer does not want to accept the request.
	// DeclineRequest swagger:route POST /issuecredential/{piid}/decline-request issue-credential issueCredentialDeclineRequest
	//
	// Declines a request.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialDeclineRequestResponse
	DeclineRequest(ctx context.Context, in *IssueCredentialDeclineRequestRequest, opts ...grpc.CallOption) (*IssueCredentialDeclineRequestResponse, error)
	// AcceptCredential is used when the Holder is willing to accept the IssueCredential.
	// AcceptCredential swagger:route POST /issuecredential/{piid}/accept-credential issue-credential issueCredentialAcceptCredential
	//
	// Accepts a credential.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialAcceptCredentialResponse
	AcceptCredential(ctx context.Context, in *IssueCredentialAcceptCredentialRequest, opts ...grpc.CallOption) (*IssueCredentialAcceptCredentialResponse, error)
	// DeclineCredential is used when the Holder does not want to accept the IssueCredential.
	// DeclineCredential swagger:route POST /issuecredential/{piid}/decline-credential issue-credential issueCredentialDeclineCredential
	//
	// Declines a credential.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialDeclineCredentialResponse
	DeclineCredential(ctx context.Context, in *IssueCredentialDeclineCredentialRequest, opts ...grpc.CallOption) (*IssueCredentialDeclineCredentialResponse, error)
}

type issueCredentialControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewIssueCredentialControllerClient(cc grpc.ClientConnInterface) IssueCredentialControllerClient {
	return &issueCredentialControllerClient{cc}
}

func (c *issueCredentialControllerClient) Actions(ctx context.Context, in *IssueCredentialActionsRequest, opts ...grpc.CallOption) (*IssueCredentialActionsResponse, error) {
	out := new(IssueCredentialActionsResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.IssueCredentialController/actions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCredentialControllerClient) SendOffer(ctx context.Context, in *IssueCredentialSendOfferRequest, opts ...grpc.CallOption) (*IssueCredentialSendOfferResponse, error) {
	out := new(IssueCredentialSendOfferResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.IssueCredentialController/sendOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCredentialControllerClient) SendOfferV3(ctx context.Context, in *IssueCredentialSendOfferRequestV3, opts ...grpc.CallOption) (*IssueCredentialSendOfferResponse, error) {
	out := new(IssueCredentialSendOfferResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.IssueCredentialController/sendOfferV3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCredentialControllerClient) SendProposal(ctx context.Context, in *IssueCredentialSendProposalRequest, opts ...grpc.CallOption) (*IssueCredentialSendProposalResponse, error) {
	out := new(IssueCredentialSendProposalResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.IssueCredentialController/sendProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCredentialControllerClient) SendProposalV3(ctx context.Context, in *IssueCredentialSendProposalRequestV3, opts ...grpc.CallOption) (*IssueCredentialSendProposalResponse, error) {
	out := new(IssueCredentialSendProposalResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.IssueCredentialController/sendProposalV3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCredentialControllerClient) SendRequest(ctx context.Context, in *IssueCredentialSendRequestRequest, opts ...grpc.CallOption) (*IssueCredentialSendRequestResponse, error) {
	out := new(IssueCredentialSendRequestResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.IssueCredentialController/sendRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCredentialControllerClient) SendRequestV3(ctx context.Context, in *IssueCredentialSendRequestRequestV3, opts ...grpc.CallOption) (*IssueCredentialSendRequestResponse, error) {
	out := new(IssueCredentialSendRequestResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.IssueCredentialController/sendRequestV3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCredentialControllerClient) AcceptProposal(ctx context.Context, in *IssueCredentialAcceptProposalRequest, opts ...grpc.CallOption) (*IssueCredentialAcceptProposalResponse, error) {
	out := new(IssueCredentialAcceptProposalResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.IssueCredentialController/acceptProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCredentialControllerClient) AcceptProposalV3(ctx context.Context, in *IssueCredentialAcceptProposalRequestV3, opts ...grpc.CallOption) (*IssueCredentialAcceptProposalResponse, error) {
	out := new(IssueCredentialAcceptProposalResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.IssueCredentialController/acceptProposalV3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCredentialControllerClient) NegotiateProposal(ctx context.Context, in *IssueCredentialNegotiateProposalRequest, opts ...grpc.CallOption) (*IssueCredentialNegotiateProposalResponse, error) {
	out := new(IssueCredentialNegotiateProposalResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.IssueCredentialController/negotiateProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCredentialControllerClient) NegotiateProposalV3(ctx context.Context, in *IssueCredentialNegotiateProposalRequestV3, opts ...grpc.CallOption) (*IssueCredentialNegotiateProposalResponse, error) {
	out := new(IssueCredentialNegotiateProposalResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.IssueCredentialController/negotiateProposalV3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCredentialControllerClient) DeclineProposal(ctx context.Context, in *IssueCredentialDeclineProposalRequest, opts ...grpc.CallOption) (*IssueCredentialDeclineProposalResponse, error) {
	out := new(IssueCredentialDeclineProposalResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.IssueCredentialController/declineProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCredentialControllerClient) AcceptOffer(ctx context.Context, in *IssueCredentialAcceptOfferRequest, opts ...grpc.CallOption) (*IssueCredentialAcceptOfferResponse, error) {
	out := new(IssueCredentialAcceptOfferResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.IssueCredentialController/acceptOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCredentialControllerClient) AcceptOfferV3(ctx context.Context, in *IssueCredentialAcceptOfferRequestV3, opts ...grpc.CallOption) (*IssueCredentialAcceptOfferResponse, error) {
	out := new(IssueCredentialAcceptOfferResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.IssueCredentialController/acceptOfferV3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCredentialControllerClient) AcceptProblemReport(ctx context.Context, in *IssueCredentialAcceptProblemReportRequest, opts ...grpc.CallOption) (*IssueCredentialAcceptProblemReportResponse, error) {
	out := new(IssueCredentialAcceptProblemReportResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.IssueCredentialController/acceptProblemReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCredentialControllerClient) DeclineOffer(ctx context.Context, in *IssueCredentialDeclineOfferRequest, opts ...grpc.CallOption) (*IssueCredentialDeclineOfferResponse, error) {
	out := new(IssueCredentialDeclineOfferResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.IssueCredentialController/declineOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCredentialControllerClient) AcceptRequest(ctx context.Context, in *IssueCredentialAcceptRequestRequest, opts ...grpc.CallOption) (*IssueCredentialAcceptRequestResponse, error) {
	out := new(IssueCredentialAcceptRequestResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.IssueCredentialController/acceptRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCredentialControllerClient) AcceptRequestV3(ctx context.Context, in *IssueCredentialAcceptRequestRequestV3, opts ...grpc.CallOption) (*IssueCredentialAcceptRequestResponse, error) {
	out := new(IssueCredentialAcceptRequestResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.IssueCredentialController/acceptRequestV3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCredentialControllerClient) DeclineRequest(ctx context.Context, in *IssueCredentialDeclineRequestRequest, opts ...grpc.CallOption) (*IssueCredentialDeclineRequestResponse, error) {
	out := new(IssueCredentialDeclineRequestResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.IssueCredentialController/declineRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCredentialControllerClient) AcceptCredential(ctx context.Context, in *IssueCredentialAcceptCredentialRequest, opts ...grpc.CallOption) (*IssueCredentialAcceptCredentialResponse, error) {
	out := new(IssueCredentialAcceptCredentialResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.IssueCredentialController/acceptCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueCredentialControllerClient) DeclineCredential(ctx context.Context, in *IssueCredentialDeclineCredentialRequest, opts ...grpc.CallOption) (*IssueCredentialDeclineCredentialResponse, error) {
	out := new(IssueCredentialDeclineCredentialResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.IssueCredentialController/declineCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssueCredentialControllerServer is the server API for IssueCredentialController service.
// All implementations must embed UnimplementedIssueCredentialControllerServer
// for forward compatibility
type IssueCredentialControllerServer interface {
	// Actions returns pending actions that have not yet to be executed or canceled.
	// Actions swagger:route GET /issuecredential/actions issue-credential issueCredentialActions
	//
	// Returns pending actions that have not yet to be executed or cancelled.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialActionsResponse
	Actions(context.Context, *IssueCredentialActionsRequest) (*IssueCredentialActionsResponse, error)
	// SendOffer is used by the Issuer to send an offer.
	// SendOffer swagger:route POST /issuecredential/send-offer issue-credential issueCredentialSendOffer
	//
	// Sends an offer.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialSendOfferResponse
	SendOffer(context.Context, *IssueCredentialSendOfferRequest) (*IssueCredentialSendOfferResponse, error)
	// SendOfferV3 is used by the Issuer to send an offer.
	// SendOfferV3 swagger:route POST /issuecredential/send-offerV3 issue-credential issueCredentialSendOffer
	//
	// Sends an offer.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialSendOfferResponse
	SendOfferV3(context.Context, *IssueCredentialSendOfferRequestV3) (*IssueCredentialSendOfferResponse, error)
	// SendProposal is used by the Holder to send a proposal.
	// SendProposal swagger:route POST /issuecredential/send-proposal issue-credential issueCredentialSendProposal
	//
	// Sends a proposal.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialSendProposalResponse
	SendProposal(context.Context, *IssueCredentialSendProposalRequest) (*IssueCredentialSendProposalResponse, error)
	// SendProposalV3 is used by the Holder to send a proposal.
	// SendProposalV3 swagger:route POST /issuecredential/send-proposalV3 issue-credential issueCredentialSendProposal
	//
	// Sends a proposal.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialSendProposalResponse
	SendProposalV3(context.Context, *IssueCredentialSendProposalRequestV3) (*IssueCredentialSendProposalResponse, error)
	// SendRequest is used by the Holder to send a request.
	// SendRequest swagger:route POST /issuecredential/send-request issue-credential issueCredentialSendRequest
	//
	// Sends a request.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialSendRequestResponse
	SendRequest(context.Context, *IssueCredentialSendRequestRequest) (*IssueCredentialSendRequestResponse, error)
	// SendRequestV3 is used by the Holder to send a request.
	// SendRequestV3 swagger:route POST /issuecredential/send-requestV3 issue-credential issueCredentialSendRequest
	//
	// Sends a request.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialSendRequestResponse
	SendRequestV3(context.Context, *IssueCredentialSendRequestRequestV3) (*IssueCredentialSendRequestResponse, error)
	// AcceptProposal is used when the Issuer is willing to accept the proposal.
	// AcceptProposal swagger:route POST /issuecredential/{piid}/accept-proposal issue-credential issueCredentialAcceptProposal
	//
	// Accepts a proposal.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialAcceptProposalResponse
	AcceptProposal(context.Context, *IssueCredentialAcceptProposalRequest) (*IssueCredentialAcceptProposalResponse, error)
	// AcceptProposalV3 is used when the Issuer is willing to accept the proposal.
	// AcceptProposalV3 swagger:route POST /issuecredential/{piid}/accept-proposalV3 issue-credential issueCredentialAcceptProposal
	//
	// Accepts a proposal.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialAcceptProposalResponse
	AcceptProposalV3(context.Context, *IssueCredentialAcceptProposalRequestV3) (*IssueCredentialAcceptProposalResponse, error)
	// NegotiateProposal is used when the Holder wants to negotiate about an offer he received.
	// NegotiateProposal swagger:route POST /issuecredential/{piid}/negotiate-proposal issue-credential issueCredentialNegotiateProposal
	//
	// Is used when the Holder wants to negotiate about an offer he received.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialNegotiateProposalResponse
	NegotiateProposal(context.Context, *IssueCredentialNegotiateProposalRequest) (*IssueCredentialNegotiateProposalResponse, error)
	// NegotiateProposalV3 is used when the Holder wants to negotiate about an offer he received.
	// NegotiateProposalV3 swagger:route POST /issuecredential/{piid}/negotiate-proposalV3 issue-credential issueCredentialNegotiateProposal
	//
	// Is used when the Holder wants to negotiate about an offer he received.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialNegotiateProposalResponse
	NegotiateProposalV3(context.Context, *IssueCredentialNegotiateProposalRequestV3) (*IssueCredentialNegotiateProposalResponse, error)
	// DeclineProposal is used when the Issuer does not want to accept the proposal.
	// DeclineProposal swagger:route POST /issuecredential/{piid}/decline-proposal issue-credential issueCredentialDeclineProposal
	//
	// Declines a proposal.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialDeclineProposalResponse
	DeclineProposal(context.Context, *IssueCredentialDeclineProposalRequest) (*IssueCredentialDeclineProposalResponse, error)
	// AcceptOffer is used when the Holder is willing to accept the offer.
	// AcceptOffer swagger:route POST /issuecredential/{piid}/accept-offer issue-credential issueCredentialAcceptOffer
	//
	// Accepts an offer.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialAcceptOfferResponse
	AcceptOffer(context.Context, *IssueCredentialAcceptOfferRequest) (*IssueCredentialAcceptOfferResponse, error)
	// AcceptOfferV3 is used when the Holder is willing to accept the offer.
	// AcceptOfferV3 swagger:route POST /issuecredential/{piid}/accept-offerV3 issue-credential issueCredentialAcceptOffer
	//
	// Accepts an offer.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialAcceptOfferResponse
	AcceptOfferV3(context.Context, *IssueCredentialAcceptOfferRequestV3) (*IssueCredentialAcceptOfferResponse, error)
	// AcceptProblemReport is used for accepting problem report.
	// AcceptProblemReport swagger:route POST /issuecredential/{piid}/accept-problem-report issue-credential issueCredentialAcceptProblemReport
	//
	// Accepts a problem report.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialAcceptProblemReportResponse
	AcceptProblemReport(context.Context, *IssueCredentialAcceptProblemReportRequest) (*IssueCredentialAcceptProblemReportResponse, error)
	// DeclineOffer is used when the Holder does not want to accept the offer.
	// DeclineOffer swagger:route POST /issuecredential/{piid}/decline-offer issue-credential issueCredentialDeclineOffer
	//
	// Declines an offer.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialDeclineOfferResponse
	DeclineOffer(context.Context, *IssueCredentialDeclineOfferRequest) (*IssueCredentialDeclineOfferResponse, error)
	// AcceptRequest is used when the Issuer is willing to accept the request.
	// AcceptRequest swagger:route POST /issuecredential/{piid}/accept-request issue-credential issueCredentialAcceptRequest
	//
	// Accepts a request.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialAcceptRequestResponse
	AcceptRequest(context.Context, *IssueCredentialAcceptRequestRequest) (*IssueCredentialAcceptRequestResponse, error)
	// AcceptRequestV3 is used when the Issuer is willing to accept the request.
	// AcceptRequestV3 swagger:route POST /issuecredential/{piid}/accept-requestV3 issue-credential issueCredentialAcceptRequest
	//
	// Accepts a request.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialAcceptRequestResponse
	AcceptRequestV3(context.Context, *IssueCredentialAcceptRequestRequestV3) (*IssueCredentialAcceptRequestResponse, error)
	// DeclineRequest is used when the Issuer does not want to accept the request.
	// DeclineRequest swagger:route POST /issuecredential/{piid}/decline-request issue-credential issueCredentialDeclineRequest
	//
	// Declines a request.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialDeclineRequestResponse
	DeclineRequest(context.Context, *IssueCredentialDeclineRequestRequest) (*IssueCredentialDeclineRequestResponse, error)
	// AcceptCredential is used when the Holder is willing to accept the IssueCredential.
	// AcceptCredential swagger:route POST /issuecredential/{piid}/accept-credential issue-credential issueCredentialAcceptCredential
	//
	// Accepts a credential.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialAcceptCredentialResponse
	AcceptCredential(context.Context, *IssueCredentialAcceptCredentialRequest) (*IssueCredentialAcceptCredentialResponse, error)
	// DeclineCredential is used when the Holder does not want to accept the IssueCredential.
	// DeclineCredential swagger:route POST /issuecredential/{piid}/decline-credential issue-credential issueCredentialDeclineCredential
	//
	// Declines a credential.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialDeclineCredentialResponse
	DeclineCredential(context.Context, *IssueCredentialDeclineCredentialRequest) (*IssueCredentialDeclineCredentialResponse, error)
	mustEmbedUnimplementedIssueCredentialControllerServer()
}

// UnimplementedIssueCredentialControllerServer must be embedded to have forward compatible implementations.
type UnimplementedIssueCredentialControllerServer struct {
}

func (UnimplementedIssueCredentialControllerServer) Actions(context.Context, *IssueCredentialActionsRequest) (*IssueCredentialActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Actions not implemented")
}
func (UnimplementedIssueCredentialControllerServer) SendOffer(context.Context, *IssueCredentialSendOfferRequest) (*IssueCredentialSendOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOffer not implemented")
}
func (UnimplementedIssueCredentialControllerServer) SendOfferV3(context.Context, *IssueCredentialSendOfferRequestV3) (*IssueCredentialSendOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOfferV3 not implemented")
}
func (UnimplementedIssueCredentialControllerServer) SendProposal(context.Context, *IssueCredentialSendProposalRequest) (*IssueCredentialSendProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProposal not implemented")
}
func (UnimplementedIssueCredentialControllerServer) SendProposalV3(context.Context, *IssueCredentialSendProposalRequestV3) (*IssueCredentialSendProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProposalV3 not implemented")
}
func (UnimplementedIssueCredentialControllerServer) SendRequest(context.Context, *IssueCredentialSendRequestRequest) (*IssueCredentialSendRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequest not implemented")
}
func (UnimplementedIssueCredentialControllerServer) SendRequestV3(context.Context, *IssueCredentialSendRequestRequestV3) (*IssueCredentialSendRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequestV3 not implemented")
}
func (UnimplementedIssueCredentialControllerServer) AcceptProposal(context.Context, *IssueCredentialAcceptProposalRequest) (*IssueCredentialAcceptProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptProposal not implemented")
}
func (UnimplementedIssueCredentialControllerServer) AcceptProposalV3(context.Context, *IssueCredentialAcceptProposalRequestV3) (*IssueCredentialAcceptProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptProposalV3 not implemented")
}
func (UnimplementedIssueCredentialControllerServer) NegotiateProposal(context.Context, *IssueCredentialNegotiateProposalRequest) (*IssueCredentialNegotiateProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NegotiateProposal not implemented")
}
func (UnimplementedIssueCredentialControllerServer) NegotiateProposalV3(context.Context, *IssueCredentialNegotiateProposalRequestV3) (*IssueCredentialNegotiateProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NegotiateProposalV3 not implemented")
}
func (UnimplementedIssueCredentialControllerServer) DeclineProposal(context.Context, *IssueCredentialDeclineProposalRequest) (*IssueCredentialDeclineProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineProposal not implemented")
}
func (UnimplementedIssueCredentialControllerServer) AcceptOffer(context.Context, *IssueCredentialAcceptOfferRequest) (*IssueCredentialAcceptOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOffer not implemented")
}
func (UnimplementedIssueCredentialControllerServer) AcceptOfferV3(context.Context, *IssueCredentialAcceptOfferRequestV3) (*IssueCredentialAcceptOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOfferV3 not implemented")
}
func (UnimplementedIssueCredentialControllerServer) AcceptProblemReport(context.Context, *IssueCredentialAcceptProblemReportRequest) (*IssueCredentialAcceptProblemReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptProblemReport not implemented")
}
func (UnimplementedIssueCredentialControllerServer) DeclineOffer(context.Context, *IssueCredentialDeclineOfferRequest) (*IssueCredentialDeclineOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineOffer not implemented")
}
func (UnimplementedIssueCredentialControllerServer) AcceptRequest(context.Context, *IssueCredentialAcceptRequestRequest) (*IssueCredentialAcceptRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptRequest not implemented")
}
func (UnimplementedIssueCredentialControllerServer) AcceptRequestV3(context.Context, *IssueCredentialAcceptRequestRequestV3) (*IssueCredentialAcceptRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptRequestV3 not implemented")
}
func (UnimplementedIssueCredentialControllerServer) DeclineRequest(context.Context, *IssueCredentialDeclineRequestRequest) (*IssueCredentialDeclineRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineRequest not implemented")
}
func (UnimplementedIssueCredentialControllerServer) AcceptCredential(context.Context, *IssueCredentialAcceptCredentialRequest) (*IssueCredentialAcceptCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptCredential not implemented")
}
func (UnimplementedIssueCredentialControllerServer) DeclineCredential(context.Context, *IssueCredentialDeclineCredentialRequest) (*IssueCredentialDeclineCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineCredential not implemented")
}
func (UnimplementedIssueCredentialControllerServer) mustEmbedUnimplementedIssueCredentialControllerServer() {
}

// UnsafeIssueCredentialControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IssueCredentialControllerServer will
// result in compilation errors.
type UnsafeIssueCredentialControllerServer interface {
	mustEmbedUnimplementedIssueCredentialControllerServer()
}

func RegisterIssueCredentialControllerServer(s grpc.ServiceRegistrar, srv IssueCredentialControllerServer) {
	s.RegisterService(&IssueCredentialController_ServiceDesc, srv)
}

func _IssueCredentialController_Actions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueCredentialControllerServer).Actions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.IssueCredentialController/actions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueCredentialControllerServer).Actions(ctx, req.(*IssueCredentialActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueCredentialController_SendOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialSendOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueCredentialControllerServer).SendOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.IssueCredentialController/sendOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueCredentialControllerServer).SendOffer(ctx, req.(*IssueCredentialSendOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueCredentialController_SendOfferV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialSendOfferRequestV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueCredentialControllerServer).SendOfferV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.IssueCredentialController/sendOfferV3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueCredentialControllerServer).SendOfferV3(ctx, req.(*IssueCredentialSendOfferRequestV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueCredentialController_SendProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialSendProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueCredentialControllerServer).SendProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.IssueCredentialController/sendProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueCredentialControllerServer).SendProposal(ctx, req.(*IssueCredentialSendProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueCredentialController_SendProposalV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialSendProposalRequestV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueCredentialControllerServer).SendProposalV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.IssueCredentialController/sendProposalV3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueCredentialControllerServer).SendProposalV3(ctx, req.(*IssueCredentialSendProposalRequestV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueCredentialController_SendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialSendRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueCredentialControllerServer).SendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.IssueCredentialController/sendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueCredentialControllerServer).SendRequest(ctx, req.(*IssueCredentialSendRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueCredentialController_SendRequestV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialSendRequestRequestV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueCredentialControllerServer).SendRequestV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.IssueCredentialController/sendRequestV3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueCredentialControllerServer).SendRequestV3(ctx, req.(*IssueCredentialSendRequestRequestV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueCredentialController_AcceptProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialAcceptProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueCredentialControllerServer).AcceptProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.IssueCredentialController/acceptProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueCredentialControllerServer).AcceptProposal(ctx, req.(*IssueCredentialAcceptProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueCredentialController_AcceptProposalV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialAcceptProposalRequestV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueCredentialControllerServer).AcceptProposalV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.IssueCredentialController/acceptProposalV3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueCredentialControllerServer).AcceptProposalV3(ctx, req.(*IssueCredentialAcceptProposalRequestV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueCredentialController_NegotiateProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialNegotiateProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueCredentialControllerServer).NegotiateProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.IssueCredentialController/negotiateProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueCredentialControllerServer).NegotiateProposal(ctx, req.(*IssueCredentialNegotiateProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueCredentialController_NegotiateProposalV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialNegotiateProposalRequestV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueCredentialControllerServer).NegotiateProposalV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.IssueCredentialController/negotiateProposalV3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueCredentialControllerServer).NegotiateProposalV3(ctx, req.(*IssueCredentialNegotiateProposalRequestV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueCredentialController_DeclineProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialDeclineProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueCredentialControllerServer).DeclineProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.IssueCredentialController/declineProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueCredentialControllerServer).DeclineProposal(ctx, req.(*IssueCredentialDeclineProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueCredentialController_AcceptOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialAcceptOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueCredentialControllerServer).AcceptOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.IssueCredentialController/acceptOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueCredentialControllerServer).AcceptOffer(ctx, req.(*IssueCredentialAcceptOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueCredentialController_AcceptOfferV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialAcceptOfferRequestV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueCredentialControllerServer).AcceptOfferV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.IssueCredentialController/acceptOfferV3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueCredentialControllerServer).AcceptOfferV3(ctx, req.(*IssueCredentialAcceptOfferRequestV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueCredentialController_AcceptProblemReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialAcceptProblemReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueCredentialControllerServer).AcceptProblemReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.IssueCredentialController/acceptProblemReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueCredentialControllerServer).AcceptProblemReport(ctx, req.(*IssueCredentialAcceptProblemReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueCredentialController_DeclineOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialDeclineOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueCredentialControllerServer).DeclineOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.IssueCredentialController/declineOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueCredentialControllerServer).DeclineOffer(ctx, req.(*IssueCredentialDeclineOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueCredentialController_AcceptRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialAcceptRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueCredentialControllerServer).AcceptRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.IssueCredentialController/acceptRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueCredentialControllerServer).AcceptRequest(ctx, req.(*IssueCredentialAcceptRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueCredentialController_AcceptRequestV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialAcceptRequestRequestV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueCredentialControllerServer).AcceptRequestV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.IssueCredentialController/acceptRequestV3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueCredentialControllerServer).AcceptRequestV3(ctx, req.(*IssueCredentialAcceptRequestRequestV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueCredentialController_DeclineRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialDeclineRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueCredentialControllerServer).DeclineRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.IssueCredentialController/declineRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueCredentialControllerServer).DeclineRequest(ctx, req.(*IssueCredentialDeclineRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueCredentialController_AcceptCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialAcceptCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueCredentialControllerServer).AcceptCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.IssueCredentialController/acceptCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueCredentialControllerServer).AcceptCredential(ctx, req.(*IssueCredentialAcceptCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueCredentialController_DeclineCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialDeclineCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueCredentialControllerServer).DeclineCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.IssueCredentialController/declineCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueCredentialControllerServer).DeclineCredential(ctx, req.(*IssueCredentialDeclineCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IssueCredentialController_ServiceDesc is the grpc.ServiceDesc for IssueCredentialController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IssueCredentialController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.did.issuecredential.services.IssueCredentialController",
	HandlerType: (*IssueCredentialControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "actions",
			Handler:    _IssueCredentialController_Actions_Handler,
		},
		{
			MethodName: "sendOffer",
			Handler:    _IssueCredentialController_SendOffer_Handler,
		},
		{
			MethodName: "sendOfferV3",
			Handler:    _IssueCredentialController_SendOfferV3_Handler,
		},
		{
			MethodName: "sendProposal",
			Handler:    _IssueCredentialController_SendProposal_Handler,
		},
		{
			MethodName: "sendProposalV3",
			Handler:    _IssueCredentialController_SendProposalV3_Handler,
		},
		{
			MethodName: "sendRequest",
			Handler:    _IssueCredentialController_SendRequest_Handler,
		},
		{
			MethodName: "sendRequestV3",
			Handler:    _IssueCredentialController_SendRequestV3_Handler,
		},
		{
			MethodName: "acceptProposal",
			Handler:    _IssueCredentialController_AcceptProposal_Handler,
		},
		{
			MethodName: "acceptProposalV3",
			Handler:    _IssueCredentialController_AcceptProposalV3_Handler,
		},
		{
			MethodName: "negotiateProposal",
			Handler:    _IssueCredentialController_NegotiateProposal_Handler,
		},
		{
			MethodName: "negotiateProposalV3",
			Handler:    _IssueCredentialController_NegotiateProposalV3_Handler,
		},
		{
			MethodName: "declineProposal",
			Handler:    _IssueCredentialController_DeclineProposal_Handler,
		},
		{
			MethodName: "acceptOffer",
			Handler:    _IssueCredentialController_AcceptOffer_Handler,
		},
		{
			MethodName: "acceptOfferV3",
			Handler:    _IssueCredentialController_AcceptOfferV3_Handler,
		},
		{
			MethodName: "acceptProblemReport",
			Handler:    _IssueCredentialController_AcceptProblemReport_Handler,
		},
		{
			MethodName: "declineOffer",
			Handler:    _IssueCredentialController_DeclineOffer_Handler,
		},
		{
			MethodName: "acceptRequest",
			Handler:    _IssueCredentialController_AcceptRequest_Handler,
		},
		{
			MethodName: "acceptRequestV3",
			Handler:    _IssueCredentialController_AcceptRequestV3_Handler,
		},
		{
			MethodName: "declineRequest",
			Handler:    _IssueCredentialController_DeclineRequest_Handler,
		},
		{
			MethodName: "acceptCredential",
			Handler:    _IssueCredentialController_AcceptCredential_Handler,
		},
		{
			MethodName: "declineCredential",
			Handler:    _IssueCredentialController_DeclineCredential_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/did/issuecredential/services/issuecredential.proto",
}
