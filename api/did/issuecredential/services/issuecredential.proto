syntax = "proto3";

package api.did.issuecredential.services;

option go_package = "github.com/bhatti/GSSI/api/did/issuecredential/services";

import "api/did/issuecredential/types/issuecredential.proto";
import "api/did/doc/types/outofband.proto";

// IssueCredentialAcceptProposalBody model
//
// This is used for operation to accept proposal
//
//
message IssueCredentialAcceptProposalBody {
  // OfferCredential is a message describing the credential intend to offer and
  // possibly the price they expect to be paid.
  types.OfferCredentialV2 offer_credential = 2;
}

// IssueCredentialAcceptProposalBodyV3 model
//
// This is used for operation to accept proposal
//
//
message IssueCredentialAcceptProposalBodyV3 {
  // OfferCredential is a message describing the credential intend to offer and
  // possibly the price they expect to be paid.
  types.OfferCredentialV3 offer_credential = 2;
}

// swagger:parameters issueCredentialAcceptProposal
//
message IssueCredentialAcceptProposalRequest {
  // PIID Protocol instance ID
  // Protocol instance ID
  //
  // in: path
  // required: true
  string piid = 1;
  // in: body
  IssueCredentialAcceptProposalBody body = 2;
}

// issueCredentialAcceptProposalRequestV3 model
//
// This is used for operation to accept proposal
//
// swagger:parameters issueCredentialAcceptProposalV3
message IssueCredentialAcceptProposalRequestV3 {
  // PIID Protocol instance ID
  // Protocol instance ID
  //
  // in: path
  // required: true
  string piid = 1;
  // in: body
  IssueCredentialAcceptProposalBodyV3 body = 2;
}



// AcceptProposalResponse model
//
// Represents a AcceptProposal response message.
//
// swagger:response issueCredentialAcceptProposalResponse
message IssueCredentialAcceptProposalResponse {
  // in: body
}

// IssueCredentialAcceptOfferBody model
//
// This is used for accepting an offer.
//
message IssueCredentialAcceptOfferBody {
  // RequestCredential is an optional message sent by the potential Holder to the Issuer to request the issuance of a
  // credential.
  types.RequestCredentialV2 request_credential = 2;
}

// IssueCredentialAcceptOfferBody model
//
// This is used for accepting an offer.
//
message IssueCredentialAcceptOfferBodyV3 {
  // RequestCredential is an optional message sent by the potential Holder to the Issuer to request the issuance of a
  // credential.
  types.RequestCredentialV3 request_credential = 2;
}

// This is used for operation to accept an offer
//
// swagger:parameters issueCredentialAcceptOffer
message IssueCredentialAcceptOfferRequest {
  // PIID Protocol instance ID
  // Protocol instance ID
  //
  // in: path
  // required: true
  string piid = 1;
  IssueCredentialAcceptOfferBody body = 2;
}


// This is used for operation to accept an offer
//
// swagger:parameters issueCredentialAcceptOfferV3
message IssueCredentialAcceptOfferRequestV3 {
  // PIID Protocol instance ID
  // Protocol instance ID
  //
  // in: path
  // required: true
  string piid = 1;
  IssueCredentialAcceptOfferBodyV3 body = 2;
}



// IssueCredentialAcceptOfferResponse model
//
// Represents a AcceptOffer response message.
//
message IssueCredentialAcceptOfferResponse {

}

// IssueCredentialAcceptRequestBody model
//
// This is used for accepting a request.
//
message IssueCredentialAcceptRequestBody {
  // IssueCredential contains as attached payload the credentials being issued
  types.IssueCredentialV2 issue_credential = 1;
}

// IssueCredentialAcceptRequestBodyV3 model
//
// This is used for accepting a request.
//
message IssueCredentialAcceptRequestBodyV3 {
  // IssueCredential contains as attached payload the credentials being issued
  types.IssueCredentialV3 issue_credential = 1;
}


// IssueCredentialAcceptRequestRequest model
//
// This is used for operation to accept a request
//
// swagger:parameters issueCredentialAcceptRequest
message IssueCredentialAcceptRequestRequest {
  // PIID Protocol instance ID
  // Protocol instance ID
  //
  // in: path
  // required: true
  string piid = 1;
  // in: body
  IssueCredentialAcceptRequestBody body = 2;
}

// IssueCredentialAcceptRequestRequestV3 model
//
// This is used for accepting a request.
//
// swagger:parameters issueCredentialAcceptRequestV3
message IssueCredentialAcceptRequestRequestV3 {
  // PIID Protocol instance ID
  // Protocol instance ID
  //
  // in: path
  // required: true
  string piid = 1;

  // IssueCredential contains as attached payload the credentials being issued
  // in: body
  IssueCredentialAcceptRequestBody body = 2;
}

// IssueCredentialAcceptRequestResponse model
//
// Represents a AcceptRequest response message.
//
// swagger:response issueCredentialAcceptRequestResponse
message IssueCredentialAcceptRequestResponse {
  // in: body
}


// IssueCredentialAcceptCredentialBody model
//
// This is used for accepting a credential.
//
message IssueCredentialAcceptCredentialBody {
  // Names represent the names of how credentials will be stored.
  repeated string names = 2;
  // SkipStore if true then credential will not be saved in agent's verifiable store,
  // but protocol state will be updated.
  bool skipStore = 3;
}

// IssueCredentialAcceptCredentialRequest model
//
// This is used for accepting a credential.
//
// swagger:parameters issueCredentialAcceptCredential
message IssueCredentialAcceptCredentialRequest {
  // PIID Protocol instance ID.
  // Protocol instance ID
  //
  // in: path
  // required: true
  string piid = 1;
  // in: body
  IssueCredentialAcceptCredentialBody body = 2;
}

// IssueCredentialAcceptCredentialResponse model
//
// Represents a AcceptCredential response message.
//
// swagger:response issueCredentialAcceptCredentialResponse
message IssueCredentialAcceptCredentialResponse {
  // in: body
}

// IssueCredentialNegotiateProposalRequest model
//
// This is used when the Holder wants to negotiate about an offer he received.
//
message IssueCredentialNegotiateProposalBody {
  // ProposeCredential is a message sent in response to a offer-credential message when the Holder
  // wants some adjustments made to the credential data offered by Issuer.
  types.ProposeCredentialV2 propose_credential = 1;
}

// This is used when the Holder wants to negotiate about an offer he received.
//
// swagger:parameters issueCredentialNegotiateProposal
message IssueCredentialNegotiateProposalRequest {
  // PIID Protocol instance ID
  // Protocol instance ID
  //
  // in: path
  // required: true
  string piid = 1;
  // in: body
  IssueCredentialNegotiateProposalBody body = 2;
}



// IssueCredentialNegotiateProposalBodyV3 model
//
// This is used when the Holder wants to negotiate about an offer he received.
//
message IssueCredentialNegotiateProposalBodyV3 {
  // ProposeCredential is a message sent in response to a offer-credential message when the Holder
  // wants some adjustments made to the credential data offered by Issuer.
  types.ProposeCredentialV3 propose_credential = 1;
}

// IssueCredentialNegotiateProposalRequestV3 model
//
// This is used when the Holder wants to negotiate about an offer he received.
//
// swagger:parameters issueCredentialNegotiateProposalV3
message IssueCredentialNegotiateProposalRequestV3 {
  // PIID Protocol instance ID
  // Protocol instance ID
  //
  // in: path
  // required: true
  string piid = 1;
  // in: body
  IssueCredentialNegotiateProposalBodyV3 body = 2;
}

// IssueCredentialNegotiateProposalResponse model
//
// Represents a NegotiateProposal response message.
//
// swagger:response issueCredentialNegotiateProposalResponse
message IssueCredentialNegotiateProposalResponse {
  // in: body
}

// IssueCredentialDeclineProposalRequest model
//
// This is used when proposal needs to be rejected.
// This is used for operation to decline a proposal
//
// swagger:parameters issueCredentialDeclineProposal
message IssueCredentialDeclineProposalRequest {
  // PIID Protocol instance ID
  // Protocol instance ID
  //
  // in: path
  // required: true
  string piid = 1;
  // Reason why proposal is declined
  string reason = 2;
  // RedirectURL is optional web redirect URL that can be sent to holder.
  // Useful in cases where issuer would like holder to redirect after its proposal gets declined.
  string redirectURL = 3;
}

// IssueCredentialDeclineProposalResponse model
//
// Represents a DeclineProposal response message.
//
// swagger:response issueCredentialDeclineProposalResponse
message IssueCredentialDeclineProposalResponse {
  // in: body
}


// IssueCredentialDeclineOfferRequest model
//
// This is used when offer needs to be rejected.
// This is used for operation to decline an Offer
//
// swagger:parameters issueCredentialDeclineOffer
message IssueCredentialDeclineOfferRequest {
  // PIID Protocol instance ID
  // Protocol instance ID
  //
  // in: path
  // required: true
  string piid = 1;
  // Reason why offer is declined
  string reason = 2;
}

// IssueCredentialDeclineOfferResponse model
//
// Represents a DeclineOffer response message.
//
// swagger:response issueCredentialDeclineOfferResponse
message IssueCredentialDeclineOfferResponse {
  // in: body
}

// IssueCredentialDeclineRequestRequest model
//
// This is used when request needs to be rejected.
//
// swagger:parameters issueCredentialDeclineRequest
message IssueCredentialDeclineRequestRequest {// nolint: unused,deadcod
  // PIID Protocol instance ID
  // Protocol instance ID
  //
  // in: path
  // required: true
  string piid = 1;

  // Reason why request is declined
  string reason = 2
  ;
  // RedirectURL is optional web redirect URL that can be sent to holder.
  // Useful in cases where issuer would like holder to redirect after its credential request gets declined.
  string redirectURL = 3;
}

// IssueCredentialDeclineRequestResponse model
//
// Represents a DeclineRequest response message.
//
// swagger:response issueCredentialDeclineRequestResponse
message IssueCredentialDeclineRequestResponse {
  // in: body
}



// IssueCredentialDeclineCredentialRequest model
//
// This is used when credential needs to be rejected.
// This is used for operation to decline a credential
// swagger:parameters issueCredentialDeclineCredential
message IssueCredentialDeclineCredentialRequest {
  // PIID Protocol instance ID
  // Protocol instance ID
  //
  // in: path
  // required: true
  string piid = 1;
  // Reason why credential is declined
  string reason = 2;
}

// IssueCredentialDeclineCredentialResponse model
//
// Represents a DeclineCredential response message.
//
// swagger:response issueCredentialDeclineCredentialResponse
message IssueCredentialDeclineCredentialResponse {
  // in: body
}

// IssueCredentialSendProposalBody model
//
// This is used for sending a proposal to initiate the protocol.
//
message IssueCredentialSendProposalBody {
  // MyDID sender's did
  string my_did = 1;
  // TheirDID receiver's did
  string their_did = 2;
  // ProposeCredential is a message sent by the potential Holder to the Issuer to initiate the protocol
  types.ProposeCredentialV2 propose_credential = 3;
}

// IssueCredentialSendProposalRequest model
//
// This is used for sending a proposal to initiate the protocol.
//
// swagger:parameters issueCredentialSendProposal
message IssueCredentialSendProposalRequest {
  // in: body
  IssueCredentialSendProposalBody body = 1;
}

// IssueCredentialSendProposalBodyV3 model
//
// This is used for sending a proposal to initiate the protocol.
//
message IssueCredentialSendProposalBodyV3 {
  // MyDID sender's did
  string my_did = 1;
  // TheirDID receiver's did
  string their_did = 2;
  // ProposeCredential is a message sent by the potential Holder to the Issuer to initiate the protocol
  types.ProposeCredentialV3 propose_credential = 3;
}

// IssueCredentialSendProposalRequestV3 model
//
// This is used for sending a proposal to initiate the protocol.
//
// swagger:parameters issueCredentialSendProposalV3
message IssueCredentialSendProposalRequestV3 {
  // in: body
  IssueCredentialSendProposalBodyV3 body = 1;
}

// IssueCredentialSendProposalResponse model
//
// Represents a SendProposal response message.
//
// swagger:response issueCredentialSendProposalResponse
message IssueCredentialSendProposalResponse {
  // PIID Protocol instance ID. It can be used as a correlation ID
  // in: body
  string piid = 1;
}

// IssueCredentialSendOfferBody model
//
// This is used for sending an offer.
//
message IssueCredentialSendOfferBody {
  // MyDID sender's did
  string my_did = 1;
  // TheirDID receiver's did
  string their_did = 2;
  // OfferCredential is a message describing the credential intend to offer and
  // possibly the price they expect to be paid.
  types.GenericOfferCredential offer_credential = 3;
}


// IssueCredentialSendOfferRequest model
//
// This is used for sending an offer.
//
// swagger:parameters issueCredentialSendOffer
message IssueCredentialSendOfferRequest {// nolint: unused,deadcode
  // in: body
  types.OfferCredentialV2 offer_credential = 1;
}


// IssueCredentialSendOfferBodyV2 model
//
// This is used for sending an offer.
//
message IssueCredentialSendOfferBodyV3 {
  // MyDID sender's did
  string my_did = 1;
  // TheirDID receiver's did
  string their_did = 2;
  // OfferCredential is a message describing the credential intend to offer and
  // possibly the price they expect to be paid.
  types.OfferCredentialV2 offer_credential = 3;
}

// IssueCredentialSendOfferRequestV3 model
//
// This is used for sending an offer.
//
// swagger:parameters issueCredentialSendOfferV3
message IssueCredentialSendOfferRequestV3 {
  // in: body
  IssueCredentialSendOfferBodyV3 body = 1;
}


// IssueCredentialSendOfferResponse model
//
// Represents a SendOffer response message.
//
// swagger:response issueCredentialSendOfferResponse
message IssueCredentialSendOfferResponse {
  // in: body
  // PIID Protocol instance ID. It can be used as a correlation ID
  string piid = 1;
}


// IssueCredentialSendRequestBody model
//
// This is used for sending a request.
//
message IssueCredentialSendRequestBody {
  // MyDID sender's did
  string my_did = 1;
  // TheirDID receiver's did
  string their_did = 2;
  // RequestCredential is a message sent by the potential Holder to the Issuer,
  // to request the issuance of a credential.
  types.RequestCredentialV2 request_credential = 3;
}

// IssueCredentialSendRequestRequest model
//
// This is used for sending a request.
//
// swagger:parameters issueCredentialSendRequest
message IssueCredentialSendRequestRequest {
  // in: body
  IssueCredentialSendRequestBody body = 1;
}

// IssueCredentialSendRequestBodyV3 model
//
// This is used for sending a request.
//
message IssueCredentialSendRequestBodyV3 {
  // MyDID sender's did
  string my_did = 1;
  // TheirDID receiver's did
  string their_did = 2;
  // RequestCredential is a message sent by the potential Holder to the Issuer,
  // to request the issuance of a credential.
  types.RequestCredentialV3 request_credential = 3;
}

// IssueCredentialSendRequestRequestV3 model
//
// This is used for sending a request.
//
// swagger:parameters issueCredentialSendRequestV3
message IssueCredentialSendRequestRequestV3 {
  // in: body
  IssueCredentialSendRequestBodyV3 body = 1;
}


// IssueCredentialSendRequestResponse model
//
// Represents a SendRequest response message.
//
// swagger:response issueCredentialSendRequestResponse
message IssueCredentialSendRequestResponse {
  // PIID Protocol instance ID. It can be used as a correlation ID
  // in: body
  string piid = 1;
}

// IssueCredentialActionsRequest model
//
// Returns pending actions that have not yet to be executed or cancelled.
//
// swagger:parameters issueCredentialActions
message IssueCredentialActionsRequest {// nolint: unused,deadcode
}



// IssueCredentialActionsBody model
//
// Represents Actions response message.
//
message IssueCredentialActionsBody {
  repeated api.did.doc.types.Action actions = 1;
}

// IssueCredentialActionsResponse model
//
// Represents Actions response message.
//
// swagger:response issueCredentialActionsResponse
message IssueCredentialActionsResponse {
  // in: body
  IssueCredentialActionsBody body = 1;
}

// IssueCredentialAcceptProblemReportRequest model
//
// This is used for accepting a problem report.
//
// swagger:parameters issueCredentialAcceptProblemReport
message IssueCredentialAcceptProblemReportRequest {
  // PIID Protocol instance ID
  // Protocol instance ID
  //
  // in: path
  // required: true
  string piid = 1;
}

// IssueCredentialAcceptProblemReportResponse model
//
// Represents a AcceptProblemReport response message.
//
// swagger:response issueCredentialAcceptProblemReportResponse
message IssueCredentialAcceptProblemReportResponse {
  // in: body
}

// IssueCredentialController defines methods for the IssueCredential protocol controller.
service IssueCredentialController {
  // Actions returns pending actions that have not yet to be executed or canceled.
  // Actions swagger:route GET /issuecredential/actions issue-credential issueCredentialActions
  //
  // Returns pending actions that have not yet to be executed or cancelled.
  //
  // Responses:
  //    default: genericError
  //        200: issueCredentialActionsResponse
    rpc actions(IssueCredentialActionsRequest) returns (IssueCredentialActionsResponse) {}

  // SendOffer is used by the Issuer to send an offer.
  // SendOffer swagger:route POST /issuecredential/send-offer issue-credential issueCredentialSendOffer
  //
  // Sends an offer.
  //
  // Responses:
  //    default: genericError
  //        200: issueCredentialSendOfferResponse
  rpc sendOffer(IssueCredentialSendOfferRequest) returns (IssueCredentialSendOfferResponse) {}

  // SendOfferV3 is used by the Issuer to send an offer.
  // SendOfferV3 swagger:route POST /issuecredential/send-offerV3 issue-credential issueCredentialSendOffer
  //
  // Sends an offer.
  //
  // Responses:
  //    default: genericError
  //        200: issueCredentialSendOfferResponse
  rpc sendOfferV3(IssueCredentialSendOfferRequestV3) returns (IssueCredentialSendOfferResponse) {}

  // SendProposal is used by the Holder to send a proposal.
  // SendProposal swagger:route POST /issuecredential/send-proposal issue-credential issueCredentialSendProposal
  //
  // Sends a proposal.
  //
  // Responses:
  //    default: genericError
  //        200: issueCredentialSendProposalResponse
  rpc sendProposal(IssueCredentialSendProposalRequest) returns (IssueCredentialSendProposalResponse) {}

  // SendProposalV3 is used by the Holder to send a proposal.
  // SendProposalV3 swagger:route POST /issuecredential/send-proposalV3 issue-credential issueCredentialSendProposal
  //
  // Sends a proposal.
  //
  // Responses:
  //    default: genericError
  //        200: issueCredentialSendProposalResponse
  rpc sendProposalV3(IssueCredentialSendProposalRequestV3) returns (IssueCredentialSendProposalResponse) {}

  // SendRequest is used by the Holder to send a request.
  // SendRequest swagger:route POST /issuecredential/send-request issue-credential issueCredentialSendRequest
  //
  // Sends a request.
  //
  // Responses:
  //    default: genericError
  //        200: issueCredentialSendRequestResponse
  rpc sendRequest(IssueCredentialSendRequestRequest) returns (IssueCredentialSendRequestResponse) {}

  // SendRequestV3 is used by the Holder to send a request.
  // SendRequestV3 swagger:route POST /issuecredential/send-requestV3 issue-credential issueCredentialSendRequest
  //
  // Sends a request.
  //
  // Responses:
  //    default: genericError
  //        200: issueCredentialSendRequestResponse
  rpc sendRequestV3(IssueCredentialSendRequestRequestV3) returns (IssueCredentialSendRequestResponse) {}

  // AcceptProposal is used when the Issuer is willing to accept the proposal.
  // AcceptProposal swagger:route POST /issuecredential/{piid}/accept-proposal issue-credential issueCredentialAcceptProposal
  //
  // Accepts a proposal.
  //
  // Responses:
  //    default: genericError
  //        200: issueCredentialAcceptProposalResponse
  rpc acceptProposal(IssueCredentialAcceptProposalRequest) returns (IssueCredentialAcceptProposalResponse) {}

  // AcceptProposalV3 is used when the Issuer is willing to accept the proposal.
  // AcceptProposalV3 swagger:route POST /issuecredential/{piid}/accept-proposalV3 issue-credential issueCredentialAcceptProposal
  //
  // Accepts a proposal.
  //
  // Responses:
  //    default: genericError
  //        200: issueCredentialAcceptProposalResponse
  rpc acceptProposalV3(IssueCredentialAcceptProposalRequestV3) returns (IssueCredentialAcceptProposalResponse) {}

  // NegotiateProposal is used when the Holder wants to negotiate about an offer he received.
  // NegotiateProposal swagger:route POST /issuecredential/{piid}/negotiate-proposal issue-credential issueCredentialNegotiateProposal
  //
  // Is used when the Holder wants to negotiate about an offer he received.
  //
  // Responses:
  //    default: genericError
  //        200: issueCredentialNegotiateProposalResponse
  rpc negotiateProposal(IssueCredentialNegotiateProposalRequest) returns (IssueCredentialNegotiateProposalResponse) {}

  // NegotiateProposalV3 is used when the Holder wants to negotiate about an offer he received.
  // NegotiateProposalV3 swagger:route POST /issuecredential/{piid}/negotiate-proposalV3 issue-credential issueCredentialNegotiateProposal
  //
  // Is used when the Holder wants to negotiate about an offer he received.
  //
  // Responses:
  //    default: genericError
  //        200: issueCredentialNegotiateProposalResponse
  rpc negotiateProposalV3(IssueCredentialNegotiateProposalRequestV3) returns (IssueCredentialNegotiateProposalResponse) {}

  // DeclineProposal is used when the Issuer does not want to accept the proposal.
  // DeclineProposal swagger:route POST /issuecredential/{piid}/decline-proposal issue-credential issueCredentialDeclineProposal
  //
  // Declines a proposal.
  //
  // Responses:
  //    default: genericError
  //        200: issueCredentialDeclineProposalResponse
  rpc declineProposal(IssueCredentialDeclineProposalRequest) returns (IssueCredentialDeclineProposalResponse) {}

  // AcceptOffer is used when the Holder is willing to accept the offer.
  // AcceptOffer swagger:route POST /issuecredential/{piid}/accept-offer issue-credential issueCredentialAcceptOffer
  //
  // Accepts an offer.
  //
  // Responses:
  //    default: genericError
  //        200: issueCredentialAcceptOfferResponse
  rpc acceptOffer(IssueCredentialAcceptOfferRequest) returns (IssueCredentialAcceptOfferResponse) {}

  // AcceptOfferV3 is used when the Holder is willing to accept the offer.
  // AcceptOfferV3 swagger:route POST /issuecredential/{piid}/accept-offerV3 issue-credential issueCredentialAcceptOffer
  //
  // Accepts an offer.
  //
  // Responses:
  //    default: genericError
  //        200: issueCredentialAcceptOfferResponse
  rpc acceptOfferV3(IssueCredentialAcceptOfferRequestV3) returns (IssueCredentialAcceptOfferResponse) {}

  // AcceptProblemReport is used for accepting problem report.
  // AcceptProblemReport swagger:route POST /issuecredential/{piid}/accept-problem-report issue-credential issueCredentialAcceptProblemReport
  //
  // Accepts a problem report.
  //
  // Responses:
  //    default: genericError
  //        200: issueCredentialAcceptProblemReportResponse
  rpc acceptProblemReport(IssueCredentialAcceptProblemReportRequest) returns (IssueCredentialAcceptProblemReportResponse) {}

  // DeclineOffer is used when the Holder does not want to accept the offer.
  // DeclineOffer swagger:route POST /issuecredential/{piid}/decline-offer issue-credential issueCredentialDeclineOffer
  //
  // Declines an offer.
  //
  // Responses:
  //    default: genericError
  //        200: issueCredentialDeclineOfferResponse
  rpc declineOffer(IssueCredentialDeclineOfferRequest) returns (IssueCredentialDeclineOfferResponse) {}

  // AcceptRequest is used when the Issuer is willing to accept the request.
  // AcceptRequest swagger:route POST /issuecredential/{piid}/accept-request issue-credential issueCredentialAcceptRequest
  //
  // Accepts a request.
  //
  // Responses:
  //    default: genericError
  //        200: issueCredentialAcceptRequestResponse
  rpc acceptRequest(IssueCredentialAcceptRequestRequest) returns (IssueCredentialAcceptRequestResponse) {}

  // AcceptRequestV3 is used when the Issuer is willing to accept the request.
  // AcceptRequestV3 swagger:route POST /issuecredential/{piid}/accept-requestV3 issue-credential issueCredentialAcceptRequest
  //
  // Accepts a request.
  //
  // Responses:
  //    default: genericError
  //        200: issueCredentialAcceptRequestResponse
  rpc acceptRequestV3(IssueCredentialAcceptRequestRequestV3) returns (IssueCredentialAcceptRequestResponse) {}

  // DeclineRequest is used when the Issuer does not want to accept the request.
  // DeclineRequest swagger:route POST /issuecredential/{piid}/decline-request issue-credential issueCredentialDeclineRequest
  //
  // Declines a request.
  //
  // Responses:
  //    default: genericError
  //        200: issueCredentialDeclineRequestResponse
  rpc declineRequest(IssueCredentialDeclineRequestRequest) returns (IssueCredentialDeclineRequestResponse) {}


  // AcceptCredential is used when the Holder is willing to accept the IssueCredential.
  // AcceptCredential swagger:route POST /issuecredential/{piid}/accept-credential issue-credential issueCredentialAcceptCredential
  //
  // Accepts a credential.
  //
  // Responses:
  //    default: genericError
  //        200: issueCredentialAcceptCredentialResponse
  rpc acceptCredential(IssueCredentialAcceptCredentialRequest) returns (IssueCredentialAcceptCredentialResponse) {}

  // DeclineCredential is used when the Holder does not want to accept the IssueCredential.
  // DeclineCredential swagger:route POST /issuecredential/{piid}/decline-credential issue-credential issueCredentialDeclineCredential
  //
  // Declines a credential.
  //
  // Responses:
  //    default: genericError
  //        200: issueCredentialDeclineCredentialResponse
  rpc declineCredential(IssueCredentialDeclineCredentialRequest) returns (IssueCredentialDeclineCredentialResponse) {}
}