syntax = "proto3";

package api.did.issuecredential.services;

option go_package = "github.com/bhatti/GSSI/api/did/issuecredential/services";

import "api/vc/types/credential.proto";
import "api/did/issuecredential/types/issuecredential.proto";
import "api/did/doc/types/outofband.proto";

// AcceptProposalRequest model
//
// This is used for accepting proposal.
//
message AcceptProposalRequest {
  // PIID Protocol instance ID
  string piid = 1;
  // OfferCredential is a message describing the credential intend to offer and
  // possibly the price they expect to be paid.
  types.GenericOfferCredential offer_credential = 2;
}

// AcceptProposalRequestV2 model
//
// This is used for accepting proposal.
//
message AcceptProposalRequestV2 {
  // PIID Protocol instance ID
  string piid = 1;
  // OfferCredential is a message describing the credential intend to offer and
  // possibly the price they expect to be paid.
  types.OfferCredentialV2 offer_credential = 2;
}

// AcceptProposalRequestV3 model
//
// This is used for accepting proposal.
//
message AcceptProposalRequestV3 {
  // PIID Protocol instance ID
  string piid = 1;
  // OfferCredential is a message describing the credential intend to offer and
  // possibly the price they expect to be paid.
  types.OfferCredentialV3 offer_credential = 2;
}


// AcceptProposalResponse model
//
// Represents a AcceptProposal response message.
//
message AcceptProposalResponse {

}

// AcceptOfferRequest model
//
// This is used for accepting an offer.
//
message AcceptOfferRequest {
  // PIID Protocol instance I
  string piid = 1;
  // RequestCredential is an optional message sent by the potential Holder to the Issuer to request the issuance of a
  // credential.
  types.GenericRequestCredential request_credential = 2;
}

// AcceptOfferRequestV2 model
//
// This is used for accepting an offer.
//
message AcceptOfferRequestV2 {
  // PIID Protocol instance I
  string piid = 1;
  // RequestCredential is an optional message sent by the potential Holder to the Issuer to request the issuance of a
  // credential.
  types.RequestCredentialV2 request_credential = 2;
}

// AcceptOfferRequestV3 model
//
// This is used for accepting an offer.
//
message AcceptOfferRequestV3 {
  // PIID Protocol instance I
  string piid = 1;
  // RequestCredential is an optional message sent by the potential Holder to the Issuer to request the issuance of a
  // credential.
  types.RequestCredentialV3 request_credential = 2;
}


// AcceptOfferResponse model
//
// Represents a AcceptOffer response message.
//
message AcceptOfferResponse {

}

// AcceptRequestRequest model
//
// This is used for accepting a request.
//
message AcceptRequestRequest {
  // PIID Protocol instance ID
  string piid = 1;
  // IssueCredential contains as attached payload the credentials being issued
  types.GenericIssueCredential issue_credential = 2;
}

// AcceptRequestRequestV2 model
//
// This is used for accepting a request.
//
message AcceptRequestRequestV2 {
  // PIID Protocol instance ID
  string piid = 1;
  // IssueCredential contains as attached payload the credentials being issued
  types.IssueCredentialV2 issue_credential = 2;
}

// AcceptRequestRequestV3 model
//
// This is used for accepting a request.
//
message AcceptRequestRequestV3 {
  // PIID Protocol instance ID
  string piid = 1;
  // IssueCredential contains as attached payload the credentials being issued
  types.IssueCredentialV3 issue_credential = 2;
}

// AcceptRequestResponse model
//
// Represents a AcceptRequest response message.
//
message AcceptRequestResponse {

}


// AcceptCredentialRequest model
//
// This is used for accepting a credential.
//
message AcceptCredentialRequest {
  // PIID Protocol instance ID.
  string piid = 1;
  // Names represent the names of how credentials will be stored.
  repeated string names = 2;
  // SkipStore if true then credential will not be saved in agent's verifiable store,
  // but protocol state will be updated.
  bool skipStore = 3;
}

// AcceptCredentialResponse model
//
// Represents a AcceptCredential response message.
//
message AcceptCredentialResponse {

}

// NegotiateProposalRequest model
//
// This is used when the Holder wants to negotiate about an offer he received.
//
message NegotiateProposalRequest {
  // PIID Protocol instance ID
  string piid = 1;
  // ProposeCredential is a message sent in response to a offer-credential message when the Holder
  // wants some adjustments made to the credential data offered by Issuer.
  types.GenericProposeCredential propose_credential = 2;
}

// NegotiateProposalRequestV2 model
//
// This is used when the Holder wants to negotiate about an offer he received.
//
message NegotiateProposalRequestV2 {
  // PIID Protocol instance ID
  string piid = 1;
  // ProposeCredential is a message sent in response to a offer-credential message when the Holder
  // wants some adjustments made to the credential data offered by Issuer.
  types.ProposeCredentialV2 propose_credential = 2;
}



// NegotiateProposalRequestV3 model
//
// This is used when the Holder wants to negotiate about an offer he received.
//
message NegotiateProposalRequestV3 {
  // PIID Protocol instance ID
  string piid = 1;
  // ProposeCredential is a message sent in response to a offer-credential message when the Holder
  // wants some adjustments made to the credential data offered by Issuer.
  types.ProposeCredentialV3 propose_credential = 2;
}

// NegotiateProposalResponse model
//
// Represents a NegotiateProposal response message.
//
message NegotiateProposalResponse {

}

// DeclineProposalRequest model
//
// This is used when proposal needs to be rejected.
//
message DeclineProposalRequest {
  // PIID Protocol instance ID
  string piid = 1;
  // Reason why proposal is declined
  string reason = 2;
  // RedirectURL is optional web redirect URL that can be sent to holder.
  // Useful in cases where issuer would like holder to redirect after its proposal gets declined.
  string redirectURL = 3;
}

// DeclineProposalResponse model
//
// Represents a DeclineProposal response message.
//
message DeclineProposalResponse {

}


// DeclineOfferRequest model
//
// This is used when offer needs to be rejected.
//
message DeclineOfferRequest {
  // PIID Protocol instance ID
  string piid = 1;
  // Reason why offer is declined
  string reason = 2;
}

// DeclineOfferResponse model
//
// Represents a DeclineOffer response message.
//
message DeclineOfferResponse {

}

// DeclineRequestRequest model
//
// This is used when request needs to be rejected.
//
message DeclineRequestRequest {
  // PIID Protocol instance ID
  string piid = 1;
  // Reason why request is declined
  string reason = 2;
  // RedirectURL is optional web redirect URL that can be sent to holder.
  // Useful in cases where issuer would like holder to redirect after its credential request gets declined.
  string redirectURL = 3;
}

// DeclineRequestResponse model
//
// Represents a DeclineRequest response message.
//
message DeclineRequestResponse {

}



// DeclineCredentialRequest model
//
// This is used when credential needs to be rejected.
//
message DeclineCredentialRequest {
  // PIID Protocol instance ID
  string piid = 1;
  // Reason why credential is declined
  string reason = 2;
}

// DeclineCredentialResponse model
//
// Represents a DeclineCredential response message.
//
message DeclineCredentialResponse {

}

// SendProposalRequest model
//
// This is used for sending a proposal to initiate the protocol.
//
message SendProposalRequest {
  // MyDID sender's did
  string my_did = 1;
  // TheirDID receiver's did
  string their_did = 2;
  // ProposeCredential is a message sent by the potential Holder to the Issuer to initiate the protocol
  types.GenericProposeCredential propose_credential = 3;
}

// SendProposalRequestV2 model
//
// This is used for sending a proposal to initiate the protocol.
//
message SendProposalRequestV2 {
  // MyDID sender's did
  string my_did = 1;
  // TheirDID receiver's did
  string their_did = 2;
  // ProposeCredential is a message sent by the potential Holder to the Issuer to initiate the protocol
  types.ProposeCredentialV2 propose_credential = 3;
}



// SendProposalRequestV3 model
//
// This is used for sending a proposal to initiate the protocol.
//
message SendProposalRequestV3 {
  // MyDID sender's did
  string my_did = 1;
  // TheirDID receiver's did
  string their_did = 2;
  // ProposeCredential is a message sent by the potential Holder to the Issuer to initiate the protocol
  types.ProposeCredentialV3 propose_credential = 3;
}

// SendProposalResponse model
//
// Represents a SendProposal response message.
//
message SendProposalResponse {
  // PIID Protocol instance ID. It can be used as a correlation ID
  string piid = 1;
}

// SendOfferRequest model
//
// This is used for sending an offer.
//
message SendOfferRequest {
  // MyDID sender's did
  string my_did = 1;
  // TheirDID receiver's did
  string their_did = 2;
  // OfferCredential is a message describing the credential intend to offer and
  // possibly the price they expect to be paid.
  types.GenericOfferCredential offer_credential = 3;
}


// SendOfferRequestV2 model
//
// This is used for sending an offer.
//
message SendOfferRequestV2 {
  // MyDID sender's did
  string my_did = 1;
  // TheirDID receiver's did
  string their_did = 2;
  // OfferCredential is a message describing the credential intend to offer and
  // possibly the price they expect to be paid.
  types.OfferCredentialV2 offer_credential = 3;
}

// SendOfferRequestV3 model
//
// This is used for sending an offer.
//
message SendOfferRequestV3 {
  // MyDID sender's did
  string my_did = 1;
  // TheirDID receiver's did
  string their_did = 2;
  // OfferCredential is a message describing the credential intend to offer and
  // possibly the price they expect to be paid.
  types.OfferCredentialV3 offer_credential = 3;
}

// SendOfferResponse model
//
// Represents a SendOffer response message.
//
message SendOfferResponse {
  // PIID Protocol instance ID. It can be used as a correlation ID
  string piid = 1;
}


// SendRequestRequest model
//
// This is used for sending a request.
//
message SendRequestRequest {
  // MyDID sender's did
  string my_did = 1;
  // TheirDID receiver's did
  string their_did = 2;
  // RequestCredential is a message sent by the potential Holder to the Issuer,
  // to request the issuance of a credential.
  types.GenericRequestCredential request_credential = 3;
}

// SendRequestRequestV2 model
//
// This is used for sending a request.
//
message SendRequestRequestV2 {
  // MyDID sender's did
  string my_did = 1;
  // TheirDID receiver's did
  string their_did = 2;
  // RequestCredential is a message sent by the potential Holder to the Issuer,
  // to request the issuance of a credential.
  types.RequestCredentialV2 request_credential = 3;
}

// SendRequestRequestV3 model
//
// This is used for sending a request.
//
message SendRequestRequestV3 {
  // MyDID sender's did
  string my_did = 1;
  // TheirDID receiver's did
  string their_did = 2;
  // RequestCredential is a message sent by the potential Holder to the Issuer,
  // to request the issuance of a credential.
  types.RequestCredentialV3 request_credential = 3;
}


// SendRequestResponse model
//
// Represents a SendRequest response message.
//
message SendRequestResponse {
  // PIID Protocol instance ID. It can be used as a correlation ID
  string piid = 1;
}

// ActionsResponse model
//
// Represents Actions response message.
//
message ActionsResponse {
  repeated api.did.doc.types.Action actions = 1;
}

// AcceptProblemReportRequest model
//
// This is used for accepting a problem report.
//
message AcceptProblemReportRequest {
  // PIID Protocol instance ID
  string piid = 1;
}

// AcceptProblemReportResponse model
//
// Represents a AcceptProblemReport response message.
//
message AcceptProblemReportResponse {

}

// GetCredentialSpecRequest model.
message GetCredentialSpecRequest {
  bytes message = 1; // json.RawMessage
}

// GetCredentialSpecResponse model.
message GetCredentialSpecResponse {
    types.CredentialSpec spec = 1;
}

// IssueCredentialRequest model.
message IssueCredentialRequest {
  types.CredentialSpec spec = 1;
}

// IssueCredentialResponse model.
message IssueCredentialResponse {
  types.IssueCredentialV2 issue_credential = 1;
}

// VerifyCredentialRequest model.
message VerifyCredentialRequest {
  api.vc.types.VerifiableCredential credential = 1;
  types.CredentialSpec spec = 2;
}

