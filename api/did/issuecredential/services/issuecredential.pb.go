// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: api/did/issuecredential/services/issuecredential.proto

package services

import (
	types1 "github.com/bhatti/GSSI/api/did/doc/types"
	types "github.com/bhatti/GSSI/api/did/issuecredential/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// IssueCredentialAcceptProposalBody model
//
// This is used for operation to accept proposal
//
//
type IssueCredentialAcceptProposalBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OfferCredential is a message describing the credential intend to offer and
	// possibly the price they expect to be paid.
	OfferCredential *types.OfferCredentialV2 `protobuf:"bytes,2,opt,name=offer_credential,json=offerCredential,proto3" json:"offer_credential,omitempty"`
}

func (x *IssueCredentialAcceptProposalBody) Reset() {
	*x = IssueCredentialAcceptProposalBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialAcceptProposalBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialAcceptProposalBody) ProtoMessage() {}

func (x *IssueCredentialAcceptProposalBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialAcceptProposalBody.ProtoReflect.Descriptor instead.
func (*IssueCredentialAcceptProposalBody) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{0}
}

func (x *IssueCredentialAcceptProposalBody) GetOfferCredential() *types.OfferCredentialV2 {
	if x != nil {
		return x.OfferCredential
	}
	return nil
}

// IssueCredentialAcceptProposalBodyV3 model
//
// This is used for operation to accept proposal
//
//
type IssueCredentialAcceptProposalBodyV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OfferCredential is a message describing the credential intend to offer and
	// possibly the price they expect to be paid.
	OfferCredential *types.OfferCredentialV3 `protobuf:"bytes,2,opt,name=offer_credential,json=offerCredential,proto3" json:"offer_credential,omitempty"`
}

func (x *IssueCredentialAcceptProposalBodyV3) Reset() {
	*x = IssueCredentialAcceptProposalBodyV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialAcceptProposalBodyV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialAcceptProposalBodyV3) ProtoMessage() {}

func (x *IssueCredentialAcceptProposalBodyV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialAcceptProposalBodyV3.ProtoReflect.Descriptor instead.
func (*IssueCredentialAcceptProposalBodyV3) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{1}
}

func (x *IssueCredentialAcceptProposalBodyV3) GetOfferCredential() *types.OfferCredentialV3 {
	if x != nil {
		return x.OfferCredential
	}
	return nil
}

// swagger:parameters issueCredentialAcceptProposal
//
type IssueCredentialAcceptProposalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PIID Protocol instance ID
	// Protocol instance ID
	//
	// in: path
	// required: true
	Piid string `protobuf:"bytes,1,opt,name=piid,proto3" json:"piid,omitempty"`
	// in: body
	Body *IssueCredentialAcceptProposalBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *IssueCredentialAcceptProposalRequest) Reset() {
	*x = IssueCredentialAcceptProposalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialAcceptProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialAcceptProposalRequest) ProtoMessage() {}

func (x *IssueCredentialAcceptProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialAcceptProposalRequest.ProtoReflect.Descriptor instead.
func (*IssueCredentialAcceptProposalRequest) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{2}
}

func (x *IssueCredentialAcceptProposalRequest) GetPiid() string {
	if x != nil {
		return x.Piid
	}
	return ""
}

func (x *IssueCredentialAcceptProposalRequest) GetBody() *IssueCredentialAcceptProposalBody {
	if x != nil {
		return x.Body
	}
	return nil
}

// issueCredentialAcceptProposalRequestV3 model
//
// This is used for operation to accept proposal
//
// swagger:parameters issueCredentialAcceptProposalV3
type IssueCredentialAcceptProposalRequestV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PIID Protocol instance ID
	// Protocol instance ID
	//
	// in: path
	// required: true
	Piid string `protobuf:"bytes,1,opt,name=piid,proto3" json:"piid,omitempty"`
	// in: body
	Body *IssueCredentialAcceptProposalBodyV3 `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *IssueCredentialAcceptProposalRequestV3) Reset() {
	*x = IssueCredentialAcceptProposalRequestV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialAcceptProposalRequestV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialAcceptProposalRequestV3) ProtoMessage() {}

func (x *IssueCredentialAcceptProposalRequestV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialAcceptProposalRequestV3.ProtoReflect.Descriptor instead.
func (*IssueCredentialAcceptProposalRequestV3) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{3}
}

func (x *IssueCredentialAcceptProposalRequestV3) GetPiid() string {
	if x != nil {
		return x.Piid
	}
	return ""
}

func (x *IssueCredentialAcceptProposalRequestV3) GetBody() *IssueCredentialAcceptProposalBodyV3 {
	if x != nil {
		return x.Body
	}
	return nil
}

// AcceptProposalResponse model
//
// Represents a AcceptProposal response message.
//
// swagger:response issueCredentialAcceptProposalResponse
type IssueCredentialAcceptProposalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IssueCredentialAcceptProposalResponse) Reset() {
	*x = IssueCredentialAcceptProposalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialAcceptProposalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialAcceptProposalResponse) ProtoMessage() {}

func (x *IssueCredentialAcceptProposalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialAcceptProposalResponse.ProtoReflect.Descriptor instead.
func (*IssueCredentialAcceptProposalResponse) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{4}
}

// IssueCredentialAcceptOfferBody model
//
// This is used for accepting an offer.
//
type IssueCredentialAcceptOfferBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RequestCredential is an optional message sent by the potential Holder to the Issuer to request the issuance of a
	// credential.
	RequestCredential *types.RequestCredentialV2 `protobuf:"bytes,2,opt,name=request_credential,json=requestCredential,proto3" json:"request_credential,omitempty"`
}

func (x *IssueCredentialAcceptOfferBody) Reset() {
	*x = IssueCredentialAcceptOfferBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialAcceptOfferBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialAcceptOfferBody) ProtoMessage() {}

func (x *IssueCredentialAcceptOfferBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialAcceptOfferBody.ProtoReflect.Descriptor instead.
func (*IssueCredentialAcceptOfferBody) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{5}
}

func (x *IssueCredentialAcceptOfferBody) GetRequestCredential() *types.RequestCredentialV2 {
	if x != nil {
		return x.RequestCredential
	}
	return nil
}

// IssueCredentialAcceptOfferBody model
//
// This is used for accepting an offer.
//
type IssueCredentialAcceptOfferBodyV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RequestCredential is an optional message sent by the potential Holder to the Issuer to request the issuance of a
	// credential.
	RequestCredential *types.RequestCredentialV3 `protobuf:"bytes,2,opt,name=request_credential,json=requestCredential,proto3" json:"request_credential,omitempty"`
}

func (x *IssueCredentialAcceptOfferBodyV3) Reset() {
	*x = IssueCredentialAcceptOfferBodyV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialAcceptOfferBodyV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialAcceptOfferBodyV3) ProtoMessage() {}

func (x *IssueCredentialAcceptOfferBodyV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialAcceptOfferBodyV3.ProtoReflect.Descriptor instead.
func (*IssueCredentialAcceptOfferBodyV3) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{6}
}

func (x *IssueCredentialAcceptOfferBodyV3) GetRequestCredential() *types.RequestCredentialV3 {
	if x != nil {
		return x.RequestCredential
	}
	return nil
}

// This is used for operation to accept an offer
//
// swagger:parameters issueCredentialAcceptOffer
type IssueCredentialAcceptOfferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PIID Protocol instance ID
	// Protocol instance ID
	//
	// in: path
	// required: true
	Piid string                          `protobuf:"bytes,1,opt,name=piid,proto3" json:"piid,omitempty"`
	Body *IssueCredentialAcceptOfferBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *IssueCredentialAcceptOfferRequest) Reset() {
	*x = IssueCredentialAcceptOfferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialAcceptOfferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialAcceptOfferRequest) ProtoMessage() {}

func (x *IssueCredentialAcceptOfferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialAcceptOfferRequest.ProtoReflect.Descriptor instead.
func (*IssueCredentialAcceptOfferRequest) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{7}
}

func (x *IssueCredentialAcceptOfferRequest) GetPiid() string {
	if x != nil {
		return x.Piid
	}
	return ""
}

func (x *IssueCredentialAcceptOfferRequest) GetBody() *IssueCredentialAcceptOfferBody {
	if x != nil {
		return x.Body
	}
	return nil
}

// This is used for operation to accept an offer
//
// swagger:parameters issueCredentialAcceptOfferV3
type IssueCredentialAcceptOfferRequestV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PIID Protocol instance ID
	// Protocol instance ID
	//
	// in: path
	// required: true
	Piid string                            `protobuf:"bytes,1,opt,name=piid,proto3" json:"piid,omitempty"`
	Body *IssueCredentialAcceptOfferBodyV3 `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *IssueCredentialAcceptOfferRequestV3) Reset() {
	*x = IssueCredentialAcceptOfferRequestV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialAcceptOfferRequestV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialAcceptOfferRequestV3) ProtoMessage() {}

func (x *IssueCredentialAcceptOfferRequestV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialAcceptOfferRequestV3.ProtoReflect.Descriptor instead.
func (*IssueCredentialAcceptOfferRequestV3) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{8}
}

func (x *IssueCredentialAcceptOfferRequestV3) GetPiid() string {
	if x != nil {
		return x.Piid
	}
	return ""
}

func (x *IssueCredentialAcceptOfferRequestV3) GetBody() *IssueCredentialAcceptOfferBodyV3 {
	if x != nil {
		return x.Body
	}
	return nil
}

// IssueCredentialAcceptOfferResponse model
//
// Represents a AcceptOffer response message.
//
type IssueCredentialAcceptOfferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IssueCredentialAcceptOfferResponse) Reset() {
	*x = IssueCredentialAcceptOfferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialAcceptOfferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialAcceptOfferResponse) ProtoMessage() {}

func (x *IssueCredentialAcceptOfferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialAcceptOfferResponse.ProtoReflect.Descriptor instead.
func (*IssueCredentialAcceptOfferResponse) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{9}
}

// IssueCredentialAcceptRequestBody model
//
// This is used for accepting a request.
//
type IssueCredentialAcceptRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IssueCredential contains as attached payload the credentials being issued
	IssueCredential *types.IssueCredentialV2 `protobuf:"bytes,1,opt,name=issue_credential,json=issueCredential,proto3" json:"issue_credential,omitempty"`
}

func (x *IssueCredentialAcceptRequestBody) Reset() {
	*x = IssueCredentialAcceptRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialAcceptRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialAcceptRequestBody) ProtoMessage() {}

func (x *IssueCredentialAcceptRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialAcceptRequestBody.ProtoReflect.Descriptor instead.
func (*IssueCredentialAcceptRequestBody) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{10}
}

func (x *IssueCredentialAcceptRequestBody) GetIssueCredential() *types.IssueCredentialV2 {
	if x != nil {
		return x.IssueCredential
	}
	return nil
}

// IssueCredentialAcceptRequestBodyV3 model
//
// This is used for accepting a request.
//
type IssueCredentialAcceptRequestBodyV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IssueCredential contains as attached payload the credentials being issued
	IssueCredential *types.IssueCredentialV3 `protobuf:"bytes,1,opt,name=issue_credential,json=issueCredential,proto3" json:"issue_credential,omitempty"`
}

func (x *IssueCredentialAcceptRequestBodyV3) Reset() {
	*x = IssueCredentialAcceptRequestBodyV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialAcceptRequestBodyV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialAcceptRequestBodyV3) ProtoMessage() {}

func (x *IssueCredentialAcceptRequestBodyV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialAcceptRequestBodyV3.ProtoReflect.Descriptor instead.
func (*IssueCredentialAcceptRequestBodyV3) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{11}
}

func (x *IssueCredentialAcceptRequestBodyV3) GetIssueCredential() *types.IssueCredentialV3 {
	if x != nil {
		return x.IssueCredential
	}
	return nil
}

// IssueCredentialAcceptRequestRequest model
//
// This is used for operation to accept a request
//
// swagger:parameters issueCredentialAcceptRequest
type IssueCredentialAcceptRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PIID Protocol instance ID
	// Protocol instance ID
	//
	// in: path
	// required: true
	Piid string `protobuf:"bytes,1,opt,name=piid,proto3" json:"piid,omitempty"`
	// in: body
	Body *IssueCredentialAcceptRequestBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *IssueCredentialAcceptRequestRequest) Reset() {
	*x = IssueCredentialAcceptRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialAcceptRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialAcceptRequestRequest) ProtoMessage() {}

func (x *IssueCredentialAcceptRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialAcceptRequestRequest.ProtoReflect.Descriptor instead.
func (*IssueCredentialAcceptRequestRequest) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{12}
}

func (x *IssueCredentialAcceptRequestRequest) GetPiid() string {
	if x != nil {
		return x.Piid
	}
	return ""
}

func (x *IssueCredentialAcceptRequestRequest) GetBody() *IssueCredentialAcceptRequestBody {
	if x != nil {
		return x.Body
	}
	return nil
}

// IssueCredentialAcceptRequestRequestV3 model
//
// This is used for accepting a request.
//
// swagger:parameters issueCredentialAcceptRequestV3
type IssueCredentialAcceptRequestRequestV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PIID Protocol instance ID
	// Protocol instance ID
	//
	// in: path
	// required: true
	Piid string `protobuf:"bytes,1,opt,name=piid,proto3" json:"piid,omitempty"`
	// IssueCredential contains as attached payload the credentials being issued
	// in: body
	Body *IssueCredentialAcceptRequestBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *IssueCredentialAcceptRequestRequestV3) Reset() {
	*x = IssueCredentialAcceptRequestRequestV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialAcceptRequestRequestV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialAcceptRequestRequestV3) ProtoMessage() {}

func (x *IssueCredentialAcceptRequestRequestV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialAcceptRequestRequestV3.ProtoReflect.Descriptor instead.
func (*IssueCredentialAcceptRequestRequestV3) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{13}
}

func (x *IssueCredentialAcceptRequestRequestV3) GetPiid() string {
	if x != nil {
		return x.Piid
	}
	return ""
}

func (x *IssueCredentialAcceptRequestRequestV3) GetBody() *IssueCredentialAcceptRequestBody {
	if x != nil {
		return x.Body
	}
	return nil
}

// IssueCredentialAcceptRequestResponse model
//
// Represents a AcceptRequest response message.
//
// swagger:response issueCredentialAcceptRequestResponse
type IssueCredentialAcceptRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IssueCredentialAcceptRequestResponse) Reset() {
	*x = IssueCredentialAcceptRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialAcceptRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialAcceptRequestResponse) ProtoMessage() {}

func (x *IssueCredentialAcceptRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialAcceptRequestResponse.ProtoReflect.Descriptor instead.
func (*IssueCredentialAcceptRequestResponse) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{14}
}

// IssueCredentialAcceptCredentialBody model
//
// This is used for accepting a credential.
//
type IssueCredentialAcceptCredentialBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Names represent the names of how credentials will be stored.
	Names []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	// SkipStore if true then credential will not be saved in agent's verifiable store,
	// but protocol state will be updated.
	SkipStore bool `protobuf:"varint,3,opt,name=skipStore,proto3" json:"skipStore,omitempty"`
}

func (x *IssueCredentialAcceptCredentialBody) Reset() {
	*x = IssueCredentialAcceptCredentialBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialAcceptCredentialBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialAcceptCredentialBody) ProtoMessage() {}

func (x *IssueCredentialAcceptCredentialBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialAcceptCredentialBody.ProtoReflect.Descriptor instead.
func (*IssueCredentialAcceptCredentialBody) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{15}
}

func (x *IssueCredentialAcceptCredentialBody) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *IssueCredentialAcceptCredentialBody) GetSkipStore() bool {
	if x != nil {
		return x.SkipStore
	}
	return false
}

// IssueCredentialAcceptCredentialRequest model
//
// This is used for accepting a credential.
//
// swagger:parameters issueCredentialAcceptCredential
type IssueCredentialAcceptCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PIID Protocol instance ID.
	// Protocol instance ID
	//
	// in: path
	// required: true
	Piid string `protobuf:"bytes,1,opt,name=piid,proto3" json:"piid,omitempty"`
	// in: body
	Body *IssueCredentialAcceptCredentialBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *IssueCredentialAcceptCredentialRequest) Reset() {
	*x = IssueCredentialAcceptCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialAcceptCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialAcceptCredentialRequest) ProtoMessage() {}

func (x *IssueCredentialAcceptCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialAcceptCredentialRequest.ProtoReflect.Descriptor instead.
func (*IssueCredentialAcceptCredentialRequest) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{16}
}

func (x *IssueCredentialAcceptCredentialRequest) GetPiid() string {
	if x != nil {
		return x.Piid
	}
	return ""
}

func (x *IssueCredentialAcceptCredentialRequest) GetBody() *IssueCredentialAcceptCredentialBody {
	if x != nil {
		return x.Body
	}
	return nil
}

// IssueCredentialAcceptCredentialResponse model
//
// Represents a AcceptCredential response message.
//
// swagger:response issueCredentialAcceptCredentialResponse
type IssueCredentialAcceptCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IssueCredentialAcceptCredentialResponse) Reset() {
	*x = IssueCredentialAcceptCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialAcceptCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialAcceptCredentialResponse) ProtoMessage() {}

func (x *IssueCredentialAcceptCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialAcceptCredentialResponse.ProtoReflect.Descriptor instead.
func (*IssueCredentialAcceptCredentialResponse) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{17}
}

// IssueCredentialNegotiateProposalRequest model
//
// This is used when the Holder wants to negotiate about an offer he received.
//
type IssueCredentialNegotiateProposalBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ProposeCredential is a message sent in response to a offer-credential message when the Holder
	// wants some adjustments made to the credential data offered by Issuer.
	ProposeCredential *types.ProposeCredentialV2 `protobuf:"bytes,1,opt,name=propose_credential,json=proposeCredential,proto3" json:"propose_credential,omitempty"`
}

func (x *IssueCredentialNegotiateProposalBody) Reset() {
	*x = IssueCredentialNegotiateProposalBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialNegotiateProposalBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialNegotiateProposalBody) ProtoMessage() {}

func (x *IssueCredentialNegotiateProposalBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialNegotiateProposalBody.ProtoReflect.Descriptor instead.
func (*IssueCredentialNegotiateProposalBody) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{18}
}

func (x *IssueCredentialNegotiateProposalBody) GetProposeCredential() *types.ProposeCredentialV2 {
	if x != nil {
		return x.ProposeCredential
	}
	return nil
}

// This is used when the Holder wants to negotiate about an offer he received.
//
// swagger:parameters issueCredentialNegotiateProposal
type IssueCredentialNegotiateProposalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PIID Protocol instance ID
	// Protocol instance ID
	//
	// in: path
	// required: true
	Piid string `protobuf:"bytes,1,opt,name=piid,proto3" json:"piid,omitempty"`
	// in: body
	Body *IssueCredentialNegotiateProposalBody `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *IssueCredentialNegotiateProposalRequest) Reset() {
	*x = IssueCredentialNegotiateProposalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialNegotiateProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialNegotiateProposalRequest) ProtoMessage() {}

func (x *IssueCredentialNegotiateProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialNegotiateProposalRequest.ProtoReflect.Descriptor instead.
func (*IssueCredentialNegotiateProposalRequest) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{19}
}

func (x *IssueCredentialNegotiateProposalRequest) GetPiid() string {
	if x != nil {
		return x.Piid
	}
	return ""
}

func (x *IssueCredentialNegotiateProposalRequest) GetBody() *IssueCredentialNegotiateProposalBody {
	if x != nil {
		return x.Body
	}
	return nil
}

// IssueCredentialNegotiateProposalBodyV3 model
//
// This is used when the Holder wants to negotiate about an offer he received.
//
type IssueCredentialNegotiateProposalBodyV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ProposeCredential is a message sent in response to a offer-credential message when the Holder
	// wants some adjustments made to the credential data offered by Issuer.
	ProposeCredential *types.ProposeCredentialV3 `protobuf:"bytes,1,opt,name=propose_credential,json=proposeCredential,proto3" json:"propose_credential,omitempty"`
}

func (x *IssueCredentialNegotiateProposalBodyV3) Reset() {
	*x = IssueCredentialNegotiateProposalBodyV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialNegotiateProposalBodyV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialNegotiateProposalBodyV3) ProtoMessage() {}

func (x *IssueCredentialNegotiateProposalBodyV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialNegotiateProposalBodyV3.ProtoReflect.Descriptor instead.
func (*IssueCredentialNegotiateProposalBodyV3) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{20}
}

func (x *IssueCredentialNegotiateProposalBodyV3) GetProposeCredential() *types.ProposeCredentialV3 {
	if x != nil {
		return x.ProposeCredential
	}
	return nil
}

// IssueCredentialNegotiateProposalRequestV3 model
//
// This is used when the Holder wants to negotiate about an offer he received.
//
// swagger:parameters issueCredentialNegotiateProposalV3
type IssueCredentialNegotiateProposalRequestV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PIID Protocol instance ID
	// Protocol instance ID
	//
	// in: path
	// required: true
	Piid string `protobuf:"bytes,1,opt,name=piid,proto3" json:"piid,omitempty"`
	// in: body
	Body *IssueCredentialNegotiateProposalBodyV3 `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *IssueCredentialNegotiateProposalRequestV3) Reset() {
	*x = IssueCredentialNegotiateProposalRequestV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialNegotiateProposalRequestV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialNegotiateProposalRequestV3) ProtoMessage() {}

func (x *IssueCredentialNegotiateProposalRequestV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialNegotiateProposalRequestV3.ProtoReflect.Descriptor instead.
func (*IssueCredentialNegotiateProposalRequestV3) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{21}
}

func (x *IssueCredentialNegotiateProposalRequestV3) GetPiid() string {
	if x != nil {
		return x.Piid
	}
	return ""
}

func (x *IssueCredentialNegotiateProposalRequestV3) GetBody() *IssueCredentialNegotiateProposalBodyV3 {
	if x != nil {
		return x.Body
	}
	return nil
}

// IssueCredentialNegotiateProposalResponse model
//
// Represents a NegotiateProposal response message.
//
// swagger:response issueCredentialNegotiateProposalResponse
type IssueCredentialNegotiateProposalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IssueCredentialNegotiateProposalResponse) Reset() {
	*x = IssueCredentialNegotiateProposalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialNegotiateProposalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialNegotiateProposalResponse) ProtoMessage() {}

func (x *IssueCredentialNegotiateProposalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialNegotiateProposalResponse.ProtoReflect.Descriptor instead.
func (*IssueCredentialNegotiateProposalResponse) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{22}
}

// IssueCredentialDeclineProposalRequest model
//
// This is used when proposal needs to be rejected.
// This is used for operation to decline a proposal
//
// swagger:parameters issueCredentialDeclineProposal
type IssueCredentialDeclineProposalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PIID Protocol instance ID
	// Protocol instance ID
	//
	// in: path
	// required: true
	Piid string `protobuf:"bytes,1,opt,name=piid,proto3" json:"piid,omitempty"`
	// Reason why proposal is declined
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// RedirectURL is optional web redirect URL that can be sent to holder.
	// Useful in cases where issuer would like holder to redirect after its proposal gets declined.
	RedirectURL string `protobuf:"bytes,3,opt,name=redirectURL,proto3" json:"redirectURL,omitempty"`
}

func (x *IssueCredentialDeclineProposalRequest) Reset() {
	*x = IssueCredentialDeclineProposalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialDeclineProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialDeclineProposalRequest) ProtoMessage() {}

func (x *IssueCredentialDeclineProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialDeclineProposalRequest.ProtoReflect.Descriptor instead.
func (*IssueCredentialDeclineProposalRequest) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{23}
}

func (x *IssueCredentialDeclineProposalRequest) GetPiid() string {
	if x != nil {
		return x.Piid
	}
	return ""
}

func (x *IssueCredentialDeclineProposalRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *IssueCredentialDeclineProposalRequest) GetRedirectURL() string {
	if x != nil {
		return x.RedirectURL
	}
	return ""
}

// IssueCredentialDeclineProposalResponse model
//
// Represents a DeclineProposal response message.
//
// swagger:response issueCredentialDeclineProposalResponse
type IssueCredentialDeclineProposalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IssueCredentialDeclineProposalResponse) Reset() {
	*x = IssueCredentialDeclineProposalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialDeclineProposalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialDeclineProposalResponse) ProtoMessage() {}

func (x *IssueCredentialDeclineProposalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialDeclineProposalResponse.ProtoReflect.Descriptor instead.
func (*IssueCredentialDeclineProposalResponse) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{24}
}

// IssueCredentialDeclineOfferRequest model
//
// This is used when offer needs to be rejected.
// This is used for operation to decline an Offer
//
// swagger:parameters issueCredentialDeclineOffer
type IssueCredentialDeclineOfferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PIID Protocol instance ID
	// Protocol instance ID
	//
	// in: path
	// required: true
	Piid string `protobuf:"bytes,1,opt,name=piid,proto3" json:"piid,omitempty"`
	// Reason why offer is declined
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *IssueCredentialDeclineOfferRequest) Reset() {
	*x = IssueCredentialDeclineOfferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialDeclineOfferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialDeclineOfferRequest) ProtoMessage() {}

func (x *IssueCredentialDeclineOfferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialDeclineOfferRequest.ProtoReflect.Descriptor instead.
func (*IssueCredentialDeclineOfferRequest) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{25}
}

func (x *IssueCredentialDeclineOfferRequest) GetPiid() string {
	if x != nil {
		return x.Piid
	}
	return ""
}

func (x *IssueCredentialDeclineOfferRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// IssueCredentialDeclineOfferResponse model
//
// Represents a DeclineOffer response message.
//
// swagger:response issueCredentialDeclineOfferResponse
type IssueCredentialDeclineOfferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IssueCredentialDeclineOfferResponse) Reset() {
	*x = IssueCredentialDeclineOfferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialDeclineOfferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialDeclineOfferResponse) ProtoMessage() {}

func (x *IssueCredentialDeclineOfferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialDeclineOfferResponse.ProtoReflect.Descriptor instead.
func (*IssueCredentialDeclineOfferResponse) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{26}
}

// IssueCredentialDeclineRequestRequest model
//
// This is used when request needs to be rejected.
//
// swagger:parameters issueCredentialDeclineRequest
type IssueCredentialDeclineRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PIID Protocol instance ID
	// Protocol instance ID
	//
	// in: path
	// required: true
	Piid string `protobuf:"bytes,1,opt,name=piid,proto3" json:"piid,omitempty"`
	// Reason why request is declined
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// RedirectURL is optional web redirect URL that can be sent to holder.
	// Useful in cases where issuer would like holder to redirect after its credential request gets declined.
	RedirectURL string `protobuf:"bytes,3,opt,name=redirectURL,proto3" json:"redirectURL,omitempty"`
}

func (x *IssueCredentialDeclineRequestRequest) Reset() {
	*x = IssueCredentialDeclineRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialDeclineRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialDeclineRequestRequest) ProtoMessage() {}

func (x *IssueCredentialDeclineRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialDeclineRequestRequest.ProtoReflect.Descriptor instead.
func (*IssueCredentialDeclineRequestRequest) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{27}
}

func (x *IssueCredentialDeclineRequestRequest) GetPiid() string {
	if x != nil {
		return x.Piid
	}
	return ""
}

func (x *IssueCredentialDeclineRequestRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *IssueCredentialDeclineRequestRequest) GetRedirectURL() string {
	if x != nil {
		return x.RedirectURL
	}
	return ""
}

// IssueCredentialDeclineRequestResponse model
//
// Represents a DeclineRequest response message.
//
// swagger:response issueCredentialDeclineRequestResponse
type IssueCredentialDeclineRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IssueCredentialDeclineRequestResponse) Reset() {
	*x = IssueCredentialDeclineRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialDeclineRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialDeclineRequestResponse) ProtoMessage() {}

func (x *IssueCredentialDeclineRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialDeclineRequestResponse.ProtoReflect.Descriptor instead.
func (*IssueCredentialDeclineRequestResponse) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{28}
}

// IssueCredentialDeclineCredentialRequest model
//
// This is used when credential needs to be rejected.
// This is used for operation to decline a credential
// swagger:parameters issueCredentialDeclineCredential
type IssueCredentialDeclineCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PIID Protocol instance ID
	// Protocol instance ID
	//
	// in: path
	// required: true
	Piid string `protobuf:"bytes,1,opt,name=piid,proto3" json:"piid,omitempty"`
	// Reason why credential is declined
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *IssueCredentialDeclineCredentialRequest) Reset() {
	*x = IssueCredentialDeclineCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialDeclineCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialDeclineCredentialRequest) ProtoMessage() {}

func (x *IssueCredentialDeclineCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialDeclineCredentialRequest.ProtoReflect.Descriptor instead.
func (*IssueCredentialDeclineCredentialRequest) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{29}
}

func (x *IssueCredentialDeclineCredentialRequest) GetPiid() string {
	if x != nil {
		return x.Piid
	}
	return ""
}

func (x *IssueCredentialDeclineCredentialRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// IssueCredentialDeclineCredentialResponse model
//
// Represents a DeclineCredential response message.
//
// swagger:response issueCredentialDeclineCredentialResponse
type IssueCredentialDeclineCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IssueCredentialDeclineCredentialResponse) Reset() {
	*x = IssueCredentialDeclineCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialDeclineCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialDeclineCredentialResponse) ProtoMessage() {}

func (x *IssueCredentialDeclineCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialDeclineCredentialResponse.ProtoReflect.Descriptor instead.
func (*IssueCredentialDeclineCredentialResponse) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{30}
}

// IssueCredentialSendProposalBody model
//
// This is used for sending a proposal to initiate the protocol.
//
type IssueCredentialSendProposalBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MyDID sender's did
	MyDid string `protobuf:"bytes,1,opt,name=my_did,json=myDid,proto3" json:"my_did,omitempty"`
	// TheirDID receiver's did
	TheirDid string `protobuf:"bytes,2,opt,name=their_did,json=theirDid,proto3" json:"their_did,omitempty"`
	// ProposeCredential is a message sent by the potential Holder to the Issuer to initiate the protocol
	ProposeCredential *types.ProposeCredentialV2 `protobuf:"bytes,3,opt,name=propose_credential,json=proposeCredential,proto3" json:"propose_credential,omitempty"`
}

func (x *IssueCredentialSendProposalBody) Reset() {
	*x = IssueCredentialSendProposalBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialSendProposalBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialSendProposalBody) ProtoMessage() {}

func (x *IssueCredentialSendProposalBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialSendProposalBody.ProtoReflect.Descriptor instead.
func (*IssueCredentialSendProposalBody) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{31}
}

func (x *IssueCredentialSendProposalBody) GetMyDid() string {
	if x != nil {
		return x.MyDid
	}
	return ""
}

func (x *IssueCredentialSendProposalBody) GetTheirDid() string {
	if x != nil {
		return x.TheirDid
	}
	return ""
}

func (x *IssueCredentialSendProposalBody) GetProposeCredential() *types.ProposeCredentialV2 {
	if x != nil {
		return x.ProposeCredential
	}
	return nil
}

// IssueCredentialSendProposalRequest model
//
// This is used for sending a proposal to initiate the protocol.
//
// swagger:parameters issueCredentialSendProposal
type IssueCredentialSendProposalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// in: body
	Body *IssueCredentialSendProposalBody `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *IssueCredentialSendProposalRequest) Reset() {
	*x = IssueCredentialSendProposalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialSendProposalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialSendProposalRequest) ProtoMessage() {}

func (x *IssueCredentialSendProposalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialSendProposalRequest.ProtoReflect.Descriptor instead.
func (*IssueCredentialSendProposalRequest) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{32}
}

func (x *IssueCredentialSendProposalRequest) GetBody() *IssueCredentialSendProposalBody {
	if x != nil {
		return x.Body
	}
	return nil
}

// IssueCredentialSendProposalBodyV3 model
//
// This is used for sending a proposal to initiate the protocol.
//
type IssueCredentialSendProposalBodyV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MyDID sender's did
	MyDid string `protobuf:"bytes,1,opt,name=my_did,json=myDid,proto3" json:"my_did,omitempty"`
	// TheirDID receiver's did
	TheirDid string `protobuf:"bytes,2,opt,name=their_did,json=theirDid,proto3" json:"their_did,omitempty"`
	// ProposeCredential is a message sent by the potential Holder to the Issuer to initiate the protocol
	ProposeCredential *types.ProposeCredentialV3 `protobuf:"bytes,3,opt,name=propose_credential,json=proposeCredential,proto3" json:"propose_credential,omitempty"`
}

func (x *IssueCredentialSendProposalBodyV3) Reset() {
	*x = IssueCredentialSendProposalBodyV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialSendProposalBodyV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialSendProposalBodyV3) ProtoMessage() {}

func (x *IssueCredentialSendProposalBodyV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialSendProposalBodyV3.ProtoReflect.Descriptor instead.
func (*IssueCredentialSendProposalBodyV3) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{33}
}

func (x *IssueCredentialSendProposalBodyV3) GetMyDid() string {
	if x != nil {
		return x.MyDid
	}
	return ""
}

func (x *IssueCredentialSendProposalBodyV3) GetTheirDid() string {
	if x != nil {
		return x.TheirDid
	}
	return ""
}

func (x *IssueCredentialSendProposalBodyV3) GetProposeCredential() *types.ProposeCredentialV3 {
	if x != nil {
		return x.ProposeCredential
	}
	return nil
}

// IssueCredentialSendProposalRequestV3 model
//
// This is used for sending a proposal to initiate the protocol.
//
// swagger:parameters issueCredentialSendProposalV3
type IssueCredentialSendProposalRequestV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// in: body
	Body *IssueCredentialSendProposalBodyV3 `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *IssueCredentialSendProposalRequestV3) Reset() {
	*x = IssueCredentialSendProposalRequestV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialSendProposalRequestV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialSendProposalRequestV3) ProtoMessage() {}

func (x *IssueCredentialSendProposalRequestV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialSendProposalRequestV3.ProtoReflect.Descriptor instead.
func (*IssueCredentialSendProposalRequestV3) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{34}
}

func (x *IssueCredentialSendProposalRequestV3) GetBody() *IssueCredentialSendProposalBodyV3 {
	if x != nil {
		return x.Body
	}
	return nil
}

// IssueCredentialSendProposalResponse model
//
// Represents a SendProposal response message.
//
// swagger:response issueCredentialSendProposalResponse
type IssueCredentialSendProposalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PIID Protocol instance ID. It can be used as a correlation ID
	// in: body
	Piid string `protobuf:"bytes,1,opt,name=piid,proto3" json:"piid,omitempty"`
}

func (x *IssueCredentialSendProposalResponse) Reset() {
	*x = IssueCredentialSendProposalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialSendProposalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialSendProposalResponse) ProtoMessage() {}

func (x *IssueCredentialSendProposalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialSendProposalResponse.ProtoReflect.Descriptor instead.
func (*IssueCredentialSendProposalResponse) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{35}
}

func (x *IssueCredentialSendProposalResponse) GetPiid() string {
	if x != nil {
		return x.Piid
	}
	return ""
}

// IssueCredentialSendOfferBody model
//
// This is used for sending an offer.
//
type IssueCredentialSendOfferBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MyDID sender's did
	MyDid string `protobuf:"bytes,1,opt,name=my_did,json=myDid,proto3" json:"my_did,omitempty"`
	// TheirDID receiver's did
	TheirDid string `protobuf:"bytes,2,opt,name=their_did,json=theirDid,proto3" json:"their_did,omitempty"`
	// OfferCredential is a message describing the credential intend to offer and
	// possibly the price they expect to be paid.
	OfferCredential *types.GenericOfferCredential `protobuf:"bytes,3,opt,name=offer_credential,json=offerCredential,proto3" json:"offer_credential,omitempty"`
}

func (x *IssueCredentialSendOfferBody) Reset() {
	*x = IssueCredentialSendOfferBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialSendOfferBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialSendOfferBody) ProtoMessage() {}

func (x *IssueCredentialSendOfferBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialSendOfferBody.ProtoReflect.Descriptor instead.
func (*IssueCredentialSendOfferBody) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{36}
}

func (x *IssueCredentialSendOfferBody) GetMyDid() string {
	if x != nil {
		return x.MyDid
	}
	return ""
}

func (x *IssueCredentialSendOfferBody) GetTheirDid() string {
	if x != nil {
		return x.TheirDid
	}
	return ""
}

func (x *IssueCredentialSendOfferBody) GetOfferCredential() *types.GenericOfferCredential {
	if x != nil {
		return x.OfferCredential
	}
	return nil
}

// IssueCredentialSendOfferRequest model
//
// This is used for sending an offer.
//
// swagger:parameters issueCredentialSendOffer
type IssueCredentialSendOfferRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// in: body
	OfferCredential *types.OfferCredentialV2 `protobuf:"bytes,1,opt,name=offer_credential,json=offerCredential,proto3" json:"offer_credential,omitempty"`
}

func (x *IssueCredentialSendOfferRequest) Reset() {
	*x = IssueCredentialSendOfferRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialSendOfferRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialSendOfferRequest) ProtoMessage() {}

func (x *IssueCredentialSendOfferRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialSendOfferRequest.ProtoReflect.Descriptor instead.
func (*IssueCredentialSendOfferRequest) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{37}
}

func (x *IssueCredentialSendOfferRequest) GetOfferCredential() *types.OfferCredentialV2 {
	if x != nil {
		return x.OfferCredential
	}
	return nil
}

// IssueCredentialSendOfferBodyV2 model
//
// This is used for sending an offer.
//
type IssueCredentialSendOfferBodyV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MyDID sender's did
	MyDid string `protobuf:"bytes,1,opt,name=my_did,json=myDid,proto3" json:"my_did,omitempty"`
	// TheirDID receiver's did
	TheirDid string `protobuf:"bytes,2,opt,name=their_did,json=theirDid,proto3" json:"their_did,omitempty"`
	// OfferCredential is a message describing the credential intend to offer and
	// possibly the price they expect to be paid.
	OfferCredential *types.OfferCredentialV2 `protobuf:"bytes,3,opt,name=offer_credential,json=offerCredential,proto3" json:"offer_credential,omitempty"`
}

func (x *IssueCredentialSendOfferBodyV3) Reset() {
	*x = IssueCredentialSendOfferBodyV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialSendOfferBodyV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialSendOfferBodyV3) ProtoMessage() {}

func (x *IssueCredentialSendOfferBodyV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialSendOfferBodyV3.ProtoReflect.Descriptor instead.
func (*IssueCredentialSendOfferBodyV3) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{38}
}

func (x *IssueCredentialSendOfferBodyV3) GetMyDid() string {
	if x != nil {
		return x.MyDid
	}
	return ""
}

func (x *IssueCredentialSendOfferBodyV3) GetTheirDid() string {
	if x != nil {
		return x.TheirDid
	}
	return ""
}

func (x *IssueCredentialSendOfferBodyV3) GetOfferCredential() *types.OfferCredentialV2 {
	if x != nil {
		return x.OfferCredential
	}
	return nil
}

// IssueCredentialSendOfferRequestV3 model
//
// This is used for sending an offer.
//
// swagger:parameters issueCredentialSendOfferV3
type IssueCredentialSendOfferRequestV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// in: body
	Body *IssueCredentialSendOfferBodyV3 `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *IssueCredentialSendOfferRequestV3) Reset() {
	*x = IssueCredentialSendOfferRequestV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialSendOfferRequestV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialSendOfferRequestV3) ProtoMessage() {}

func (x *IssueCredentialSendOfferRequestV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialSendOfferRequestV3.ProtoReflect.Descriptor instead.
func (*IssueCredentialSendOfferRequestV3) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{39}
}

func (x *IssueCredentialSendOfferRequestV3) GetBody() *IssueCredentialSendOfferBodyV3 {
	if x != nil {
		return x.Body
	}
	return nil
}

// IssueCredentialSendOfferResponse model
//
// Represents a SendOffer response message.
//
// swagger:response issueCredentialSendOfferResponse
type IssueCredentialSendOfferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// in: body
	// PIID Protocol instance ID. It can be used as a correlation ID
	Piid string `protobuf:"bytes,1,opt,name=piid,proto3" json:"piid,omitempty"`
}

func (x *IssueCredentialSendOfferResponse) Reset() {
	*x = IssueCredentialSendOfferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialSendOfferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialSendOfferResponse) ProtoMessage() {}

func (x *IssueCredentialSendOfferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialSendOfferResponse.ProtoReflect.Descriptor instead.
func (*IssueCredentialSendOfferResponse) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{40}
}

func (x *IssueCredentialSendOfferResponse) GetPiid() string {
	if x != nil {
		return x.Piid
	}
	return ""
}

// IssueCredentialSendRequestBody model
//
// This is used for sending a request.
//
type IssueCredentialSendRequestBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MyDID sender's did
	MyDid string `protobuf:"bytes,1,opt,name=my_did,json=myDid,proto3" json:"my_did,omitempty"`
	// TheirDID receiver's did
	TheirDid string `protobuf:"bytes,2,opt,name=their_did,json=theirDid,proto3" json:"their_did,omitempty"`
	// RequestCredential is a message sent by the potential Holder to the Issuer,
	// to request the issuance of a credential.
	RequestCredential *types.RequestCredentialV2 `protobuf:"bytes,3,opt,name=request_credential,json=requestCredential,proto3" json:"request_credential,omitempty"`
}

func (x *IssueCredentialSendRequestBody) Reset() {
	*x = IssueCredentialSendRequestBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialSendRequestBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialSendRequestBody) ProtoMessage() {}

func (x *IssueCredentialSendRequestBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialSendRequestBody.ProtoReflect.Descriptor instead.
func (*IssueCredentialSendRequestBody) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{41}
}

func (x *IssueCredentialSendRequestBody) GetMyDid() string {
	if x != nil {
		return x.MyDid
	}
	return ""
}

func (x *IssueCredentialSendRequestBody) GetTheirDid() string {
	if x != nil {
		return x.TheirDid
	}
	return ""
}

func (x *IssueCredentialSendRequestBody) GetRequestCredential() *types.RequestCredentialV2 {
	if x != nil {
		return x.RequestCredential
	}
	return nil
}

// IssueCredentialSendRequestRequest model
//
// This is used for sending a request.
//
// swagger:parameters issueCredentialSendRequest
type IssueCredentialSendRequestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// in: body
	Body *IssueCredentialSendRequestBody `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *IssueCredentialSendRequestRequest) Reset() {
	*x = IssueCredentialSendRequestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialSendRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialSendRequestRequest) ProtoMessage() {}

func (x *IssueCredentialSendRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialSendRequestRequest.ProtoReflect.Descriptor instead.
func (*IssueCredentialSendRequestRequest) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{42}
}

func (x *IssueCredentialSendRequestRequest) GetBody() *IssueCredentialSendRequestBody {
	if x != nil {
		return x.Body
	}
	return nil
}

// IssueCredentialSendRequestBodyV3 model
//
// This is used for sending a request.
//
type IssueCredentialSendRequestBodyV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MyDID sender's did
	MyDid string `protobuf:"bytes,1,opt,name=my_did,json=myDid,proto3" json:"my_did,omitempty"`
	// TheirDID receiver's did
	TheirDid string `protobuf:"bytes,2,opt,name=their_did,json=theirDid,proto3" json:"their_did,omitempty"`
	// RequestCredential is a message sent by the potential Holder to the Issuer,
	// to request the issuance of a credential.
	RequestCredential *types.RequestCredentialV3 `protobuf:"bytes,3,opt,name=request_credential,json=requestCredential,proto3" json:"request_credential,omitempty"`
}

func (x *IssueCredentialSendRequestBodyV3) Reset() {
	*x = IssueCredentialSendRequestBodyV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialSendRequestBodyV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialSendRequestBodyV3) ProtoMessage() {}

func (x *IssueCredentialSendRequestBodyV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialSendRequestBodyV3.ProtoReflect.Descriptor instead.
func (*IssueCredentialSendRequestBodyV3) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{43}
}

func (x *IssueCredentialSendRequestBodyV3) GetMyDid() string {
	if x != nil {
		return x.MyDid
	}
	return ""
}

func (x *IssueCredentialSendRequestBodyV3) GetTheirDid() string {
	if x != nil {
		return x.TheirDid
	}
	return ""
}

func (x *IssueCredentialSendRequestBodyV3) GetRequestCredential() *types.RequestCredentialV3 {
	if x != nil {
		return x.RequestCredential
	}
	return nil
}

// IssueCredentialSendRequestRequestV3 model
//
// This is used for sending a request.
//
// swagger:parameters issueCredentialSendRequestV3
type IssueCredentialSendRequestRequestV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// in: body
	Body *IssueCredentialSendRequestBodyV3 `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *IssueCredentialSendRequestRequestV3) Reset() {
	*x = IssueCredentialSendRequestRequestV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialSendRequestRequestV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialSendRequestRequestV3) ProtoMessage() {}

func (x *IssueCredentialSendRequestRequestV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialSendRequestRequestV3.ProtoReflect.Descriptor instead.
func (*IssueCredentialSendRequestRequestV3) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{44}
}

func (x *IssueCredentialSendRequestRequestV3) GetBody() *IssueCredentialSendRequestBodyV3 {
	if x != nil {
		return x.Body
	}
	return nil
}

// IssueCredentialSendRequestResponse model
//
// Represents a SendRequest response message.
//
// swagger:response issueCredentialSendRequestResponse
type IssueCredentialSendRequestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PIID Protocol instance ID. It can be used as a correlation ID
	// in: body
	Piid string `protobuf:"bytes,1,opt,name=piid,proto3" json:"piid,omitempty"`
}

func (x *IssueCredentialSendRequestResponse) Reset() {
	*x = IssueCredentialSendRequestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialSendRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialSendRequestResponse) ProtoMessage() {}

func (x *IssueCredentialSendRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialSendRequestResponse.ProtoReflect.Descriptor instead.
func (*IssueCredentialSendRequestResponse) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{45}
}

func (x *IssueCredentialSendRequestResponse) GetPiid() string {
	if x != nil {
		return x.Piid
	}
	return ""
}

// IssueCredentialActionsRequest model
//
// Returns pending actions that have not yet to be executed or cancelled.
//
// swagger:parameters issueCredentialActions
type IssueCredentialActionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IssueCredentialActionsRequest) Reset() {
	*x = IssueCredentialActionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialActionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialActionsRequest) ProtoMessage() {}

func (x *IssueCredentialActionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialActionsRequest.ProtoReflect.Descriptor instead.
func (*IssueCredentialActionsRequest) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{46}
}

// IssueCredentialActionsBody model
//
// Represents Actions response message.
//
type IssueCredentialActionsBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions []*types1.Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *IssueCredentialActionsBody) Reset() {
	*x = IssueCredentialActionsBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialActionsBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialActionsBody) ProtoMessage() {}

func (x *IssueCredentialActionsBody) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialActionsBody.ProtoReflect.Descriptor instead.
func (*IssueCredentialActionsBody) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{47}
}

func (x *IssueCredentialActionsBody) GetActions() []*types1.Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

// IssueCredentialActionsResponse model
//
// Represents Actions response message.
//
// swagger:response issueCredentialActionsResponse
type IssueCredentialActionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// in: body
	Body *IssueCredentialActionsBody `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *IssueCredentialActionsResponse) Reset() {
	*x = IssueCredentialActionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialActionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialActionsResponse) ProtoMessage() {}

func (x *IssueCredentialActionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialActionsResponse.ProtoReflect.Descriptor instead.
func (*IssueCredentialActionsResponse) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{48}
}

func (x *IssueCredentialActionsResponse) GetBody() *IssueCredentialActionsBody {
	if x != nil {
		return x.Body
	}
	return nil
}

// IssueCredentialAcceptProblemReportRequest model
//
// This is used for accepting a problem report.
//
// swagger:parameters issueCredentialAcceptProblemReport
type IssueCredentialAcceptProblemReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PIID Protocol instance ID
	// Protocol instance ID
	//
	// in: path
	// required: true
	Piid string `protobuf:"bytes,1,opt,name=piid,proto3" json:"piid,omitempty"`
}

func (x *IssueCredentialAcceptProblemReportRequest) Reset() {
	*x = IssueCredentialAcceptProblemReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialAcceptProblemReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialAcceptProblemReportRequest) ProtoMessage() {}

func (x *IssueCredentialAcceptProblemReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialAcceptProblemReportRequest.ProtoReflect.Descriptor instead.
func (*IssueCredentialAcceptProblemReportRequest) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{49}
}

func (x *IssueCredentialAcceptProblemReportRequest) GetPiid() string {
	if x != nil {
		return x.Piid
	}
	return ""
}

// IssueCredentialAcceptProblemReportResponse model
//
// Represents a AcceptProblemReport response message.
//
// swagger:response issueCredentialAcceptProblemReportResponse
type IssueCredentialAcceptProblemReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IssueCredentialAcceptProblemReportResponse) Reset() {
	*x = IssueCredentialAcceptProblemReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialAcceptProblemReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialAcceptProblemReportResponse) ProtoMessage() {}

func (x *IssueCredentialAcceptProblemReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_services_issuecredential_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialAcceptProblemReportResponse.ProtoReflect.Descriptor instead.
func (*IssueCredentialAcceptProblemReportResponse) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP(), []int{50}
}

var File_api_did_issuecredential_services_issuecredential_proto protoreflect.FileDescriptor

var file_api_did_issuecredential_services_issuecredential_proto_rawDesc = []byte{
	0x0a, 0x36, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x64, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69,
	0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x33, 0x61, 0x70, 0x69, 0x2f,
	0x64, 0x69, 0x64, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x21, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x63, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x6f, 0x66, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x21, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x5b, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x56, 0x32, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x82, 0x01, 0x0a, 0x23, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x56, 0x33, 0x12, 0x5b, 0x0a,
	0x10, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69,
	0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x33, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x93, 0x01, 0x0a, 0x24, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x69, 0x69, 0x64, 0x12, 0x57, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0x97, 0x01, 0x0a, 0x26, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x69, 0x64, 0x12,
	0x59, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x6f,
	0x64, 0x79, 0x56, 0x33, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x27, 0x0a, 0x25, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x1e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x61, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x56, 0x32, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x85, 0x01, 0x0a, 0x20, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x56, 0x33, 0x12, 0x61,
	0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x33, 0x52, 0x11,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x22, 0x8d, 0x01, 0x0a, 0x21, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x69, 0x64, 0x12, 0x54, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0x91, 0x01, 0x0a, 0x23, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x69, 0x64, 0x12, 0x56, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x56, 0x33, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x24, 0x0a, 0x22, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7f, 0x0a, 0x20, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x5b, 0x0a, 0x10, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x32, 0x52, 0x0f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x81, 0x01, 0x0a,
	0x22, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x56, 0x33, 0x12, 0x5b, 0x0a, 0x10, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x33, 0x52,
	0x0f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x22, 0x91, 0x01, 0x0a, 0x23, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x22, 0x93, 0x01, 0x0a, 0x25, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69,
	0x69, 0x64, 0x12, 0x56, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x26, 0x0a, 0x24, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x59, 0x0a, 0x23, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x97, 0x01,
	0x0a, 0x26, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x29, 0x0a, 0x27, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x24, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x61, 0x0a, 0x12, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69,
	0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x32, 0x52, 0x11, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x99,
	0x01, 0x0a, 0x27, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x69, 0x64, 0x12, 0x5a,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e,
	0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x8b, 0x01, 0x0a, 0x26, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x65,
	0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42,
	0x6f, 0x64, 0x79, 0x56, 0x33, 0x12, 0x61, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x56, 0x33, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x9d, 0x01, 0x0a, 0x29, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x65, 0x67, 0x6f, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x6f, 0x64, 0x79,
	0x56, 0x33, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x2a, 0x0a, 0x28, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x65, 0x67, 0x6f, 0x74,
	0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x25, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52, 0x4c, 0x22, 0x28, 0x0a, 0x26, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65,
	0x63, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x0a, 0x22, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x25, 0x0a, 0x23, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e,
	0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74,
	0x0a, 0x24, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x52,
	0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x55, 0x52, 0x4c, 0x22, 0x27, 0x0a, 0x25, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0x0a,
	0x27, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x28, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xb8, 0x01, 0x0a, 0x1f, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x79, 0x5f, 0x64, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x79, 0x44, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x68, 0x65, 0x69, 0x72, 0x5f, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x68, 0x65, 0x69, 0x72, 0x44, 0x69, 0x64, 0x12, 0x61, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x32, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x7b, 0x0a, 0x22, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x55, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x41, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xba, 0x01, 0x0a, 0x21, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x56, 0x33, 0x12, 0x15,
	0x0a, 0x06, 0x6d, 0x79, 0x5f, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x79, 0x44, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x64,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x65, 0x69, 0x72, 0x44,
	0x69, 0x64, 0x12, 0x61, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x56, 0x33, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x7f, 0x0a, 0x24, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x12, 0x57, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x56, 0x33,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x39, 0x0a, 0x23, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x69,
	0x64, 0x22, 0xb4, 0x01, 0x0a, 0x1c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x79, 0x5f, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x79, 0x44, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x65,
	0x69, 0x72, 0x5f, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68,
	0x65, 0x69, 0x72, 0x44, 0x69, 0x64, 0x12, 0x60, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x7e, 0x0a, 0x1f, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x10, 0x6f,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x32, 0x52, 0x0f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0xb1, 0x01, 0x0a, 0x1e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x56, 0x33, 0x12, 0x15, 0x0a, 0x06, 0x6d,
	0x79, 0x5f, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x79, 0x44,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x64, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x65, 0x69, 0x72, 0x44, 0x69, 0x64, 0x12,
	0x5b, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x32, 0x52, 0x0f, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x79, 0x0a, 0x21,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56,
	0x33, 0x12, 0x54, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x56,
	0x33, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x36, 0x0a, 0x20, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x66,
	0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x69, 0x64, 0x22,
	0xb7, 0x01, 0x0a, 0x1e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x79, 0x5f, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x79, 0x44, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x65,
	0x69, 0x72, 0x5f, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68,
	0x65, 0x69, 0x72, 0x44, 0x69, 0x64, 0x12, 0x61, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x56, 0x32, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x79, 0x0a, 0x21, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x22, 0xb9, 0x01, 0x0a, 0x20, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x56, 0x33, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x79, 0x5f,
	0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x79, 0x44, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x65, 0x69, 0x72, 0x5f, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x65, 0x69, 0x72, 0x44, 0x69, 0x64, 0x12, 0x61, 0x0a,
	0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x33, 0x52, 0x11, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x22, 0x7d, 0x0a, 0x23, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x12, 0x56, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x56, 0x33, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22,
	0x38, 0x0a, 0x22, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69, 0x69, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x1a, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x72, 0x0a,
	0x1e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x50, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0x3f, 0x0a, 0x29, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x69, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x69,
	0x69, 0x64, 0x22, 0x2c, 0x0a, 0x2a, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x99, 0x1b, 0x0a, 0x19, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x8e,
	0x01, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x94, 0x01, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x41, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x53, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x42, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x56, 0x33, 0x12, 0x43, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x1a, 0x42, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65,
	0x6e, 0x64, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x9d, 0x01, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x12, 0x44, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xa1, 0x01, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x56, 0x33, 0x12, 0x46, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x1a, 0x45, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9a, 0x01, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x9e, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x56, 0x33, 0x12, 0x45, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x1a, 0x44, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xa3, 0x01, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x46, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa7, 0x01, 0x0a, 0x10, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x33, 0x12, 0x48,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x1a, 0x47, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xac, 0x01, 0x0a, 0x11, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x49, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x65, 0x67, 0x6f,
	0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xb0, 0x01, 0x0a, 0x13, 0x6e, 0x65, 0x67, 0x6f, 0x74, 0x69, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x56, 0x33, 0x12, 0x4b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x65, 0x67,
	0x6f, 0x74, 0x69, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x1a, 0x4a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69,
	0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4e, 0x65, 0x67, 0x6f, 0x74, 0x69,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa6, 0x01, 0x0a, 0x0f, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x47, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x6c,
	0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x48, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9a,
	0x01, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x43,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9e, 0x01, 0x0a, 0x0d,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x56, 0x33, 0x12, 0x45, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x56, 0x33, 0x1a, 0x44, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb2, 0x01, 0x0a,
	0x13, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x4b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x4c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x9d, 0x01, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x12, 0x44, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x6c, 0x69,
	0x6e, 0x65, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xa0, 0x01, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x45, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xa4, 0x01, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x12, 0x47, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56,
	0x33, 0x1a, 0x46, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa3, 0x01, 0x0a, 0x0e,
	0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xa9, 0x01, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x48, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x49, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xac, 0x01,
	0x0a, 0x11, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x12, 0x49, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x44, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x39, 0x5a, 0x37,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x68, 0x61, 0x74, 0x74,
	0x69, 0x2f, 0x47, 0x53, 0x53, 0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x64, 0x2f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_did_issuecredential_services_issuecredential_proto_rawDescOnce sync.Once
	file_api_did_issuecredential_services_issuecredential_proto_rawDescData = file_api_did_issuecredential_services_issuecredential_proto_rawDesc
)

func file_api_did_issuecredential_services_issuecredential_proto_rawDescGZIP() []byte {
	file_api_did_issuecredential_services_issuecredential_proto_rawDescOnce.Do(func() {
		file_api_did_issuecredential_services_issuecredential_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_did_issuecredential_services_issuecredential_proto_rawDescData)
	})
	return file_api_did_issuecredential_services_issuecredential_proto_rawDescData
}

var file_api_did_issuecredential_services_issuecredential_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_api_did_issuecredential_services_issuecredential_proto_goTypes = []interface{}{
	(*IssueCredentialAcceptProposalBody)(nil),          // 0: api.did.issuecredential.services.IssueCredentialAcceptProposalBody
	(*IssueCredentialAcceptProposalBodyV3)(nil),        // 1: api.did.issuecredential.services.IssueCredentialAcceptProposalBodyV3
	(*IssueCredentialAcceptProposalRequest)(nil),       // 2: api.did.issuecredential.services.IssueCredentialAcceptProposalRequest
	(*IssueCredentialAcceptProposalRequestV3)(nil),     // 3: api.did.issuecredential.services.IssueCredentialAcceptProposalRequestV3
	(*IssueCredentialAcceptProposalResponse)(nil),      // 4: api.did.issuecredential.services.IssueCredentialAcceptProposalResponse
	(*IssueCredentialAcceptOfferBody)(nil),             // 5: api.did.issuecredential.services.IssueCredentialAcceptOfferBody
	(*IssueCredentialAcceptOfferBodyV3)(nil),           // 6: api.did.issuecredential.services.IssueCredentialAcceptOfferBodyV3
	(*IssueCredentialAcceptOfferRequest)(nil),          // 7: api.did.issuecredential.services.IssueCredentialAcceptOfferRequest
	(*IssueCredentialAcceptOfferRequestV3)(nil),        // 8: api.did.issuecredential.services.IssueCredentialAcceptOfferRequestV3
	(*IssueCredentialAcceptOfferResponse)(nil),         // 9: api.did.issuecredential.services.IssueCredentialAcceptOfferResponse
	(*IssueCredentialAcceptRequestBody)(nil),           // 10: api.did.issuecredential.services.IssueCredentialAcceptRequestBody
	(*IssueCredentialAcceptRequestBodyV3)(nil),         // 11: api.did.issuecredential.services.IssueCredentialAcceptRequestBodyV3
	(*IssueCredentialAcceptRequestRequest)(nil),        // 12: api.did.issuecredential.services.IssueCredentialAcceptRequestRequest
	(*IssueCredentialAcceptRequestRequestV3)(nil),      // 13: api.did.issuecredential.services.IssueCredentialAcceptRequestRequestV3
	(*IssueCredentialAcceptRequestResponse)(nil),       // 14: api.did.issuecredential.services.IssueCredentialAcceptRequestResponse
	(*IssueCredentialAcceptCredentialBody)(nil),        // 15: api.did.issuecredential.services.IssueCredentialAcceptCredentialBody
	(*IssueCredentialAcceptCredentialRequest)(nil),     // 16: api.did.issuecredential.services.IssueCredentialAcceptCredentialRequest
	(*IssueCredentialAcceptCredentialResponse)(nil),    // 17: api.did.issuecredential.services.IssueCredentialAcceptCredentialResponse
	(*IssueCredentialNegotiateProposalBody)(nil),       // 18: api.did.issuecredential.services.IssueCredentialNegotiateProposalBody
	(*IssueCredentialNegotiateProposalRequest)(nil),    // 19: api.did.issuecredential.services.IssueCredentialNegotiateProposalRequest
	(*IssueCredentialNegotiateProposalBodyV3)(nil),     // 20: api.did.issuecredential.services.IssueCredentialNegotiateProposalBodyV3
	(*IssueCredentialNegotiateProposalRequestV3)(nil),  // 21: api.did.issuecredential.services.IssueCredentialNegotiateProposalRequestV3
	(*IssueCredentialNegotiateProposalResponse)(nil),   // 22: api.did.issuecredential.services.IssueCredentialNegotiateProposalResponse
	(*IssueCredentialDeclineProposalRequest)(nil),      // 23: api.did.issuecredential.services.IssueCredentialDeclineProposalRequest
	(*IssueCredentialDeclineProposalResponse)(nil),     // 24: api.did.issuecredential.services.IssueCredentialDeclineProposalResponse
	(*IssueCredentialDeclineOfferRequest)(nil),         // 25: api.did.issuecredential.services.IssueCredentialDeclineOfferRequest
	(*IssueCredentialDeclineOfferResponse)(nil),        // 26: api.did.issuecredential.services.IssueCredentialDeclineOfferResponse
	(*IssueCredentialDeclineRequestRequest)(nil),       // 27: api.did.issuecredential.services.IssueCredentialDeclineRequestRequest
	(*IssueCredentialDeclineRequestResponse)(nil),      // 28: api.did.issuecredential.services.IssueCredentialDeclineRequestResponse
	(*IssueCredentialDeclineCredentialRequest)(nil),    // 29: api.did.issuecredential.services.IssueCredentialDeclineCredentialRequest
	(*IssueCredentialDeclineCredentialResponse)(nil),   // 30: api.did.issuecredential.services.IssueCredentialDeclineCredentialResponse
	(*IssueCredentialSendProposalBody)(nil),            // 31: api.did.issuecredential.services.IssueCredentialSendProposalBody
	(*IssueCredentialSendProposalRequest)(nil),         // 32: api.did.issuecredential.services.IssueCredentialSendProposalRequest
	(*IssueCredentialSendProposalBodyV3)(nil),          // 33: api.did.issuecredential.services.IssueCredentialSendProposalBodyV3
	(*IssueCredentialSendProposalRequestV3)(nil),       // 34: api.did.issuecredential.services.IssueCredentialSendProposalRequestV3
	(*IssueCredentialSendProposalResponse)(nil),        // 35: api.did.issuecredential.services.IssueCredentialSendProposalResponse
	(*IssueCredentialSendOfferBody)(nil),               // 36: api.did.issuecredential.services.IssueCredentialSendOfferBody
	(*IssueCredentialSendOfferRequest)(nil),            // 37: api.did.issuecredential.services.IssueCredentialSendOfferRequest
	(*IssueCredentialSendOfferBodyV3)(nil),             // 38: api.did.issuecredential.services.IssueCredentialSendOfferBodyV3
	(*IssueCredentialSendOfferRequestV3)(nil),          // 39: api.did.issuecredential.services.IssueCredentialSendOfferRequestV3
	(*IssueCredentialSendOfferResponse)(nil),           // 40: api.did.issuecredential.services.IssueCredentialSendOfferResponse
	(*IssueCredentialSendRequestBody)(nil),             // 41: api.did.issuecredential.services.IssueCredentialSendRequestBody
	(*IssueCredentialSendRequestRequest)(nil),          // 42: api.did.issuecredential.services.IssueCredentialSendRequestRequest
	(*IssueCredentialSendRequestBodyV3)(nil),           // 43: api.did.issuecredential.services.IssueCredentialSendRequestBodyV3
	(*IssueCredentialSendRequestRequestV3)(nil),        // 44: api.did.issuecredential.services.IssueCredentialSendRequestRequestV3
	(*IssueCredentialSendRequestResponse)(nil),         // 45: api.did.issuecredential.services.IssueCredentialSendRequestResponse
	(*IssueCredentialActionsRequest)(nil),              // 46: api.did.issuecredential.services.IssueCredentialActionsRequest
	(*IssueCredentialActionsBody)(nil),                 // 47: api.did.issuecredential.services.IssueCredentialActionsBody
	(*IssueCredentialActionsResponse)(nil),             // 48: api.did.issuecredential.services.IssueCredentialActionsResponse
	(*IssueCredentialAcceptProblemReportRequest)(nil),  // 49: api.did.issuecredential.services.IssueCredentialAcceptProblemReportRequest
	(*IssueCredentialAcceptProblemReportResponse)(nil), // 50: api.did.issuecredential.services.IssueCredentialAcceptProblemReportResponse
	(*types.OfferCredentialV2)(nil),                    // 51: api.did.issuecredential.types.OfferCredentialV2
	(*types.OfferCredentialV3)(nil),                    // 52: api.did.issuecredential.types.OfferCredentialV3
	(*types.RequestCredentialV2)(nil),                  // 53: api.did.issuecredential.types.RequestCredentialV2
	(*types.RequestCredentialV3)(nil),                  // 54: api.did.issuecredential.types.RequestCredentialV3
	(*types.IssueCredentialV2)(nil),                    // 55: api.did.issuecredential.types.IssueCredentialV2
	(*types.IssueCredentialV3)(nil),                    // 56: api.did.issuecredential.types.IssueCredentialV3
	(*types.ProposeCredentialV2)(nil),                  // 57: api.did.issuecredential.types.ProposeCredentialV2
	(*types.ProposeCredentialV3)(nil),                  // 58: api.did.issuecredential.types.ProposeCredentialV3
	(*types.GenericOfferCredential)(nil),               // 59: api.did.issuecredential.types.GenericOfferCredential
	(*types1.Action)(nil),                              // 60: api.did.doc.types.Action
}
var file_api_did_issuecredential_services_issuecredential_proto_depIdxs = []int32{
	51, // 0: api.did.issuecredential.services.IssueCredentialAcceptProposalBody.offer_credential:type_name -> api.did.issuecredential.types.OfferCredentialV2
	52, // 1: api.did.issuecredential.services.IssueCredentialAcceptProposalBodyV3.offer_credential:type_name -> api.did.issuecredential.types.OfferCredentialV3
	0,  // 2: api.did.issuecredential.services.IssueCredentialAcceptProposalRequest.body:type_name -> api.did.issuecredential.services.IssueCredentialAcceptProposalBody
	1,  // 3: api.did.issuecredential.services.IssueCredentialAcceptProposalRequestV3.body:type_name -> api.did.issuecredential.services.IssueCredentialAcceptProposalBodyV3
	53, // 4: api.did.issuecredential.services.IssueCredentialAcceptOfferBody.request_credential:type_name -> api.did.issuecredential.types.RequestCredentialV2
	54, // 5: api.did.issuecredential.services.IssueCredentialAcceptOfferBodyV3.request_credential:type_name -> api.did.issuecredential.types.RequestCredentialV3
	5,  // 6: api.did.issuecredential.services.IssueCredentialAcceptOfferRequest.body:type_name -> api.did.issuecredential.services.IssueCredentialAcceptOfferBody
	6,  // 7: api.did.issuecredential.services.IssueCredentialAcceptOfferRequestV3.body:type_name -> api.did.issuecredential.services.IssueCredentialAcceptOfferBodyV3
	55, // 8: api.did.issuecredential.services.IssueCredentialAcceptRequestBody.issue_credential:type_name -> api.did.issuecredential.types.IssueCredentialV2
	56, // 9: api.did.issuecredential.services.IssueCredentialAcceptRequestBodyV3.issue_credential:type_name -> api.did.issuecredential.types.IssueCredentialV3
	10, // 10: api.did.issuecredential.services.IssueCredentialAcceptRequestRequest.body:type_name -> api.did.issuecredential.services.IssueCredentialAcceptRequestBody
	10, // 11: api.did.issuecredential.services.IssueCredentialAcceptRequestRequestV3.body:type_name -> api.did.issuecredential.services.IssueCredentialAcceptRequestBody
	15, // 12: api.did.issuecredential.services.IssueCredentialAcceptCredentialRequest.body:type_name -> api.did.issuecredential.services.IssueCredentialAcceptCredentialBody
	57, // 13: api.did.issuecredential.services.IssueCredentialNegotiateProposalBody.propose_credential:type_name -> api.did.issuecredential.types.ProposeCredentialV2
	18, // 14: api.did.issuecredential.services.IssueCredentialNegotiateProposalRequest.body:type_name -> api.did.issuecredential.services.IssueCredentialNegotiateProposalBody
	58, // 15: api.did.issuecredential.services.IssueCredentialNegotiateProposalBodyV3.propose_credential:type_name -> api.did.issuecredential.types.ProposeCredentialV3
	20, // 16: api.did.issuecredential.services.IssueCredentialNegotiateProposalRequestV3.body:type_name -> api.did.issuecredential.services.IssueCredentialNegotiateProposalBodyV3
	57, // 17: api.did.issuecredential.services.IssueCredentialSendProposalBody.propose_credential:type_name -> api.did.issuecredential.types.ProposeCredentialV2
	31, // 18: api.did.issuecredential.services.IssueCredentialSendProposalRequest.body:type_name -> api.did.issuecredential.services.IssueCredentialSendProposalBody
	58, // 19: api.did.issuecredential.services.IssueCredentialSendProposalBodyV3.propose_credential:type_name -> api.did.issuecredential.types.ProposeCredentialV3
	33, // 20: api.did.issuecredential.services.IssueCredentialSendProposalRequestV3.body:type_name -> api.did.issuecredential.services.IssueCredentialSendProposalBodyV3
	59, // 21: api.did.issuecredential.services.IssueCredentialSendOfferBody.offer_credential:type_name -> api.did.issuecredential.types.GenericOfferCredential
	51, // 22: api.did.issuecredential.services.IssueCredentialSendOfferRequest.offer_credential:type_name -> api.did.issuecredential.types.OfferCredentialV2
	51, // 23: api.did.issuecredential.services.IssueCredentialSendOfferBodyV3.offer_credential:type_name -> api.did.issuecredential.types.OfferCredentialV2
	38, // 24: api.did.issuecredential.services.IssueCredentialSendOfferRequestV3.body:type_name -> api.did.issuecredential.services.IssueCredentialSendOfferBodyV3
	53, // 25: api.did.issuecredential.services.IssueCredentialSendRequestBody.request_credential:type_name -> api.did.issuecredential.types.RequestCredentialV2
	41, // 26: api.did.issuecredential.services.IssueCredentialSendRequestRequest.body:type_name -> api.did.issuecredential.services.IssueCredentialSendRequestBody
	54, // 27: api.did.issuecredential.services.IssueCredentialSendRequestBodyV3.request_credential:type_name -> api.did.issuecredential.types.RequestCredentialV3
	43, // 28: api.did.issuecredential.services.IssueCredentialSendRequestRequestV3.body:type_name -> api.did.issuecredential.services.IssueCredentialSendRequestBodyV3
	60, // 29: api.did.issuecredential.services.IssueCredentialActionsBody.actions:type_name -> api.did.doc.types.Action
	47, // 30: api.did.issuecredential.services.IssueCredentialActionsResponse.body:type_name -> api.did.issuecredential.services.IssueCredentialActionsBody
	46, // 31: api.did.issuecredential.services.IssueCredentialController.actions:input_type -> api.did.issuecredential.services.IssueCredentialActionsRequest
	37, // 32: api.did.issuecredential.services.IssueCredentialController.sendOffer:input_type -> api.did.issuecredential.services.IssueCredentialSendOfferRequest
	39, // 33: api.did.issuecredential.services.IssueCredentialController.sendOfferV3:input_type -> api.did.issuecredential.services.IssueCredentialSendOfferRequestV3
	32, // 34: api.did.issuecredential.services.IssueCredentialController.sendProposal:input_type -> api.did.issuecredential.services.IssueCredentialSendProposalRequest
	34, // 35: api.did.issuecredential.services.IssueCredentialController.sendProposalV3:input_type -> api.did.issuecredential.services.IssueCredentialSendProposalRequestV3
	42, // 36: api.did.issuecredential.services.IssueCredentialController.sendRequest:input_type -> api.did.issuecredential.services.IssueCredentialSendRequestRequest
	44, // 37: api.did.issuecredential.services.IssueCredentialController.sendRequestV3:input_type -> api.did.issuecredential.services.IssueCredentialSendRequestRequestV3
	2,  // 38: api.did.issuecredential.services.IssueCredentialController.acceptProposal:input_type -> api.did.issuecredential.services.IssueCredentialAcceptProposalRequest
	3,  // 39: api.did.issuecredential.services.IssueCredentialController.acceptProposalV3:input_type -> api.did.issuecredential.services.IssueCredentialAcceptProposalRequestV3
	19, // 40: api.did.issuecredential.services.IssueCredentialController.negotiateProposal:input_type -> api.did.issuecredential.services.IssueCredentialNegotiateProposalRequest
	21, // 41: api.did.issuecredential.services.IssueCredentialController.negotiateProposalV3:input_type -> api.did.issuecredential.services.IssueCredentialNegotiateProposalRequestV3
	23, // 42: api.did.issuecredential.services.IssueCredentialController.declineProposal:input_type -> api.did.issuecredential.services.IssueCredentialDeclineProposalRequest
	7,  // 43: api.did.issuecredential.services.IssueCredentialController.acceptOffer:input_type -> api.did.issuecredential.services.IssueCredentialAcceptOfferRequest
	8,  // 44: api.did.issuecredential.services.IssueCredentialController.acceptOfferV3:input_type -> api.did.issuecredential.services.IssueCredentialAcceptOfferRequestV3
	49, // 45: api.did.issuecredential.services.IssueCredentialController.acceptProblemReport:input_type -> api.did.issuecredential.services.IssueCredentialAcceptProblemReportRequest
	25, // 46: api.did.issuecredential.services.IssueCredentialController.declineOffer:input_type -> api.did.issuecredential.services.IssueCredentialDeclineOfferRequest
	12, // 47: api.did.issuecredential.services.IssueCredentialController.acceptRequest:input_type -> api.did.issuecredential.services.IssueCredentialAcceptRequestRequest
	13, // 48: api.did.issuecredential.services.IssueCredentialController.acceptRequestV3:input_type -> api.did.issuecredential.services.IssueCredentialAcceptRequestRequestV3
	27, // 49: api.did.issuecredential.services.IssueCredentialController.declineRequest:input_type -> api.did.issuecredential.services.IssueCredentialDeclineRequestRequest
	16, // 50: api.did.issuecredential.services.IssueCredentialController.acceptCredential:input_type -> api.did.issuecredential.services.IssueCredentialAcceptCredentialRequest
	29, // 51: api.did.issuecredential.services.IssueCredentialController.declineCredential:input_type -> api.did.issuecredential.services.IssueCredentialDeclineCredentialRequest
	48, // 52: api.did.issuecredential.services.IssueCredentialController.actions:output_type -> api.did.issuecredential.services.IssueCredentialActionsResponse
	40, // 53: api.did.issuecredential.services.IssueCredentialController.sendOffer:output_type -> api.did.issuecredential.services.IssueCredentialSendOfferResponse
	40, // 54: api.did.issuecredential.services.IssueCredentialController.sendOfferV3:output_type -> api.did.issuecredential.services.IssueCredentialSendOfferResponse
	35, // 55: api.did.issuecredential.services.IssueCredentialController.sendProposal:output_type -> api.did.issuecredential.services.IssueCredentialSendProposalResponse
	35, // 56: api.did.issuecredential.services.IssueCredentialController.sendProposalV3:output_type -> api.did.issuecredential.services.IssueCredentialSendProposalResponse
	45, // 57: api.did.issuecredential.services.IssueCredentialController.sendRequest:output_type -> api.did.issuecredential.services.IssueCredentialSendRequestResponse
	45, // 58: api.did.issuecredential.services.IssueCredentialController.sendRequestV3:output_type -> api.did.issuecredential.services.IssueCredentialSendRequestResponse
	4,  // 59: api.did.issuecredential.services.IssueCredentialController.acceptProposal:output_type -> api.did.issuecredential.services.IssueCredentialAcceptProposalResponse
	4,  // 60: api.did.issuecredential.services.IssueCredentialController.acceptProposalV3:output_type -> api.did.issuecredential.services.IssueCredentialAcceptProposalResponse
	22, // 61: api.did.issuecredential.services.IssueCredentialController.negotiateProposal:output_type -> api.did.issuecredential.services.IssueCredentialNegotiateProposalResponse
	22, // 62: api.did.issuecredential.services.IssueCredentialController.negotiateProposalV3:output_type -> api.did.issuecredential.services.IssueCredentialNegotiateProposalResponse
	24, // 63: api.did.issuecredential.services.IssueCredentialController.declineProposal:output_type -> api.did.issuecredential.services.IssueCredentialDeclineProposalResponse
	9,  // 64: api.did.issuecredential.services.IssueCredentialController.acceptOffer:output_type -> api.did.issuecredential.services.IssueCredentialAcceptOfferResponse
	9,  // 65: api.did.issuecredential.services.IssueCredentialController.acceptOfferV3:output_type -> api.did.issuecredential.services.IssueCredentialAcceptOfferResponse
	50, // 66: api.did.issuecredential.services.IssueCredentialController.acceptProblemReport:output_type -> api.did.issuecredential.services.IssueCredentialAcceptProblemReportResponse
	26, // 67: api.did.issuecredential.services.IssueCredentialController.declineOffer:output_type -> api.did.issuecredential.services.IssueCredentialDeclineOfferResponse
	14, // 68: api.did.issuecredential.services.IssueCredentialController.acceptRequest:output_type -> api.did.issuecredential.services.IssueCredentialAcceptRequestResponse
	14, // 69: api.did.issuecredential.services.IssueCredentialController.acceptRequestV3:output_type -> api.did.issuecredential.services.IssueCredentialAcceptRequestResponse
	28, // 70: api.did.issuecredential.services.IssueCredentialController.declineRequest:output_type -> api.did.issuecredential.services.IssueCredentialDeclineRequestResponse
	17, // 71: api.did.issuecredential.services.IssueCredentialController.acceptCredential:output_type -> api.did.issuecredential.services.IssueCredentialAcceptCredentialResponse
	30, // 72: api.did.issuecredential.services.IssueCredentialController.declineCredential:output_type -> api.did.issuecredential.services.IssueCredentialDeclineCredentialResponse
	52, // [52:73] is the sub-list for method output_type
	31, // [31:52] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_api_did_issuecredential_services_issuecredential_proto_init() }
func file_api_did_issuecredential_services_issuecredential_proto_init() {
	if File_api_did_issuecredential_services_issuecredential_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialAcceptProposalBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialAcceptProposalBodyV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialAcceptProposalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialAcceptProposalRequestV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialAcceptProposalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialAcceptOfferBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialAcceptOfferBodyV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialAcceptOfferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialAcceptOfferRequestV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialAcceptOfferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialAcceptRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialAcceptRequestBodyV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialAcceptRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialAcceptRequestRequestV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialAcceptRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialAcceptCredentialBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialAcceptCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialAcceptCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialNegotiateProposalBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialNegotiateProposalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialNegotiateProposalBodyV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialNegotiateProposalRequestV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialNegotiateProposalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialDeclineProposalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialDeclineProposalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialDeclineOfferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialDeclineOfferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialDeclineRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialDeclineRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialDeclineCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialDeclineCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialSendProposalBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialSendProposalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialSendProposalBodyV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialSendProposalRequestV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialSendProposalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialSendOfferBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialSendOfferRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialSendOfferBodyV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialSendOfferRequestV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialSendOfferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialSendRequestBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialSendRequestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialSendRequestBodyV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialSendRequestRequestV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialSendRequestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialActionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialActionsBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialActionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialAcceptProblemReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_services_issuecredential_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialAcceptProblemReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_did_issuecredential_services_issuecredential_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_did_issuecredential_services_issuecredential_proto_goTypes,
		DependencyIndexes: file_api_did_issuecredential_services_issuecredential_proto_depIdxs,
		MessageInfos:      file_api_did_issuecredential_services_issuecredential_proto_msgTypes,
	}.Build()
	File_api_did_issuecredential_services_issuecredential_proto = out.File
	file_api_did_issuecredential_services_issuecredential_proto_rawDesc = nil
	file_api_did_issuecredential_services_issuecredential_proto_goTypes = nil
	file_api_did_issuecredential_services_issuecredential_proto_depIdxs = nil
}
