// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/did/issuecredential/services/rfc0593.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Rfc0593ControllerClient is the client API for Rfc0593Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Rfc0593ControllerClient interface {
	// GetCredentialSpec swagger:route POST /rfc0593/get-spec get-spec getCredentialSpecRequest
	//
	// Extracts an RFC0593 credential spec from an applicable issue-credential message.
	//
	// Responses:
	//    default: genericError
	//        200: getCredentialSpecResponse
	GetCredentialSpec(ctx context.Context, in *GetCredentialSpecRequest, opts ...grpc.CallOption) (*GetCredentialSpecResponse, error)
	// IssueCredential swagger:route POST /rfc0593/issue-credential issue-credential issueCredentialRequest
	//
	// Issues a credential based on a RFC0593 credential spec.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialResponse
	IssueCredential(ctx context.Context, in *IssueCredentialRequest, opts ...grpc.CallOption) (*IssueCredentialResponse, error)
	// VerifyCredential swagger:route POST /rfc0593/verify-credential verify-credential verifyCredentialRequest
	//
	// Verifies a credential against a credential spec.
	//
	// Responses:
	//    default: genericError
	//        200: verifyCredentialResponse
	VerifyCredential(ctx context.Context, in *VerifyCredentialRequest, opts ...grpc.CallOption) (*VerifyCredentialResponse, error)
}

type rfc0593ControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewRfc0593ControllerClient(cc grpc.ClientConnInterface) Rfc0593ControllerClient {
	return &rfc0593ControllerClient{cc}
}

func (c *rfc0593ControllerClient) GetCredentialSpec(ctx context.Context, in *GetCredentialSpecRequest, opts ...grpc.CallOption) (*GetCredentialSpecResponse, error) {
	out := new(GetCredentialSpecResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.Rfc0593Controller/getCredentialSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfc0593ControllerClient) IssueCredential(ctx context.Context, in *IssueCredentialRequest, opts ...grpc.CallOption) (*IssueCredentialResponse, error) {
	out := new(IssueCredentialResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.Rfc0593Controller/issueCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfc0593ControllerClient) VerifyCredential(ctx context.Context, in *VerifyCredentialRequest, opts ...grpc.CallOption) (*VerifyCredentialResponse, error) {
	out := new(VerifyCredentialResponse)
	err := c.cc.Invoke(ctx, "/api.did.issuecredential.services.Rfc0593Controller/verifyCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Rfc0593ControllerServer is the server API for Rfc0593Controller service.
// All implementations must embed UnimplementedRfc0593ControllerServer
// for forward compatibility
type Rfc0593ControllerServer interface {
	// GetCredentialSpec swagger:route POST /rfc0593/get-spec get-spec getCredentialSpecRequest
	//
	// Extracts an RFC0593 credential spec from an applicable issue-credential message.
	//
	// Responses:
	//    default: genericError
	//        200: getCredentialSpecResponse
	GetCredentialSpec(context.Context, *GetCredentialSpecRequest) (*GetCredentialSpecResponse, error)
	// IssueCredential swagger:route POST /rfc0593/issue-credential issue-credential issueCredentialRequest
	//
	// Issues a credential based on a RFC0593 credential spec.
	//
	// Responses:
	//    default: genericError
	//        200: issueCredentialResponse
	IssueCredential(context.Context, *IssueCredentialRequest) (*IssueCredentialResponse, error)
	// VerifyCredential swagger:route POST /rfc0593/verify-credential verify-credential verifyCredentialRequest
	//
	// Verifies a credential against a credential spec.
	//
	// Responses:
	//    default: genericError
	//        200: verifyCredentialResponse
	VerifyCredential(context.Context, *VerifyCredentialRequest) (*VerifyCredentialResponse, error)
	mustEmbedUnimplementedRfc0593ControllerServer()
}

// UnimplementedRfc0593ControllerServer must be embedded to have forward compatible implementations.
type UnimplementedRfc0593ControllerServer struct {
}

func (UnimplementedRfc0593ControllerServer) GetCredentialSpec(context.Context, *GetCredentialSpecRequest) (*GetCredentialSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialSpec not implemented")
}
func (UnimplementedRfc0593ControllerServer) IssueCredential(context.Context, *IssueCredentialRequest) (*IssueCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueCredential not implemented")
}
func (UnimplementedRfc0593ControllerServer) VerifyCredential(context.Context, *VerifyCredentialRequest) (*VerifyCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCredential not implemented")
}
func (UnimplementedRfc0593ControllerServer) mustEmbedUnimplementedRfc0593ControllerServer() {}

// UnsafeRfc0593ControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Rfc0593ControllerServer will
// result in compilation errors.
type UnsafeRfc0593ControllerServer interface {
	mustEmbedUnimplementedRfc0593ControllerServer()
}

func RegisterRfc0593ControllerServer(s grpc.ServiceRegistrar, srv Rfc0593ControllerServer) {
	s.RegisterService(&Rfc0593Controller_ServiceDesc, srv)
}

func _Rfc0593Controller_GetCredentialSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Rfc0593ControllerServer).GetCredentialSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.Rfc0593Controller/getCredentialSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Rfc0593ControllerServer).GetCredentialSpec(ctx, req.(*GetCredentialSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rfc0593Controller_IssueCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Rfc0593ControllerServer).IssueCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.Rfc0593Controller/issueCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Rfc0593ControllerServer).IssueCredential(ctx, req.(*IssueCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rfc0593Controller_VerifyCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Rfc0593ControllerServer).VerifyCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.issuecredential.services.Rfc0593Controller/verifyCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Rfc0593ControllerServer).VerifyCredential(ctx, req.(*VerifyCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rfc0593Controller_ServiceDesc is the grpc.ServiceDesc for Rfc0593Controller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rfc0593Controller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.did.issuecredential.services.Rfc0593Controller",
	HandlerType: (*Rfc0593ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCredentialSpec",
			Handler:    _Rfc0593Controller_GetCredentialSpec_Handler,
		},
		{
			MethodName: "issueCredential",
			Handler:    _Rfc0593Controller_IssueCredential_Handler,
		},
		{
			MethodName: "verifyCredential",
			Handler:    _Rfc0593Controller_VerifyCredential_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/did/issuecredential/services/rfc0593.proto",
}
