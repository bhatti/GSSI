syntax = "proto3";

package api.did.issuecredential.types;

option go_package = "github.com/bhatti/GSSI/api/did/issuecredential/types";
import "google/protobuf/any.proto";

import "api/vc/types/credential.proto";
import "api/did/doc/types/outofband.proto";

// GenericProposeCredential combination of V2 and V3
message GenericProposeCredential {
  string type = 1; // @type
  // Comment is an optional field that provides human readable information about this Credential Offer,
  // so the offer can be evaluated by human judgment.
  // Should follow DIDComm conventions for l10n.
  string comment = 2;
  // CredentialProposal is an optional JSON-LD object that represents
  // the credential data that the Prover wants to receive.
  PreviewCredential credential_proposal = 3;
  // Formats contains an entry for each filters~attach array entry, providing the the value of the attachment @id
  // and the verifiable credential format and version of the attachment.
  repeated Format formats = 4;
  // FiltersAttach is an array of attachments that further define the credential being proposed.
  // This might be used to clarify which formats or format versions are wanted.
  repeated api.did.doc.types.Attachment filters_attach = 5; //filters~attach
  // Optional field containing ID of the invitation which initiated this protocol.
  string invitationID = 6;
  // V3
  ProposeCredentialV3Body body = 7;
  // Attachments is an array of attachments containing the presentation in the requested format(s).
  // Accepted values for the format attribute of each attachment are provided in the per format Attachment
  // registry immediately below.
  repeated api.did.doc.types.AttachmentV2 attachments = 8;
  // Optional field containing ID of the invitation which initiated this protocol.
  string pthid = 9;
}

// ProposeCredentialV2 is an optional message sent by the potential Holder to the Issuer
// to initiate the protocol or in response to a offer-credential message when the Holder
// wants some adjustments made to the credential data offered by Issuer.
message ProposeCredentialV2 {
  string type = 1; // @type
  // Comment is an optional field that provides human readable information about this Credential Offer,
  // so the offer can be evaluated by human judgment.
  // Should follow DIDComm conventions for l10n.
  string comment = 2;
  // CredentialProposal is an optional JSON-LD object that represents
  // the credential data that the Prover wants to receive.
  PreviewCredential credential_proposal = 3;
  // Formats contains an entry for each filters~attach array entry, providing the the value of the attachment @id
  // and the verifiable credential format and version of the attachment.
  repeated Format formats = 4;
  // FiltersAttach is an array of attachments that further define the credential being proposed.
  // This might be used to clarify which formats or format versions are wanted.
  repeated api.did.doc.types.Attachment filters_attach = 5; //filters~attach
  // Optional field containing ID of the invitation which initiated this protocol.
  string invitationID = 6;
}

// ProposeCredentialV3 is an optional message sent by the potential Holder to the Issuer
// to initiate the protocol or in response to a offer-credential message when the Holder
// wants some adjustments made to the credential data offered by Issuer.
message ProposeCredentialV3 {
  string id = 1;
  string type = 2;
  ProposeCredentialV3Body body = 3;
  // Attachments is an array of attachments containing the presentation in the requested format(s).
  // Accepted values for the format attribute of each attachment are provided in the per format Attachment
  // registry immediately below.
  repeated api.did.doc.types.AttachmentV2 attachments = 4;
  // Optional field containing ID of the invitation which initiated this protocol.
  string pthid = 5;
}

// ProposeCredentialV3Body represents body for ProposeCredentialV3.
message ProposeCredentialV3Body {
  string goal_code = 1;
  string comment = 2;
  // credentialPreview is an optional JSON-LD object that represents the credential data that Prover wants to receive.
  google.protobuf.Any credential_preview = 3;
}

// Format contains the value of the attachment @id and the verifiable credential format of the attachment.
message Format {
  string attach_id = 1;
  string format = 2;
}

// GenericOfferCredential combination of V2 and V3
message GenericOfferCredential  {
  string type = 1; //@type
  // Comment is an optional field that provides human readable information about this Credential Offer,
  // so the offer can be evaluated by human judgment.
  // TODO: Should follow DIDComm conventions for l10n. [Issue #1300].
  string comment = 2;
  // CredentialPreview is a JSON-LD object that represents the credential data that Issuer is willing to issue.
  PreviewCredential credential_preview = 3;
  // Formats contains an entry for each offers~attach array entry, providing the the value
  // of the attachment @id and the verifiable credential format and version of the attachment.
  repeated Format formats = 4;
  // OffersAttach is a slice of attachments that further define the credential being offered.
  // This might be used to clarify which formats or format versions will be issued.
  repeated api.did.doc.types.Attachment offers_attach = 5; //offers~attach

  // V3
  OfferCredentialV3Body body = 6;
  // Attachments is an array of attachments containing the presentation in the requested format(s).
  // Accepted values for the format attribute of each attachment are provided in the per format Attachment
  // registry immediately below.
  repeated api.did.doc.types.AttachmentV2 attachments = 7;
}

// OfferCredentialV2 is a message sent by the Issuer to the potential Holder,
// describing the credential they intend to offer and possibly the price they expect to be paid.
// TODO: Need to add ~payment_request and ~timing.expires_time decorators [Issue #1297].
message OfferCredentialV2 {
  string type = 1; //@type
  // Comment is an optional field that provides human readable information about this Credential Offer,
  // so the offer can be evaluated by human judgment.
  // TODO: Should follow DIDComm conventions for l10n. [Issue #1300].
  string comment = 2;
  // CredentialPreview is a JSON-LD object that represents the credential data that Issuer is willing to issue.
  PreviewCredential credential_preview = 3;
  // Formats contains an entry for each offers~attach array entry, providing the the value
  // of the attachment @id and the verifiable credential format and version of the attachment.
  repeated Format formats = 4;
  // OffersAttach is a slice of attachments that further define the credential being offered.
  // This might be used to clarify which formats or format versions will be issued.
  repeated api.did.doc.types.Attachment offers_attach = 5; //offers~attach
}

// OfferCredentialV3 is a message sent by the Issuer to the potential Holder,
// describing the credential they intend to offer and possibly the price they expect to be paid.
message OfferCredentialV3 {
  string id = 1;
  string type = 2;
  OfferCredentialV3Body body = 3;
  // Attachments is an array of attachments containing the presentation in the requested format(s).
  // Accepted values for the format attribute of each attachment are provided in the per format Attachment
  // registry immediately below.
  repeated api.did.doc.types.AttachmentV2 attachments = 4;
}

// OfferCredentialV3Body represents body for OfferCredentialV3.
message OfferCredentialV3Body {
  string goal_code = 1;
  string comment = 2;
  string replacement_id = 3;
  // credentialPreview is an optional JSON-LD object that represents the credential data that Prover wants to receive.
  google.protobuf.Any credential_preview = 4;
}

// GenericRequestCredential combination of V2 and V3
message GenericRequestCredential {
  string type = 1; // @type
  // Comment is an optional field that provides human readable information about this Credential Offer,
  // so the offer can be evaluated by human judgment.
  // TODO: Should follow DIDComm conventions for l10n. [Issue #1300].
  string comment = 2;
  // Formats contains an entry for each requests~attach array entry, providing the the value
  // of the attachment @id and the verifiable credential format and version of the attachment.
  repeated Format formats = 3;
  // RequestsAttach is a slice of attachments defining the requested formats for the credential
  repeated api.did.doc.types.Attachment requests_attach = 4; //requests~attach

  // V3
  RequestCredentialV3Body body = 5;
  // Attachments is an array of attachments containing the presentation in the requested format(s).
  // Accepted values for the format attribute of each attachment are provided in the per format Attachment
  // registry immediately below.
  repeated api.did.doc.types.AttachmentV2 attachments = 6;
}


// RequestCredentialV2 is a message sent by the potential Holder to the Issuer,
// to request the issuance of a credential. Where circumstances do not require
// a preceding Offer Credential message (e.g., there is no cost to issuance
// that the Issuer needs to explain in advance, and there is no need for cryptographic negotiation),
// this message initiates the protocol.
// TODO: Need to add ~payment-receipt decorator [Issue #1298].
message RequestCredentialV2 {
  string type = 1; // @type
  // Comment is an optional field that provides human readable information about this Credential Offer,
  // so the offer can be evaluated by human judgment.
  // TODO: Should follow DIDComm conventions for l10n. [Issue #1300].
  string comment = 2;
  // Formats contains an entry for each requests~attach array entry, providing the the value
  // of the attachment @id and the verifiable credential format and version of the attachment.
  repeated Format formats = 3;
  // RequestsAttach is a slice of attachments defining the requested formats for the credential
  repeated api.did.doc.types.Attachment requests_attach = 4; //requests~attach
}

// RequestCredentialV3 is a message sent by the potential Holder to the Issuer,
// to request the issuance of a credential. Where circumstances do not require
// a preceding Offer Credential message (e.g., there is no cost to issuance
// that the Issuer needs to explain in advance, and there is no need for cryptographic negotiation),
// this message initiates the protocol.
message RequestCredentialV3 {
  string id = 1;
  string type = 2;
  RequestCredentialV3Body body = 3;
  // Attachments is an array of attachments containing the presentation in the requested format(s).
  // Accepted values for the format attribute of each attachment are provided in the per format Attachment
  // registry immediately below.
  repeated api.did.doc.types.AttachmentV2 attachments = 4;
}

// RequestCredentialV3Body represents body for RequestCredentialV3.
message RequestCredentialV3Body {
  string goal_code = 1;
  string comment = 2;
}

// GenericIssueCredential combination of V2 and V3
message GenericIssueCredential {//nolint: golint
  string type = 1; // @type
  // Comment is an optional field that provides human readable information about this Credential Offer,
  // so the offer can be evaluated by human judgment.
  // TODO: Should follow DIDComm conventions for l10n. [Issue #1300].
  string comment = 2;
  // Formats contains an entry for each credentials~attach array entry, providing the value
  // of the attachment @id and the verifiable credential format and version of the attachment.
  repeated Format formats = 3;
  // CredentialsAttach is a slice of attachments containing the issued credentials.
  repeated api.did.doc.types.Attachment credentials_attach = 4; //credentials~attach
  // WebRedirect contains optional web redirect info to be sent to holder for redirect.
  api.did.doc.types.WebRedirect web_redirect = 5; // ~web-redirect

  // V3
  IssueCredentialV3Body body = 6;
  // Attachments is an array of attachments containing the presentation in the requested format(s).
  // Accepted values for the format attribute of each attachment are provided in the per format Attachment
  // registry immediately below.
  repeated api.did.doc.types.AttachmentV2 attachments = 7;
}

// IssueCredentialV2 contains as attached payload the credentials being issued and is
// sent in response to a valid Invitation Credential message.
// TODO: Need to add ~please-ack decorator [Issue #1299].
message IssueCredentialV2 {//nolint: golint
  string type = 1; // @type
  // Comment is an optional field that provides human readable information about this Credential Offer,
  // so the offer can be evaluated by human judgment.
  // TODO: Should follow DIDComm conventions for l10n. [Issue #1300].
  string comment = 2;
  // Formats contains an entry for each credentials~attach array entry, providing the value
  // of the attachment @id and the verifiable credential format and version of the attachment.
  repeated Format formats = 3;
  // CredentialsAttach is a slice of attachments containing the issued credentials.
  repeated api.did.doc.types.Attachment credentials_attach = 4; //credentials~attach
  // WebRedirect contains optional web redirect info to be sent to holder for redirect.
  api.did.doc.types.WebRedirect web_redirect = 5; // ~web-redirect
}

// IssueCredentialV3 contains as attached payload the credentials being issued and is
// sent in response to a valid Invitation Credential message.
message IssueCredentialV3 {//nolint: golint
  string id = 1;
  string type = 2;
  IssueCredentialV3Body body = 3;
  // WebRedirect contains optional web redirect info to be sent to holder for redirect.
  api.did.doc.types.WebRedirect web_redirect = 4; // ~web-redirect
  // Attachments is an array of attachments containing the presentation in the requested format(s).
  // Accepted values for the format attribute of each attachment are provided in the per format Attachment
  // registry immediately below.
  repeated api.did.doc.types.AttachmentV2 attachments = 5;
}

// IssueCredentialV3Body represents body for IssueCredentialV3.
message IssueCredentialV3Body {//nolint: golint
  string goal_code = 1;
  string replacement_id = 2;
  string comment = 3;
}

// PreviewCredential is used to construct a preview of the data for the credential that is to be issued.
message PreviewCredential {
  string type = 1;
  repeated Attribute attributes = 2;
}

// PreviewCredentialV3 is used to construct a preview of the data for the credential that is to be issued.
message PreviewCredentialV3 {
  string id = 1;
  string type = 2;
  IssueCredentialV3Body body = 3;
}

// PreviewCredentialV3Body represents body for PreviewCredentialV3.
message PreviewCredentialV3Body {
  repeated Attribute attributes = 1;
}

// Attribute describes an attribute for a Preview Credential.
message Attribute {
  string name = 1;
  string mime_type = 2; //mime-type
  string value = 3;
}


// CredentialSpec is the attachment payload in messages conforming to the RFC0593 format.
message CredentialSpec {
  api.vc.types.VerifiableCredential credential = 1; // json.RawMessage
  CredentialSpecOptions options = 2;
}

// CredentialSpecOptions are the options for issuance of the credential.
// TODO support CredentialStatus.
message CredentialSpecOptions {
  string proofPurpose = 1;
  string domain = 2;
  string challenge = 3;
  CredentialStatus credentialStatus = 4;
  string proofType = 5;
  string created = 6;
}

// CredentialStatus is the requested status for the credential.
message CredentialStatus {
  string type = 1;
}