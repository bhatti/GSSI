// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: api/did/issuecredential/types/issuecredential.proto

package types

import (
	types "github.com/bhatti/GSSI/api/did/doc/types"
	types1 "github.com/bhatti/GSSI/api/vc/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GenericProposeCredential combination of V2 and V3
// swagger:model
type GenericProposeCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // @type
	// Comment is an optional field that provides human readable information about this Credential Offer,
	// so the offer can be evaluated by human judgment.
	// Should follow DIDComm conventions for l10n.
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	// CredentialProposal is an optional JSON-LD object that represents
	// the credential data that the Prover wants to receive.
	CredentialProposal *PreviewCredential `protobuf:"bytes,3,opt,name=credential_proposal,json=credentialProposal,proto3" json:"credential_proposal,omitempty"`
	// Formats contains an entry for each filters~attach array entry, providing the the value of the attachment @id
	// and the verifiable credential format and version of the attachment.
	Formats []*Format `protobuf:"bytes,4,rep,name=formats,proto3" json:"formats,omitempty"`
	// FiltersAttach is an array of attachments that further define the credential being proposed.
	// This might be used to clarify which formats or format versions are wanted.
	FiltersAttach []*types.Attachment `protobuf:"bytes,5,rep,name=filters_attach,json=filtersAttach,proto3" json:"filters_attach,omitempty"` //filters~attach
	// Optional field containing ID of the invitation which initiated this protocol.
	InvitationID string `protobuf:"bytes,6,opt,name=invitationID,proto3" json:"invitationID,omitempty"`
	// V3
	Body *ProposeCredentialV3Body `protobuf:"bytes,7,opt,name=body,proto3" json:"body,omitempty"`
	// Attachments is an array of attachments containing the presentation in the requested format(s).
	// Accepted values for the format attribute of each attachment are provided in the per format Attachment
	// registry immediately below.
	Attachments []*types.AttachmentV2 `protobuf:"bytes,8,rep,name=attachments,proto3" json:"attachments,omitempty"`
	// Optional field containing ID of the invitation which initiated this protocol.
	Pthid string `protobuf:"bytes,9,opt,name=pthid,proto3" json:"pthid,omitempty"`
}

func (x *GenericProposeCredential) Reset() {
	*x = GenericProposeCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericProposeCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericProposeCredential) ProtoMessage() {}

func (x *GenericProposeCredential) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericProposeCredential.ProtoReflect.Descriptor instead.
func (*GenericProposeCredential) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{0}
}

func (x *GenericProposeCredential) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GenericProposeCredential) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *GenericProposeCredential) GetCredentialProposal() *PreviewCredential {
	if x != nil {
		return x.CredentialProposal
	}
	return nil
}

func (x *GenericProposeCredential) GetFormats() []*Format {
	if x != nil {
		return x.Formats
	}
	return nil
}

func (x *GenericProposeCredential) GetFiltersAttach() []*types.Attachment {
	if x != nil {
		return x.FiltersAttach
	}
	return nil
}

func (x *GenericProposeCredential) GetInvitationID() string {
	if x != nil {
		return x.InvitationID
	}
	return ""
}

func (x *GenericProposeCredential) GetBody() *ProposeCredentialV3Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *GenericProposeCredential) GetAttachments() []*types.AttachmentV2 {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *GenericProposeCredential) GetPthid() string {
	if x != nil {
		return x.Pthid
	}
	return ""
}

// ProposeCredentialV2 is an optional message sent by the potential Holder to the Issuer
// to initiate the protocol or in response to a offer-credential message when the Holder
// wants some adjustments made to the credential data offered by Issuer.
// swagger:model
type ProposeCredentialV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // @type
	// Comment is an optional field that provides human readable information about this Credential Offer,
	// so the offer can be evaluated by human judgment.
	// Should follow DIDComm conventions for l10n.
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	// CredentialProposal is an optional JSON-LD object that represents
	// the credential data that the Prover wants to receive.
	CredentialProposal *PreviewCredential `protobuf:"bytes,3,opt,name=credential_proposal,json=credentialProposal,proto3" json:"credential_proposal,omitempty"`
	// Formats contains an entry for each filters~attach array entry, providing the the value of the attachment @id
	// and the verifiable credential format and version of the attachment.
	Formats []*Format `protobuf:"bytes,4,rep,name=formats,proto3" json:"formats,omitempty"`
	// FiltersAttach is an array of attachments that further define the credential being proposed.
	// This might be used to clarify which formats or format versions are wanted.
	FiltersAttach []*types.Attachment `protobuf:"bytes,5,rep,name=filters_attach,json=filtersAttach,proto3" json:"filters_attach,omitempty"` //filters~attach
	// Optional field containing ID of the invitation which initiated this protocol.
	InvitationID string `protobuf:"bytes,6,opt,name=invitationID,proto3" json:"invitationID,omitempty"`
}

func (x *ProposeCredentialV2) Reset() {
	*x = ProposeCredentialV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposeCredentialV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeCredentialV2) ProtoMessage() {}

func (x *ProposeCredentialV2) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeCredentialV2.ProtoReflect.Descriptor instead.
func (*ProposeCredentialV2) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{1}
}

func (x *ProposeCredentialV2) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProposeCredentialV2) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ProposeCredentialV2) GetCredentialProposal() *PreviewCredential {
	if x != nil {
		return x.CredentialProposal
	}
	return nil
}

func (x *ProposeCredentialV2) GetFormats() []*Format {
	if x != nil {
		return x.Formats
	}
	return nil
}

func (x *ProposeCredentialV2) GetFiltersAttach() []*types.Attachment {
	if x != nil {
		return x.FiltersAttach
	}
	return nil
}

func (x *ProposeCredentialV2) GetInvitationID() string {
	if x != nil {
		return x.InvitationID
	}
	return ""
}

// ProposeCredentialV3 is an optional message sent by the potential Holder to the Issuer
// to initiate the protocol or in response to a offer-credential message when the Holder
// wants some adjustments made to the credential data offered by Issuer.
// swagger:model
type ProposeCredentialV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string                   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Body *ProposeCredentialV3Body `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	// Attachments is an array of attachments containing the presentation in the requested format(s).
	// Accepted values for the format attribute of each attachment are provided in the per format Attachment
	// registry immediately below.
	Attachments []*types.AttachmentV2 `protobuf:"bytes,4,rep,name=attachments,proto3" json:"attachments,omitempty"`
	// Optional field containing ID of the invitation which initiated this protocol.
	Pthid string `protobuf:"bytes,5,opt,name=pthid,proto3" json:"pthid,omitempty"`
}

func (x *ProposeCredentialV3) Reset() {
	*x = ProposeCredentialV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposeCredentialV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeCredentialV3) ProtoMessage() {}

func (x *ProposeCredentialV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeCredentialV3.ProtoReflect.Descriptor instead.
func (*ProposeCredentialV3) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{2}
}

func (x *ProposeCredentialV3) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProposeCredentialV3) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProposeCredentialV3) GetBody() *ProposeCredentialV3Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *ProposeCredentialV3) GetAttachments() []*types.AttachmentV2 {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *ProposeCredentialV3) GetPthid() string {
	if x != nil {
		return x.Pthid
	}
	return ""
}

// ProposeCredentialV3Body represents body for ProposeCredentialV3.
type ProposeCredentialV3Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoalCode string `protobuf:"bytes,1,opt,name=goal_code,json=goalCode,proto3" json:"goal_code,omitempty"`
	Comment  string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	// credentialPreview is an optional JSON-LD object that represents the credential data that Prover wants to receive.
	CredentialPreview *anypb.Any `protobuf:"bytes,3,opt,name=credential_preview,json=credentialPreview,proto3" json:"credential_preview,omitempty"`
}

func (x *ProposeCredentialV3Body) Reset() {
	*x = ProposeCredentialV3Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposeCredentialV3Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeCredentialV3Body) ProtoMessage() {}

func (x *ProposeCredentialV3Body) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeCredentialV3Body.ProtoReflect.Descriptor instead.
func (*ProposeCredentialV3Body) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{3}
}

func (x *ProposeCredentialV3Body) GetGoalCode() string {
	if x != nil {
		return x.GoalCode
	}
	return ""
}

func (x *ProposeCredentialV3Body) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ProposeCredentialV3Body) GetCredentialPreview() *anypb.Any {
	if x != nil {
		return x.CredentialPreview
	}
	return nil
}

// Format contains the value of the attachment @id and the verifiable credential format of the attachment.
type Format struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttachId string `protobuf:"bytes,1,opt,name=attach_id,json=attachId,proto3" json:"attach_id,omitempty"`
	Format   string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *Format) Reset() {
	*x = Format{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Format) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Format) ProtoMessage() {}

func (x *Format) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Format.ProtoReflect.Descriptor instead.
func (*Format) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{4}
}

func (x *Format) GetAttachId() string {
	if x != nil {
		return x.AttachId
	}
	return ""
}

func (x *Format) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

// GenericOfferCredential combination of V2 and V3
// swagger:model
type GenericOfferCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` //@type
	// Comment is an optional field that provides human readable information about this Credential Offer,
	// so the offer can be evaluated by human judgment.
	// TODO: Should follow DIDComm conventions for l10n. [Issue #1300].
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	// CredentialPreview is a JSON-LD object that represents the credential data that Issuer is willing to issue.
	CredentialPreview *PreviewCredential `protobuf:"bytes,3,opt,name=credential_preview,json=credentialPreview,proto3" json:"credential_preview,omitempty"`
	// Formats contains an entry for each offers~attach array entry, providing the the value
	// of the attachment @id and the verifiable credential format and version of the attachment.
	Formats []*Format `protobuf:"bytes,4,rep,name=formats,proto3" json:"formats,omitempty"`
	// OffersAttach is a slice of attachments that further define the credential being offered.
	// This might be used to clarify which formats or format versions will be issued.
	OffersAttach []*types.Attachment `protobuf:"bytes,5,rep,name=offers_attach,json=offersAttach,proto3" json:"offers_attach,omitempty"` //offers~attach
	// V3
	Body *OfferCredentialV3Body `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
	// Attachments is an array of attachments containing the presentation in the requested format(s).
	// Accepted values for the format attribute of each attachment are provided in the per format Attachment
	// registry immediately below.
	Attachments []*types.AttachmentV2 `protobuf:"bytes,7,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *GenericOfferCredential) Reset() {
	*x = GenericOfferCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericOfferCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericOfferCredential) ProtoMessage() {}

func (x *GenericOfferCredential) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericOfferCredential.ProtoReflect.Descriptor instead.
func (*GenericOfferCredential) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{5}
}

func (x *GenericOfferCredential) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GenericOfferCredential) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *GenericOfferCredential) GetCredentialPreview() *PreviewCredential {
	if x != nil {
		return x.CredentialPreview
	}
	return nil
}

func (x *GenericOfferCredential) GetFormats() []*Format {
	if x != nil {
		return x.Formats
	}
	return nil
}

func (x *GenericOfferCredential) GetOffersAttach() []*types.Attachment {
	if x != nil {
		return x.OffersAttach
	}
	return nil
}

func (x *GenericOfferCredential) GetBody() *OfferCredentialV3Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *GenericOfferCredential) GetAttachments() []*types.AttachmentV2 {
	if x != nil {
		return x.Attachments
	}
	return nil
}

// OfferCredentialV2 is a message sent by the Issuer to the potential Holder,
// describing the credential they intend to offer and possibly the price they expect to be paid.
// TODO: Need to add ~payment_request and ~timing.expires_time decorators [Issue #1297].
// swagger:model
type OfferCredentialV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` //@type
	// Comment is an optional field that provides human readable information about this Credential Offer,
	// so the offer can be evaluated by human judgment.
	// TODO: Should follow DIDComm conventions for l10n. [Issue #1300].
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	// CredentialPreview is a JSON-LD object that represents the credential data that Issuer is willing to issue.
	CredentialPreview *PreviewCredential `protobuf:"bytes,3,opt,name=credential_preview,json=credentialPreview,proto3" json:"credential_preview,omitempty"`
	// Formats contains an entry for each offers~attach array entry, providing the the value
	// of the attachment @id and the verifiable credential format and version of the attachment.
	Formats []*Format `protobuf:"bytes,4,rep,name=formats,proto3" json:"formats,omitempty"`
	// OffersAttach is a slice of attachments that further define the credential being offered.
	// This might be used to clarify which formats or format versions will be issued.
	OffersAttach []*types.Attachment `protobuf:"bytes,5,rep,name=offers_attach,json=offersAttach,proto3" json:"offers_attach,omitempty"` //offers~attach
}

func (x *OfferCredentialV2) Reset() {
	*x = OfferCredentialV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferCredentialV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferCredentialV2) ProtoMessage() {}

func (x *OfferCredentialV2) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferCredentialV2.ProtoReflect.Descriptor instead.
func (*OfferCredentialV2) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{6}
}

func (x *OfferCredentialV2) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OfferCredentialV2) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *OfferCredentialV2) GetCredentialPreview() *PreviewCredential {
	if x != nil {
		return x.CredentialPreview
	}
	return nil
}

func (x *OfferCredentialV2) GetFormats() []*Format {
	if x != nil {
		return x.Formats
	}
	return nil
}

func (x *OfferCredentialV2) GetOffersAttach() []*types.Attachment {
	if x != nil {
		return x.OffersAttach
	}
	return nil
}

// OfferCredentialV3 is a message sent by the Issuer to the potential Holder,
// describing the credential they intend to offer and possibly the price they expect to be paid.
// swagger:model
type OfferCredentialV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Body *OfferCredentialV3Body `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	// Attachments is an array of attachments containing the presentation in the requested format(s).
	// Accepted values for the format attribute of each attachment are provided in the per format Attachment
	// registry immediately below.
	Attachments []*types.AttachmentV2 `protobuf:"bytes,4,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *OfferCredentialV3) Reset() {
	*x = OfferCredentialV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferCredentialV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferCredentialV3) ProtoMessage() {}

func (x *OfferCredentialV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferCredentialV3.ProtoReflect.Descriptor instead.
func (*OfferCredentialV3) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{7}
}

func (x *OfferCredentialV3) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OfferCredentialV3) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *OfferCredentialV3) GetBody() *OfferCredentialV3Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *OfferCredentialV3) GetAttachments() []*types.AttachmentV2 {
	if x != nil {
		return x.Attachments
	}
	return nil
}

// OfferCredentialV3Body represents body for OfferCredentialV3.
type OfferCredentialV3Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoalCode      string `protobuf:"bytes,1,opt,name=goal_code,json=goalCode,proto3" json:"goal_code,omitempty"`
	Comment       string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	ReplacementId string `protobuf:"bytes,3,opt,name=replacement_id,json=replacementId,proto3" json:"replacement_id,omitempty"`
	// credentialPreview is an optional JSON-LD object that represents the credential data that Prover wants to receive.
	CredentialPreview *anypb.Any `protobuf:"bytes,4,opt,name=credential_preview,json=credentialPreview,proto3" json:"credential_preview,omitempty"`
}

func (x *OfferCredentialV3Body) Reset() {
	*x = OfferCredentialV3Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferCredentialV3Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferCredentialV3Body) ProtoMessage() {}

func (x *OfferCredentialV3Body) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferCredentialV3Body.ProtoReflect.Descriptor instead.
func (*OfferCredentialV3Body) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{8}
}

func (x *OfferCredentialV3Body) GetGoalCode() string {
	if x != nil {
		return x.GoalCode
	}
	return ""
}

func (x *OfferCredentialV3Body) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *OfferCredentialV3Body) GetReplacementId() string {
	if x != nil {
		return x.ReplacementId
	}
	return ""
}

func (x *OfferCredentialV3Body) GetCredentialPreview() *anypb.Any {
	if x != nil {
		return x.CredentialPreview
	}
	return nil
}

// GenericRequestCredential combination of V2 and V3
// swagger:model
type GenericRequestCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // @type
	// Comment is an optional field that provides human readable information about this Credential Offer,
	// so the offer can be evaluated by human judgment.
	// TODO: Should follow DIDComm conventions for l10n. [Issue #1300].
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	// Formats contains an entry for each requests~attach array entry, providing the the value
	// of the attachment @id and the verifiable credential format and version of the attachment.
	Formats []*Format `protobuf:"bytes,3,rep,name=formats,proto3" json:"formats,omitempty"`
	// RequestsAttach is a slice of attachments defining the requested formats for the credential
	RequestsAttach []*types.Attachment `protobuf:"bytes,4,rep,name=requests_attach,json=requestsAttach,proto3" json:"requests_attach,omitempty"` //requests~attach
	// V3
	Body *RequestCredentialV3Body `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	// Attachments is an array of attachments containing the presentation in the requested format(s).
	// Accepted values for the format attribute of each attachment are provided in the per format Attachment
	// registry immediately below.
	Attachments []*types.AttachmentV2 `protobuf:"bytes,6,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *GenericRequestCredential) Reset() {
	*x = GenericRequestCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericRequestCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericRequestCredential) ProtoMessage() {}

func (x *GenericRequestCredential) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericRequestCredential.ProtoReflect.Descriptor instead.
func (*GenericRequestCredential) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{9}
}

func (x *GenericRequestCredential) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GenericRequestCredential) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *GenericRequestCredential) GetFormats() []*Format {
	if x != nil {
		return x.Formats
	}
	return nil
}

func (x *GenericRequestCredential) GetRequestsAttach() []*types.Attachment {
	if x != nil {
		return x.RequestsAttach
	}
	return nil
}

func (x *GenericRequestCredential) GetBody() *RequestCredentialV3Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *GenericRequestCredential) GetAttachments() []*types.AttachmentV2 {
	if x != nil {
		return x.Attachments
	}
	return nil
}

// RequestCredentialV2 is a message sent by the potential Holder to the Issuer,
// to request the issuance of a credential. Where circumstances do not require
// a preceding Offer Credential message (e.g., there is no cost to issuance
// that the Issuer needs to explain in advance, and there is no need for cryptographic negotiation),
// this message initiates the protocol.
// TODO: Need to add ~payment-receipt decorator [Issue #1298].
// swagger:model
type RequestCredentialV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // @type
	// Comment is an optional field that provides human readable information about this Credential Offer,
	// so the offer can be evaluated by human judgment.
	// TODO: Should follow DIDComm conventions for l10n. [Issue #1300].
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	// Formats contains an entry for each requests~attach array entry, providing the the value
	// of the attachment @id and the verifiable credential format and version of the attachment.
	Formats []*Format `protobuf:"bytes,3,rep,name=formats,proto3" json:"formats,omitempty"`
	// RequestsAttach is a slice of attachments defining the requested formats for the credential
	RequestsAttach []*types.Attachment `protobuf:"bytes,4,rep,name=requests_attach,json=requestsAttach,proto3" json:"requests_attach,omitempty"` //requests~attach
}

func (x *RequestCredentialV2) Reset() {
	*x = RequestCredentialV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCredentialV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCredentialV2) ProtoMessage() {}

func (x *RequestCredentialV2) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCredentialV2.ProtoReflect.Descriptor instead.
func (*RequestCredentialV2) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{10}
}

func (x *RequestCredentialV2) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RequestCredentialV2) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *RequestCredentialV2) GetFormats() []*Format {
	if x != nil {
		return x.Formats
	}
	return nil
}

func (x *RequestCredentialV2) GetRequestsAttach() []*types.Attachment {
	if x != nil {
		return x.RequestsAttach
	}
	return nil
}

// RequestCredentialV3 is a message sent by the potential Holder to the Issuer,
// to request the issuance of a credential. Where circumstances do not require
// a preceding Offer Credential message (e.g., there is no cost to issuance
// that the Issuer needs to explain in advance, and there is no need for cryptographic negotiation),
// this message initiates the protocol.
// swagger:model
type RequestCredentialV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string                   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Body *RequestCredentialV3Body `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	// Attachments is an array of attachments containing the presentation in the requested format(s).
	// Accepted values for the format attribute of each attachment are provided in the per format Attachment
	// registry immediately below.
	Attachments []*types.AttachmentV2 `protobuf:"bytes,4,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *RequestCredentialV3) Reset() {
	*x = RequestCredentialV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCredentialV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCredentialV3) ProtoMessage() {}

func (x *RequestCredentialV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCredentialV3.ProtoReflect.Descriptor instead.
func (*RequestCredentialV3) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{11}
}

func (x *RequestCredentialV3) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestCredentialV3) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RequestCredentialV3) GetBody() *RequestCredentialV3Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *RequestCredentialV3) GetAttachments() []*types.AttachmentV2 {
	if x != nil {
		return x.Attachments
	}
	return nil
}

// RequestCredentialV3Body represents body for RequestCredentialV3.
type RequestCredentialV3Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoalCode string `protobuf:"bytes,1,opt,name=goal_code,json=goalCode,proto3" json:"goal_code,omitempty"`
	Comment  string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *RequestCredentialV3Body) Reset() {
	*x = RequestCredentialV3Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestCredentialV3Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestCredentialV3Body) ProtoMessage() {}

func (x *RequestCredentialV3Body) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestCredentialV3Body.ProtoReflect.Descriptor instead.
func (*RequestCredentialV3Body) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{12}
}

func (x *RequestCredentialV3Body) GetGoalCode() string {
	if x != nil {
		return x.GoalCode
	}
	return ""
}

func (x *RequestCredentialV3Body) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

// GenericIssueCredential combination of V2 and V3
// swagger:model
type GenericIssueCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // @type
	// Comment is an optional field that provides human readable information about this Credential Offer,
	// so the offer can be evaluated by human judgment.
	// TODO: Should follow DIDComm conventions for l10n. [Issue #1300].
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	// Formats contains an entry for each credentials~attach array entry, providing the value
	// of the attachment @id and the verifiable credential format and version of the attachment.
	Formats []*Format `protobuf:"bytes,3,rep,name=formats,proto3" json:"formats,omitempty"`
	// CredentialsAttach is a slice of attachments containing the issued credentials.
	CredentialsAttach []*types.Attachment `protobuf:"bytes,4,rep,name=credentials_attach,json=credentialsAttach,proto3" json:"credentials_attach,omitempty"` //credentials~attach
	// WebRedirect contains optional web redirect info to be sent to holder for redirect.
	WebRedirect *types.WebRedirect `protobuf:"bytes,5,opt,name=web_redirect,json=webRedirect,proto3" json:"web_redirect,omitempty"` // ~web-redirect
	// V3
	Body *IssueCredentialV3Body `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
	// Attachments is an array of attachments containing the presentation in the requested format(s).
	// Accepted values for the format attribute of each attachment are provided in the per format Attachment
	// registry immediately below.
	Attachments []*types.AttachmentV2 `protobuf:"bytes,7,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *GenericIssueCredential) Reset() {
	*x = GenericIssueCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericIssueCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericIssueCredential) ProtoMessage() {}

func (x *GenericIssueCredential) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericIssueCredential.ProtoReflect.Descriptor instead.
func (*GenericIssueCredential) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{13}
}

func (x *GenericIssueCredential) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GenericIssueCredential) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *GenericIssueCredential) GetFormats() []*Format {
	if x != nil {
		return x.Formats
	}
	return nil
}

func (x *GenericIssueCredential) GetCredentialsAttach() []*types.Attachment {
	if x != nil {
		return x.CredentialsAttach
	}
	return nil
}

func (x *GenericIssueCredential) GetWebRedirect() *types.WebRedirect {
	if x != nil {
		return x.WebRedirect
	}
	return nil
}

func (x *GenericIssueCredential) GetBody() *IssueCredentialV3Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *GenericIssueCredential) GetAttachments() []*types.AttachmentV2 {
	if x != nil {
		return x.Attachments
	}
	return nil
}

// IssueCredentialV2 contains as attached payload the credentials being issued and is
// sent in response to a valid Invitation Credential message.
// TODO: Need to add ~please-ack decorator [Issue #1299].
// swagger:model
type IssueCredentialV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // @type
	// Comment is an optional field that provides human readable information about this Credential Offer,
	// so the offer can be evaluated by human judgment.
	// TODO: Should follow DIDComm conventions for l10n. [Issue #1300].
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	// Formats contains an entry for each credentials~attach array entry, providing the value
	// of the attachment @id and the verifiable credential format and version of the attachment.
	Formats []*Format `protobuf:"bytes,3,rep,name=formats,proto3" json:"formats,omitempty"`
	// CredentialsAttach is a slice of attachments containing the issued credentials.
	CredentialsAttach []*types.Attachment `protobuf:"bytes,4,rep,name=credentials_attach,json=credentialsAttach,proto3" json:"credentials_attach,omitempty"` //credentials~attach
	// WebRedirect contains optional web redirect info to be sent to holder for redirect.
	WebRedirect *types.WebRedirect `protobuf:"bytes,5,opt,name=web_redirect,json=webRedirect,proto3" json:"web_redirect,omitempty"` // ~web-redirect
}

func (x *IssueCredentialV2) Reset() {
	*x = IssueCredentialV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialV2) ProtoMessage() {}

func (x *IssueCredentialV2) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialV2.ProtoReflect.Descriptor instead.
func (*IssueCredentialV2) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{14}
}

func (x *IssueCredentialV2) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IssueCredentialV2) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *IssueCredentialV2) GetFormats() []*Format {
	if x != nil {
		return x.Formats
	}
	return nil
}

func (x *IssueCredentialV2) GetCredentialsAttach() []*types.Attachment {
	if x != nil {
		return x.CredentialsAttach
	}
	return nil
}

func (x *IssueCredentialV2) GetWebRedirect() *types.WebRedirect {
	if x != nil {
		return x.WebRedirect
	}
	return nil
}

// IssueCredentialV3 contains as attached payload the credentials being issued and is
// sent in response to a valid Invitation Credential message.
// swagger:model
type IssueCredentialV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Body *IssueCredentialV3Body `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	// WebRedirect contains optional web redirect info to be sent to holder for redirect.
	WebRedirect *types.WebRedirect `protobuf:"bytes,4,opt,name=web_redirect,json=webRedirect,proto3" json:"web_redirect,omitempty"` // ~web-redirect
	// Attachments is an array of attachments containing the presentation in the requested format(s).
	// Accepted values for the format attribute of each attachment are provided in the per format Attachment
	// registry immediately below.
	Attachments []*types.AttachmentV2 `protobuf:"bytes,5,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *IssueCredentialV3) Reset() {
	*x = IssueCredentialV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialV3) ProtoMessage() {}

func (x *IssueCredentialV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialV3.ProtoReflect.Descriptor instead.
func (*IssueCredentialV3) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{15}
}

func (x *IssueCredentialV3) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IssueCredentialV3) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IssueCredentialV3) GetBody() *IssueCredentialV3Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *IssueCredentialV3) GetWebRedirect() *types.WebRedirect {
	if x != nil {
		return x.WebRedirect
	}
	return nil
}

func (x *IssueCredentialV3) GetAttachments() []*types.AttachmentV2 {
	if x != nil {
		return x.Attachments
	}
	return nil
}

// IssueCredentialV3Body represents body for IssueCredentialV3.
type IssueCredentialV3Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoalCode      string `protobuf:"bytes,1,opt,name=goal_code,json=goalCode,proto3" json:"goal_code,omitempty"`
	ReplacementId string `protobuf:"bytes,2,opt,name=replacement_id,json=replacementId,proto3" json:"replacement_id,omitempty"`
	Comment       string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *IssueCredentialV3Body) Reset() {
	*x = IssueCredentialV3Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueCredentialV3Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCredentialV3Body) ProtoMessage() {}

func (x *IssueCredentialV3Body) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCredentialV3Body.ProtoReflect.Descriptor instead.
func (*IssueCredentialV3Body) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{16}
}

func (x *IssueCredentialV3Body) GetGoalCode() string {
	if x != nil {
		return x.GoalCode
	}
	return ""
}

func (x *IssueCredentialV3Body) GetReplacementId() string {
	if x != nil {
		return x.ReplacementId
	}
	return ""
}

func (x *IssueCredentialV3Body) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

// PreviewCredential is used to construct a preview of the data for the credential that is to be issued.
// swagger:model
type PreviewCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string       `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Attributes []*Attribute `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *PreviewCredential) Reset() {
	*x = PreviewCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewCredential) ProtoMessage() {}

func (x *PreviewCredential) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewCredential.ProtoReflect.Descriptor instead.
func (*PreviewCredential) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{17}
}

func (x *PreviewCredential) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PreviewCredential) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// PreviewCredentialV3 is used to construct a preview of the data for the credential that is to be issued.
// swagger:model
type PreviewCredentialV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Body *IssueCredentialV3Body `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *PreviewCredentialV3) Reset() {
	*x = PreviewCredentialV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewCredentialV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewCredentialV3) ProtoMessage() {}

func (x *PreviewCredentialV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewCredentialV3.ProtoReflect.Descriptor instead.
func (*PreviewCredentialV3) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{18}
}

func (x *PreviewCredentialV3) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PreviewCredentialV3) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PreviewCredentialV3) GetBody() *IssueCredentialV3Body {
	if x != nil {
		return x.Body
	}
	return nil
}

// PreviewCredentialV3Body represents body for PreviewCredentialV3.
type PreviewCredentialV3Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes []*Attribute `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *PreviewCredentialV3Body) Reset() {
	*x = PreviewCredentialV3Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewCredentialV3Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewCredentialV3Body) ProtoMessage() {}

func (x *PreviewCredentialV3Body) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewCredentialV3Body.ProtoReflect.Descriptor instead.
func (*PreviewCredentialV3Body) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{19}
}

func (x *PreviewCredentialV3Body) GetAttributes() []*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// Attribute describes an attribute for a Preview Credential.
type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MimeType string `protobuf:"bytes,2,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"` //mime-type
	Value    string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{20}
}

func (x *Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Attribute) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *Attribute) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// CredentialSpec is the attachment payload in messages conforming to the RFC0593 format.
type CredentialSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credential *types1.VerifiableCredential `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"` // json.RawMessage
	Options    *CredentialSpecOptions       `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *CredentialSpec) Reset() {
	*x = CredentialSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialSpec) ProtoMessage() {}

func (x *CredentialSpec) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialSpec.ProtoReflect.Descriptor instead.
func (*CredentialSpec) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{21}
}

func (x *CredentialSpec) GetCredential() *types1.VerifiableCredential {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *CredentialSpec) GetOptions() *CredentialSpecOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// CredentialSpecOptions are the options for issuance of the credential.
// TODO support CredentialStatus.
type CredentialSpecOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProofPurpose     string            `protobuf:"bytes,1,opt,name=proofPurpose,proto3" json:"proofPurpose,omitempty"`
	Domain           string            `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Challenge        string            `protobuf:"bytes,3,opt,name=challenge,proto3" json:"challenge,omitempty"`
	CredentialStatus *CredentialStatus `protobuf:"bytes,4,opt,name=credentialStatus,proto3" json:"credentialStatus,omitempty"`
	ProofType        string            `protobuf:"bytes,5,opt,name=proofType,proto3" json:"proofType,omitempty"`
	Created          string            `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *CredentialSpecOptions) Reset() {
	*x = CredentialSpecOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialSpecOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialSpecOptions) ProtoMessage() {}

func (x *CredentialSpecOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialSpecOptions.ProtoReflect.Descriptor instead.
func (*CredentialSpecOptions) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{22}
}

func (x *CredentialSpecOptions) GetProofPurpose() string {
	if x != nil {
		return x.ProofPurpose
	}
	return ""
}

func (x *CredentialSpecOptions) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CredentialSpecOptions) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *CredentialSpecOptions) GetCredentialStatus() *CredentialStatus {
	if x != nil {
		return x.CredentialStatus
	}
	return nil
}

func (x *CredentialSpecOptions) GetProofType() string {
	if x != nil {
		return x.ProofType
	}
	return ""
}

func (x *CredentialSpecOptions) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

// CredentialStatus is the requested status for the credential.
type CredentialStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CredentialStatus) Reset() {
	*x = CredentialStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialStatus) ProtoMessage() {}

func (x *CredentialStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_issuecredential_types_issuecredential_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialStatus.ProtoReflect.Descriptor instead.
func (*CredentialStatus) Descriptor() ([]byte, []int) {
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP(), []int{23}
}

func (x *CredentialStatus) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

var File_api_did_issuecredential_types_issuecredential_proto protoreflect.FileDescriptor

var file_api_did_issuecredential_types_issuecredential_proto_rawDesc = []byte{
	0x0a, 0x33, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x64, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x64, 0x2f, 0x64, 0x6f, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x6f, 0x75, 0x74, 0x6f, 0x66, 0x62, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xfb, 0x03, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x61, 0x0a, 0x13,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x12, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12,
	0x3f, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73,
	0x12, 0x44, 0x0a, 0x0e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x33, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x0b, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x74, 0x68,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x74, 0x68, 0x69, 0x64, 0x22,
	0xd1, 0x02, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x61, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x12, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x0e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12,
	0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x22, 0xde, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x4a, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56,
	0x33, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x32, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x74, 0x68, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x74, 0x68, 0x69, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x33, 0x42, 0x6f, 0x64, 0x79,
	0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x6f, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0x3d, 0x0a, 0x06,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xb9, 0x03, 0x0a, 0x16,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3f, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64,
	0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x07, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73,
	0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x48, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x33, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa7, 0x02, 0x0a, 0x11, 0x4f, 0x66, 0x66, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x32, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x12, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69,
	0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x3f, 0x0a, 0x07,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x42, 0x0a,
	0x0d, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64,
	0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x22, 0xc4, 0x01, 0x0a, 0x11, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x33, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x0b, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x15, 0x4f, 0x66, 0x66,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x33, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x6f, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x43, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x22, 0xe0, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x3f, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x73, 0x12, 0x46, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x4a, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69,
	0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x33, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x0b, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x32,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3f,
	0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12,
	0x46, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x22, 0xc8, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x33, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x56, 0x33, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12,
	0x41, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64,
	0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0x50, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x33, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x6f, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa5, 0x03, 0x0a, 0x16, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a,
	0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x4c,
	0x0a, 0x12, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x41, 0x0a, 0x0c,
	0x77, 0x65, 0x62, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12,
	0x48, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x33, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x52,
	0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x93, 0x02, 0x0a,
	0x11, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x56, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x3f, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x73, 0x12, 0x4c, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12,
	0x41, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e,
	0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x77, 0x65, 0x62, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x11, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x33, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x0c, 0x77, 0x65, 0x62, 0x5f, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x77, 0x65,
	0x62, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x52,
	0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x75, 0x0a, 0x15,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56,
	0x33, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x6f, 0x61, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x71, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x22, 0x83, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x33, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x56, 0x33, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x63, 0x0a, 0x17,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x56, 0x33, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x48, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x22, 0x52, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x12, 0x42, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x4e, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x86, 0x02, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x50,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x12, 0x5b, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x69, 0x64, 0x2e, 0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x26, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x36, 0x5a,
	0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x68, 0x61, 0x74,
	0x74, 0x69, 0x2f, 0x47, 0x53, 0x53, 0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x64, 0x2f,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_did_issuecredential_types_issuecredential_proto_rawDescOnce sync.Once
	file_api_did_issuecredential_types_issuecredential_proto_rawDescData = file_api_did_issuecredential_types_issuecredential_proto_rawDesc
)

func file_api_did_issuecredential_types_issuecredential_proto_rawDescGZIP() []byte {
	file_api_did_issuecredential_types_issuecredential_proto_rawDescOnce.Do(func() {
		file_api_did_issuecredential_types_issuecredential_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_did_issuecredential_types_issuecredential_proto_rawDescData)
	})
	return file_api_did_issuecredential_types_issuecredential_proto_rawDescData
}

var file_api_did_issuecredential_types_issuecredential_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_api_did_issuecredential_types_issuecredential_proto_goTypes = []interface{}{
	(*GenericProposeCredential)(nil),    // 0: api.did.issuecredential.types.GenericProposeCredential
	(*ProposeCredentialV2)(nil),         // 1: api.did.issuecredential.types.ProposeCredentialV2
	(*ProposeCredentialV3)(nil),         // 2: api.did.issuecredential.types.ProposeCredentialV3
	(*ProposeCredentialV3Body)(nil),     // 3: api.did.issuecredential.types.ProposeCredentialV3Body
	(*Format)(nil),                      // 4: api.did.issuecredential.types.Format
	(*GenericOfferCredential)(nil),      // 5: api.did.issuecredential.types.GenericOfferCredential
	(*OfferCredentialV2)(nil),           // 6: api.did.issuecredential.types.OfferCredentialV2
	(*OfferCredentialV3)(nil),           // 7: api.did.issuecredential.types.OfferCredentialV3
	(*OfferCredentialV3Body)(nil),       // 8: api.did.issuecredential.types.OfferCredentialV3Body
	(*GenericRequestCredential)(nil),    // 9: api.did.issuecredential.types.GenericRequestCredential
	(*RequestCredentialV2)(nil),         // 10: api.did.issuecredential.types.RequestCredentialV2
	(*RequestCredentialV3)(nil),         // 11: api.did.issuecredential.types.RequestCredentialV3
	(*RequestCredentialV3Body)(nil),     // 12: api.did.issuecredential.types.RequestCredentialV3Body
	(*GenericIssueCredential)(nil),      // 13: api.did.issuecredential.types.GenericIssueCredential
	(*IssueCredentialV2)(nil),           // 14: api.did.issuecredential.types.IssueCredentialV2
	(*IssueCredentialV3)(nil),           // 15: api.did.issuecredential.types.IssueCredentialV3
	(*IssueCredentialV3Body)(nil),       // 16: api.did.issuecredential.types.IssueCredentialV3Body
	(*PreviewCredential)(nil),           // 17: api.did.issuecredential.types.PreviewCredential
	(*PreviewCredentialV3)(nil),         // 18: api.did.issuecredential.types.PreviewCredentialV3
	(*PreviewCredentialV3Body)(nil),     // 19: api.did.issuecredential.types.PreviewCredentialV3Body
	(*Attribute)(nil),                   // 20: api.did.issuecredential.types.Attribute
	(*CredentialSpec)(nil),              // 21: api.did.issuecredential.types.CredentialSpec
	(*CredentialSpecOptions)(nil),       // 22: api.did.issuecredential.types.CredentialSpecOptions
	(*CredentialStatus)(nil),            // 23: api.did.issuecredential.types.CredentialStatus
	(*types.Attachment)(nil),            // 24: api.did.doc.types.Attachment
	(*types.AttachmentV2)(nil),          // 25: api.did.doc.types.AttachmentV2
	(*anypb.Any)(nil),                   // 26: google.protobuf.Any
	(*types.WebRedirect)(nil),           // 27: api.did.doc.types.WebRedirect
	(*types1.VerifiableCredential)(nil), // 28: api.vc.types.VerifiableCredential
}
var file_api_did_issuecredential_types_issuecredential_proto_depIdxs = []int32{
	17, // 0: api.did.issuecredential.types.GenericProposeCredential.credential_proposal:type_name -> api.did.issuecredential.types.PreviewCredential
	4,  // 1: api.did.issuecredential.types.GenericProposeCredential.formats:type_name -> api.did.issuecredential.types.Format
	24, // 2: api.did.issuecredential.types.GenericProposeCredential.filters_attach:type_name -> api.did.doc.types.Attachment
	3,  // 3: api.did.issuecredential.types.GenericProposeCredential.body:type_name -> api.did.issuecredential.types.ProposeCredentialV3Body
	25, // 4: api.did.issuecredential.types.GenericProposeCredential.attachments:type_name -> api.did.doc.types.AttachmentV2
	17, // 5: api.did.issuecredential.types.ProposeCredentialV2.credential_proposal:type_name -> api.did.issuecredential.types.PreviewCredential
	4,  // 6: api.did.issuecredential.types.ProposeCredentialV2.formats:type_name -> api.did.issuecredential.types.Format
	24, // 7: api.did.issuecredential.types.ProposeCredentialV2.filters_attach:type_name -> api.did.doc.types.Attachment
	3,  // 8: api.did.issuecredential.types.ProposeCredentialV3.body:type_name -> api.did.issuecredential.types.ProposeCredentialV3Body
	25, // 9: api.did.issuecredential.types.ProposeCredentialV3.attachments:type_name -> api.did.doc.types.AttachmentV2
	26, // 10: api.did.issuecredential.types.ProposeCredentialV3Body.credential_preview:type_name -> google.protobuf.Any
	17, // 11: api.did.issuecredential.types.GenericOfferCredential.credential_preview:type_name -> api.did.issuecredential.types.PreviewCredential
	4,  // 12: api.did.issuecredential.types.GenericOfferCredential.formats:type_name -> api.did.issuecredential.types.Format
	24, // 13: api.did.issuecredential.types.GenericOfferCredential.offers_attach:type_name -> api.did.doc.types.Attachment
	8,  // 14: api.did.issuecredential.types.GenericOfferCredential.body:type_name -> api.did.issuecredential.types.OfferCredentialV3Body
	25, // 15: api.did.issuecredential.types.GenericOfferCredential.attachments:type_name -> api.did.doc.types.AttachmentV2
	17, // 16: api.did.issuecredential.types.OfferCredentialV2.credential_preview:type_name -> api.did.issuecredential.types.PreviewCredential
	4,  // 17: api.did.issuecredential.types.OfferCredentialV2.formats:type_name -> api.did.issuecredential.types.Format
	24, // 18: api.did.issuecredential.types.OfferCredentialV2.offers_attach:type_name -> api.did.doc.types.Attachment
	8,  // 19: api.did.issuecredential.types.OfferCredentialV3.body:type_name -> api.did.issuecredential.types.OfferCredentialV3Body
	25, // 20: api.did.issuecredential.types.OfferCredentialV3.attachments:type_name -> api.did.doc.types.AttachmentV2
	26, // 21: api.did.issuecredential.types.OfferCredentialV3Body.credential_preview:type_name -> google.protobuf.Any
	4,  // 22: api.did.issuecredential.types.GenericRequestCredential.formats:type_name -> api.did.issuecredential.types.Format
	24, // 23: api.did.issuecredential.types.GenericRequestCredential.requests_attach:type_name -> api.did.doc.types.Attachment
	12, // 24: api.did.issuecredential.types.GenericRequestCredential.body:type_name -> api.did.issuecredential.types.RequestCredentialV3Body
	25, // 25: api.did.issuecredential.types.GenericRequestCredential.attachments:type_name -> api.did.doc.types.AttachmentV2
	4,  // 26: api.did.issuecredential.types.RequestCredentialV2.formats:type_name -> api.did.issuecredential.types.Format
	24, // 27: api.did.issuecredential.types.RequestCredentialV2.requests_attach:type_name -> api.did.doc.types.Attachment
	12, // 28: api.did.issuecredential.types.RequestCredentialV3.body:type_name -> api.did.issuecredential.types.RequestCredentialV3Body
	25, // 29: api.did.issuecredential.types.RequestCredentialV3.attachments:type_name -> api.did.doc.types.AttachmentV2
	4,  // 30: api.did.issuecredential.types.GenericIssueCredential.formats:type_name -> api.did.issuecredential.types.Format
	24, // 31: api.did.issuecredential.types.GenericIssueCredential.credentials_attach:type_name -> api.did.doc.types.Attachment
	27, // 32: api.did.issuecredential.types.GenericIssueCredential.web_redirect:type_name -> api.did.doc.types.WebRedirect
	16, // 33: api.did.issuecredential.types.GenericIssueCredential.body:type_name -> api.did.issuecredential.types.IssueCredentialV3Body
	25, // 34: api.did.issuecredential.types.GenericIssueCredential.attachments:type_name -> api.did.doc.types.AttachmentV2
	4,  // 35: api.did.issuecredential.types.IssueCredentialV2.formats:type_name -> api.did.issuecredential.types.Format
	24, // 36: api.did.issuecredential.types.IssueCredentialV2.credentials_attach:type_name -> api.did.doc.types.Attachment
	27, // 37: api.did.issuecredential.types.IssueCredentialV2.web_redirect:type_name -> api.did.doc.types.WebRedirect
	16, // 38: api.did.issuecredential.types.IssueCredentialV3.body:type_name -> api.did.issuecredential.types.IssueCredentialV3Body
	27, // 39: api.did.issuecredential.types.IssueCredentialV3.web_redirect:type_name -> api.did.doc.types.WebRedirect
	25, // 40: api.did.issuecredential.types.IssueCredentialV3.attachments:type_name -> api.did.doc.types.AttachmentV2
	20, // 41: api.did.issuecredential.types.PreviewCredential.attributes:type_name -> api.did.issuecredential.types.Attribute
	16, // 42: api.did.issuecredential.types.PreviewCredentialV3.body:type_name -> api.did.issuecredential.types.IssueCredentialV3Body
	20, // 43: api.did.issuecredential.types.PreviewCredentialV3Body.attributes:type_name -> api.did.issuecredential.types.Attribute
	28, // 44: api.did.issuecredential.types.CredentialSpec.credential:type_name -> api.vc.types.VerifiableCredential
	22, // 45: api.did.issuecredential.types.CredentialSpec.options:type_name -> api.did.issuecredential.types.CredentialSpecOptions
	23, // 46: api.did.issuecredential.types.CredentialSpecOptions.credentialStatus:type_name -> api.did.issuecredential.types.CredentialStatus
	47, // [47:47] is the sub-list for method output_type
	47, // [47:47] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_api_did_issuecredential_types_issuecredential_proto_init() }
func file_api_did_issuecredential_types_issuecredential_proto_init() {
	if File_api_did_issuecredential_types_issuecredential_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericProposeCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposeCredentialV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposeCredentialV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposeCredentialV3Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Format); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericOfferCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferCredentialV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferCredentialV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferCredentialV3Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericRequestCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCredentialV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCredentialV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestCredentialV3Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericIssueCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueCredentialV3Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewCredentialV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewCredentialV3Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialSpecOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_issuecredential_types_issuecredential_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_did_issuecredential_types_issuecredential_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_did_issuecredential_types_issuecredential_proto_goTypes,
		DependencyIndexes: file_api_did_issuecredential_types_issuecredential_proto_depIdxs,
		MessageInfos:      file_api_did_issuecredential_types_issuecredential_proto_msgTypes,
	}.Build()
	File_api_did_issuecredential_types_issuecredential_proto = out.File
	file_api_did_issuecredential_types_issuecredential_proto_rawDesc = nil
	file_api_did_issuecredential_types_issuecredential_proto_goTypes = nil
	file_api_did_issuecredential_types_issuecredential_proto_depIdxs = nil
}
