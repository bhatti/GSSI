// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/did/mediator/services/mediator.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MediatorControllerClient is the client API for MediatorController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediatorControllerClient interface {
	// Register swagger:route POST /mediator/register mediator registerRouteRequest
	//
	// Registers the agent with the router.
	//
	// Responses:
	//    default: genericError
	//    200: registerRouteRes
	Register(ctx context.Context, in *RegisterRouteReq, opts ...grpc.CallOption) (*RegisterRouteRes, error)
	// Unregister swagger:route DELETE /mediator/unregister mediator unregisterRouter
	//
	// Unregisters the agent with the router.
	//
	// Responses:
	//    default: genericError
	//    200: unregisterRouteRes
	Unregister(ctx context.Context, in *UnregisterRouterReq, opts ...grpc.CallOption) (*UnregisterRouteRes, error)
	// Connections swagger:route GET /mediator/connections mediator connectionsRequest
	//
	// Retrieves the router`s connections.
	//
	// Responses:
	//    default: genericError
	//    200: getConnectionsResponse
	Connections(ctx context.Context, in *ConnectionsReq, opts ...grpc.CallOption) (*ConnectionsResponse, error)
	// Reconnect swagger:route POST /mediator/reconnect mediator reconnectRouteRequest
	//
	// Reconnect the agent with the router to re-establish lost connection.
	//
	// Responses:
	//    default: genericError
	Reconnect(ctx context.Context, in *ReconnectRouteReq, opts ...grpc.CallOption) (*ReconnectRouteRes, error)
	// Status swagger:route POST /mediator/status mediator statusRequest
	//
	// Status returns details about pending messages for given connection.
	//
	// Responses:
	//    default: genericError
	//    200: statusResponse
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// BatchPickup swagger:route POST /mediator/batchpickup mediator batchPickupRequest
	//
	// BatchPickup dispatches pending messages for given connection.
	//
	// Responses:
	//    default: genericError
	//    200: batchPickupResponse
	BatchPickup(ctx context.Context, in *BatchPickupRequest, opts ...grpc.CallOption) (*BatchPickupResponse, error)
	// ReconnectAll swagger:route GET /mediator/reconnect-all mediator reconnectAll
	//
	// Re-establishes network connections for all mediator connections.
	//
	// Responses:
	//    default: genericError
	ReconnectAll(ctx context.Context, in *ReconnectRouteReq, opts ...grpc.CallOption) (*ReconnectRouteRes, error)
}

type mediatorControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewMediatorControllerClient(cc grpc.ClientConnInterface) MediatorControllerClient {
	return &mediatorControllerClient{cc}
}

func (c *mediatorControllerClient) Register(ctx context.Context, in *RegisterRouteReq, opts ...grpc.CallOption) (*RegisterRouteRes, error) {
	out := new(RegisterRouteRes)
	err := c.cc.Invoke(ctx, "/api.did.mediator.services.MediatorController/register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediatorControllerClient) Unregister(ctx context.Context, in *UnregisterRouterReq, opts ...grpc.CallOption) (*UnregisterRouteRes, error) {
	out := new(UnregisterRouteRes)
	err := c.cc.Invoke(ctx, "/api.did.mediator.services.MediatorController/unregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediatorControllerClient) Connections(ctx context.Context, in *ConnectionsReq, opts ...grpc.CallOption) (*ConnectionsResponse, error) {
	out := new(ConnectionsResponse)
	err := c.cc.Invoke(ctx, "/api.did.mediator.services.MediatorController/connections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediatorControllerClient) Reconnect(ctx context.Context, in *ReconnectRouteReq, opts ...grpc.CallOption) (*ReconnectRouteRes, error) {
	out := new(ReconnectRouteRes)
	err := c.cc.Invoke(ctx, "/api.did.mediator.services.MediatorController/reconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediatorControllerClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/api.did.mediator.services.MediatorController/status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediatorControllerClient) BatchPickup(ctx context.Context, in *BatchPickupRequest, opts ...grpc.CallOption) (*BatchPickupResponse, error) {
	out := new(BatchPickupResponse)
	err := c.cc.Invoke(ctx, "/api.did.mediator.services.MediatorController/batchPickup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediatorControllerClient) ReconnectAll(ctx context.Context, in *ReconnectRouteReq, opts ...grpc.CallOption) (*ReconnectRouteRes, error) {
	out := new(ReconnectRouteRes)
	err := c.cc.Invoke(ctx, "/api.did.mediator.services.MediatorController/reconnectAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediatorControllerServer is the server API for MediatorController service.
// All implementations must embed UnimplementedMediatorControllerServer
// for forward compatibility
type MediatorControllerServer interface {
	// Register swagger:route POST /mediator/register mediator registerRouteRequest
	//
	// Registers the agent with the router.
	//
	// Responses:
	//    default: genericError
	//    200: registerRouteRes
	Register(context.Context, *RegisterRouteReq) (*RegisterRouteRes, error)
	// Unregister swagger:route DELETE /mediator/unregister mediator unregisterRouter
	//
	// Unregisters the agent with the router.
	//
	// Responses:
	//    default: genericError
	//    200: unregisterRouteRes
	Unregister(context.Context, *UnregisterRouterReq) (*UnregisterRouteRes, error)
	// Connections swagger:route GET /mediator/connections mediator connectionsRequest
	//
	// Retrieves the router`s connections.
	//
	// Responses:
	//    default: genericError
	//    200: getConnectionsResponse
	Connections(context.Context, *ConnectionsReq) (*ConnectionsResponse, error)
	// Reconnect swagger:route POST /mediator/reconnect mediator reconnectRouteRequest
	//
	// Reconnect the agent with the router to re-establish lost connection.
	//
	// Responses:
	//    default: genericError
	Reconnect(context.Context, *ReconnectRouteReq) (*ReconnectRouteRes, error)
	// Status swagger:route POST /mediator/status mediator statusRequest
	//
	// Status returns details about pending messages for given connection.
	//
	// Responses:
	//    default: genericError
	//    200: statusResponse
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// BatchPickup swagger:route POST /mediator/batchpickup mediator batchPickupRequest
	//
	// BatchPickup dispatches pending messages for given connection.
	//
	// Responses:
	//    default: genericError
	//    200: batchPickupResponse
	BatchPickup(context.Context, *BatchPickupRequest) (*BatchPickupResponse, error)
	// ReconnectAll swagger:route GET /mediator/reconnect-all mediator reconnectAll
	//
	// Re-establishes network connections for all mediator connections.
	//
	// Responses:
	//    default: genericError
	ReconnectAll(context.Context, *ReconnectRouteReq) (*ReconnectRouteRes, error)
	mustEmbedUnimplementedMediatorControllerServer()
}

// UnimplementedMediatorControllerServer must be embedded to have forward compatible implementations.
type UnimplementedMediatorControllerServer struct {
}

func (UnimplementedMediatorControllerServer) Register(context.Context, *RegisterRouteReq) (*RegisterRouteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedMediatorControllerServer) Unregister(context.Context, *UnregisterRouterReq) (*UnregisterRouteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unregister not implemented")
}
func (UnimplementedMediatorControllerServer) Connections(context.Context, *ConnectionsReq) (*ConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connections not implemented")
}
func (UnimplementedMediatorControllerServer) Reconnect(context.Context, *ReconnectRouteReq) (*ReconnectRouteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reconnect not implemented")
}
func (UnimplementedMediatorControllerServer) Status(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedMediatorControllerServer) BatchPickup(context.Context, *BatchPickupRequest) (*BatchPickupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchPickup not implemented")
}
func (UnimplementedMediatorControllerServer) ReconnectAll(context.Context, *ReconnectRouteReq) (*ReconnectRouteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReconnectAll not implemented")
}
func (UnimplementedMediatorControllerServer) mustEmbedUnimplementedMediatorControllerServer() {}

// UnsafeMediatorControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediatorControllerServer will
// result in compilation errors.
type UnsafeMediatorControllerServer interface {
	mustEmbedUnimplementedMediatorControllerServer()
}

func RegisterMediatorControllerServer(s grpc.ServiceRegistrar, srv MediatorControllerServer) {
	s.RegisterService(&MediatorController_ServiceDesc, srv)
}

func _MediatorController_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRouteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediatorControllerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.mediator.services.MediatorController/register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediatorControllerServer).Register(ctx, req.(*RegisterRouteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediatorController_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterRouterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediatorControllerServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.mediator.services.MediatorController/unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediatorControllerServer).Unregister(ctx, req.(*UnregisterRouterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediatorController_Connections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediatorControllerServer).Connections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.mediator.services.MediatorController/connections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediatorControllerServer).Connections(ctx, req.(*ConnectionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediatorController_Reconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconnectRouteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediatorControllerServer).Reconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.mediator.services.MediatorController/reconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediatorControllerServer).Reconnect(ctx, req.(*ReconnectRouteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediatorController_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediatorControllerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.mediator.services.MediatorController/status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediatorControllerServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediatorController_BatchPickup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchPickupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediatorControllerServer).BatchPickup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.mediator.services.MediatorController/batchPickup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediatorControllerServer).BatchPickup(ctx, req.(*BatchPickupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediatorController_ReconnectAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconnectRouteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediatorControllerServer).ReconnectAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.mediator.services.MediatorController/reconnectAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediatorControllerServer).ReconnectAll(ctx, req.(*ReconnectRouteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MediatorController_ServiceDesc is the grpc.ServiceDesc for MediatorController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediatorController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.did.mediator.services.MediatorController",
	HandlerType: (*MediatorControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "register",
			Handler:    _MediatorController_Register_Handler,
		},
		{
			MethodName: "unregister",
			Handler:    _MediatorController_Unregister_Handler,
		},
		{
			MethodName: "connections",
			Handler:    _MediatorController_Connections_Handler,
		},
		{
			MethodName: "reconnect",
			Handler:    _MediatorController_Reconnect_Handler,
		},
		{
			MethodName: "status",
			Handler:    _MediatorController_Status_Handler,
		},
		{
			MethodName: "batchPickup",
			Handler:    _MediatorController_BatchPickup_Handler,
		},
		{
			MethodName: "reconnectAll",
			Handler:    _MediatorController_ReconnectAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/did/mediator/services/mediator.proto",
}
