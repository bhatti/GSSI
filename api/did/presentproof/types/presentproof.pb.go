// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: api/did/presentproof/types/presentproof.proto

package types

import (
	types "github.com/bhatti/GSSI/api/did/doc/types"
	types1 "github.com/bhatti/GSSI/api/vc/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Schema input descriptor schema.
type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri      string `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`            // from presexch
	Required bool   `protobuf:"varint,4,opt,name=required,proto3" json:"required,omitempty"` // from presexch
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{0}
}

func (x *Schema) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Schema) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

// GenericProposePresentation combination of V2 and V3
// swagger:model
type GenericProposePresentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // @id
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // @type
	// Comment is a field that provides some human readable information about the proposed presentation.
	// TODO: Should follow DIDComm conventions for l10n. [Issue #1300]
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	// Formats contains an entry for each proposal~attach array entry, including an optional value of the
	// attachment @id (if attachments are present) and the verifiable presentation format and version of the attachment.
	Formats []*Format `protobuf:"bytes,4,rep,name=formats,proto3" json:"formats,omitempty"`
	// ProposalsAttach is an array of attachments that further define the presentation request being proposed.
	// This might be used to clarify which formats or format versions are wanted.
	ProposalAttach []*types.Attachment `protobuf:"bytes,5,rep,name=proposal_attach,json=proposalAttach,proto3" json:"proposal_attach,omitempty"` //proposals~attach
	// V3
	Body *ProposePresentationV3Body `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
	// Attachments is an array of attachments that further define the presentation request being proposed.
	// This might be used to clarify which formats or format versions are wanted.
	Attachments []*types.AttachmentV2 `protobuf:"bytes,7,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *GenericProposePresentation) Reset() {
	*x = GenericProposePresentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericProposePresentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericProposePresentation) ProtoMessage() {}

func (x *GenericProposePresentation) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericProposePresentation.ProtoReflect.Descriptor instead.
func (*GenericProposePresentation) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{1}
}

func (x *GenericProposePresentation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GenericProposePresentation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GenericProposePresentation) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *GenericProposePresentation) GetFormats() []*Format {
	if x != nil {
		return x.Formats
	}
	return nil
}

func (x *GenericProposePresentation) GetProposalAttach() []*types.Attachment {
	if x != nil {
		return x.ProposalAttach
	}
	return nil
}

func (x *GenericProposePresentation) GetBody() *ProposePresentationV3Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *GenericProposePresentation) GetAttachments() []*types.AttachmentV2 {
	if x != nil {
		return x.Attachments
	}
	return nil
}

// ProposePresentationV2 is an optional message sent by the prover to the verifier to initiate a proof presentation
// process, or in response to a request-presentation message when the prover wants to propose
// using a different presentation format or request.
// swagger:model
type ProposePresentationV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // @id
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // @type
	// Comment is a field that provides some human readable information about the proposed presentation.
	// TODO: Should follow DIDComm conventions for l10n. [Issue #1300]
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	// Formats contains an entry for each proposal~attach array entry, including an optional value of the
	// attachment @id (if attachments are present) and the verifiable presentation format and version of the attachment.
	Formats []*Format `protobuf:"bytes,4,rep,name=formats,proto3" json:"formats,omitempty"`
	// ProposalsAttach is an array of attachments that further define the presentation request being proposed.
	// This might be used to clarify which formats or format versions are wanted.
	ProposalAttach []*types.Attachment `protobuf:"bytes,5,rep,name=proposal_attach,json=proposalAttach,proto3" json:"proposal_attach,omitempty"` //proposals~attach
}

func (x *ProposePresentationV2) Reset() {
	*x = ProposePresentationV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposePresentationV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposePresentationV2) ProtoMessage() {}

func (x *ProposePresentationV2) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposePresentationV2.ProtoReflect.Descriptor instead.
func (*ProposePresentationV2) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{2}
}

func (x *ProposePresentationV2) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProposePresentationV2) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProposePresentationV2) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ProposePresentationV2) GetFormats() []*Format {
	if x != nil {
		return x.Formats
	}
	return nil
}

func (x *ProposePresentationV2) GetProposalAttach() []*types.Attachment {
	if x != nil {
		return x.ProposalAttach
	}
	return nil
}

// ProposePresentationV3 is an optional message sent by the prover to the verifier to initiate a proof presentation
// process, or in response to a request-presentation message when the prover wants to propose
// using a different presentation format or request.
// swagger:model
type ProposePresentationV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // @id
	Type string                     `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // @type
	Body *ProposePresentationV3Body `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	// Attachments is an array of attachments that further define the presentation request being proposed.
	// This might be used to clarify which formats or format versions are wanted.
	Attachments []*types.AttachmentV2 `protobuf:"bytes,4,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *ProposePresentationV3) Reset() {
	*x = ProposePresentationV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposePresentationV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposePresentationV3) ProtoMessage() {}

func (x *ProposePresentationV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposePresentationV3.ProtoReflect.Descriptor instead.
func (*ProposePresentationV3) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{3}
}

func (x *ProposePresentationV3) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProposePresentationV3) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProposePresentationV3) GetBody() *ProposePresentationV3Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *ProposePresentationV3) GetAttachments() []*types.AttachmentV2 {
	if x != nil {
		return x.Attachments
	}
	return nil
}

// ProposePresentationV3Body represents body for ProposePresentationV3.
type ProposePresentationV3Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoalCode string `protobuf:"bytes,1,opt,name=goal_code,json=goalCode,proto3" json:"goal_code,omitempty"`
	// Comment is a field that provides some human readable information about the proposed presentation.
	// TODO: Should follow DIDComm conventions for l10n. [Issue #1300]
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *ProposePresentationV3Body) Reset() {
	*x = ProposePresentationV3Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposePresentationV3Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposePresentationV3Body) ProtoMessage() {}

func (x *ProposePresentationV3Body) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposePresentationV3Body.ProtoReflect.Descriptor instead.
func (*ProposePresentationV3Body) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{4}
}

func (x *ProposePresentationV3Body) GetGoalCode() string {
	if x != nil {
		return x.GoalCode
	}
	return ""
}

func (x *ProposePresentationV3Body) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

// GenericRequestPresentation combination of V2 and V3
// swagger:model
type GenericRequestPresentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // @id
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // @type
	// Comment is a field that provides some human readable information about the proposed presentation.
	// TODO: Should follow DIDComm conventions for l10n. [Issue #1300]
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	// WillConfirm is a field that defaults to "false" to indicate that the verifier will or will not
	// send a post-presentation confirmation ack message.
	WillConfirm bool `protobuf:"varint,4,opt,name=will_confirm,json=willConfirm,proto3" json:"will_confirm,omitempty"`
	// Formats contains an entry for each request_presentations~attach array entry, providing the the value of the
	// attachment @id and the verifiable presentation request format and version of the attachment.
	Formats []*Format `protobuf:"bytes,5,rep,name=formats,proto3" json:"formats,omitempty"`
	// RequestPresentationsAttach is an array of attachments containing the acceptable verifiable presentation requests.
	RequestPresentationsAttach []*types.Attachment `protobuf:"bytes,6,rep,name=request_presentations_attach,json=requestPresentationsAttach,proto3" json:"request_presentations_attach,omitempty"` // request_presentations~attach
	// V3
	Body *RequestPresentationV3Body `protobuf:"bytes,7,opt,name=body,proto3" json:"body,omitempty"`
	// Attachments is an array of attachments containing the acceptable verifiable presentation requests.
	Attachments []*types.AttachmentV2 `protobuf:"bytes,8,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *GenericRequestPresentation) Reset() {
	*x = GenericRequestPresentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericRequestPresentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericRequestPresentation) ProtoMessage() {}

func (x *GenericRequestPresentation) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericRequestPresentation.ProtoReflect.Descriptor instead.
func (*GenericRequestPresentation) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{5}
}

func (x *GenericRequestPresentation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GenericRequestPresentation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GenericRequestPresentation) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *GenericRequestPresentation) GetWillConfirm() bool {
	if x != nil {
		return x.WillConfirm
	}
	return false
}

func (x *GenericRequestPresentation) GetFormats() []*Format {
	if x != nil {
		return x.Formats
	}
	return nil
}

func (x *GenericRequestPresentation) GetRequestPresentationsAttach() []*types.Attachment {
	if x != nil {
		return x.RequestPresentationsAttach
	}
	return nil
}

func (x *GenericRequestPresentation) GetBody() *RequestPresentationV3Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *GenericRequestPresentation) GetAttachments() []*types.AttachmentV2 {
	if x != nil {
		return x.Attachments
	}
	return nil
}

// RequestPresentationV2 describes values that need to be revealed and predicates that need to be fulfilled.
// swagger:model
type RequestPresentationV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // @id
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // @type
	// Comment is a field that provides some human readable information about the proposed presentation.
	// TODO: Should follow DIDComm conventions for l10n. [Issue #1300]
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	// WillConfirm is a field that defaults to "false" to indicate that the verifier will or will not
	// send a post-presentation confirmation ack message.
	WillConfirm bool `protobuf:"varint,4,opt,name=will_confirm,json=willConfirm,proto3" json:"will_confirm,omitempty"`
	// Formats contains an entry for each request_presentations~attach array entry, providing the the value of the
	// attachment @id and the verifiable presentation request format and version of the attachment.
	Formats []*Format `protobuf:"bytes,5,rep,name=formats,proto3" json:"formats,omitempty"`
	// RequestPresentationsAttach is an array of attachments containing the acceptable verifiable presentation requests.
	RequestPresentationsAttach []*types.Attachment `protobuf:"bytes,6,rep,name=request_presentations_attach,json=requestPresentationsAttach,proto3" json:"request_presentations_attach,omitempty"` // request_presentations~attach
}

func (x *RequestPresentationV2) Reset() {
	*x = RequestPresentationV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestPresentationV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPresentationV2) ProtoMessage() {}

func (x *RequestPresentationV2) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPresentationV2.ProtoReflect.Descriptor instead.
func (*RequestPresentationV2) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{6}
}

func (x *RequestPresentationV2) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestPresentationV2) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RequestPresentationV2) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *RequestPresentationV2) GetWillConfirm() bool {
	if x != nil {
		return x.WillConfirm
	}
	return false
}

func (x *RequestPresentationV2) GetFormats() []*Format {
	if x != nil {
		return x.Formats
	}
	return nil
}

func (x *RequestPresentationV2) GetRequestPresentationsAttach() []*types.Attachment {
	if x != nil {
		return x.RequestPresentationsAttach
	}
	return nil
}

// RequestPresentationV3 describes values that need to be revealed and predicates that need to be fulfilled.
// swagger:model
type RequestPresentationV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // @id
	Type string                     `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // @type
	Body *RequestPresentationV3Body `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	// Attachments is an array of attachments containing the acceptable verifiable presentation requests.
	Attachments []*types.AttachmentV2 `protobuf:"bytes,4,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *RequestPresentationV3) Reset() {
	*x = RequestPresentationV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestPresentationV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPresentationV3) ProtoMessage() {}

func (x *RequestPresentationV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPresentationV3.ProtoReflect.Descriptor instead.
func (*RequestPresentationV3) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{7}
}

func (x *RequestPresentationV3) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RequestPresentationV3) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RequestPresentationV3) GetBody() *RequestPresentationV3Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *RequestPresentationV3) GetAttachments() []*types.AttachmentV2 {
	if x != nil {
		return x.Attachments
	}
	return nil
}

// RequestPresentationV3Body represents body for RequestPresentationV3.
type RequestPresentationV3Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoalCode string `protobuf:"bytes,1,opt,name=goal_code,json=goalCode,proto3" json:"goal_code,omitempty"`
	// Comment is a field that provides some human readable information about the proposed presentation.
	// TODO: Should follow DIDComm conventions for l10n. [Issue #1300]
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	// WillConfirm is a field that defaults to "false" to indicate that the verifier will or will not
	// send a post-presentation confirmation ack message.
	WillConfirm bool `protobuf:"varint,3,opt,name=will_confirm,json=willConfirm,proto3" json:"will_confirm,omitempty"`
}

func (x *RequestPresentationV3Body) Reset() {
	*x = RequestPresentationV3Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestPresentationV3Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPresentationV3Body) ProtoMessage() {}

func (x *RequestPresentationV3Body) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPresentationV3Body.ProtoReflect.Descriptor instead.
func (*RequestPresentationV3Body) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{8}
}

func (x *RequestPresentationV3Body) GetGoalCode() string {
	if x != nil {
		return x.GoalCode
	}
	return ""
}

func (x *RequestPresentationV3Body) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *RequestPresentationV3Body) GetWillConfirm() bool {
	if x != nil {
		return x.WillConfirm
	}
	return false
}

// Format contains the value of the attachment @id and the verifiable credential format of the attachment.
type Format struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttachId string `protobuf:"bytes,1,opt,name=attach_id,json=attachId,proto3" json:"attach_id,omitempty"`
	Format   string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *Format) Reset() {
	*x = Format{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Format) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Format) ProtoMessage() {}

func (x *Format) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Format.ProtoReflect.Descriptor instead.
func (*Format) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{9}
}

func (x *Format) GetAttachId() string {
	if x != nil {
		return x.AttachId
	}
	return ""
}

func (x *Format) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

// SubmissionRequirement describes input that must be submitted via a Presentation Submission
// to satisfy Verifier demands.
// swagger:model
type SubmissionRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Purpose    string                   `protobuf:"bytes,2,opt,name=purpose,proto3" json:"purpose,omitempty"`
	Rule       string                   `protobuf:"bytes,3,opt,name=rule,proto3" json:"rule,omitempty"`
	Count      int64                    `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Min        int64                    `protobuf:"varint,5,opt,name=min,proto3" json:"min,omitempty"`
	Max        int64                    `protobuf:"varint,6,opt,name=max,proto3" json:"max,omitempty"`
	From       string                   `protobuf:"bytes,7,opt,name=from,proto3" json:"from,omitempty"`
	FromNested []*SubmissionRequirement `protobuf:"bytes,8,rep,name=from_nested,json=fromNested,proto3" json:"from_nested,omitempty"`
}

func (x *SubmissionRequirement) Reset() {
	*x = SubmissionRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionRequirement) ProtoMessage() {}

func (x *SubmissionRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionRequirement.ProtoReflect.Descriptor instead.
func (*SubmissionRequirement) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{10}
}

func (x *SubmissionRequirement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubmissionRequirement) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *SubmissionRequirement) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

func (x *SubmissionRequirement) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SubmissionRequirement) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *SubmissionRequirement) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *SubmissionRequirement) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SubmissionRequirement) GetFromNested() []*SubmissionRequirement {
	if x != nil {
		return x.FromNested
	}
	return nil
}

// InputDescriptor input descriptors.
// swagger:model
type InputDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Group       []string              `protobuf:"bytes,2,rep,name=group,proto3" json:"group,omitempty"`
	Name        string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Purpose     string                `protobuf:"bytes,4,opt,name=purpose,proto3" json:"purpose,omitempty"`
	Metadata    map[string]*anypb.Any `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Schema      []*Schema             `protobuf:"bytes,6,rep,name=schema,proto3" json:"schema,omitempty"` // uri and required
	Constraints *types1.Constraints   `protobuf:"bytes,7,opt,name=constraints,proto3" json:"constraints,omitempty"`
}

func (x *InputDescriptor) Reset() {
	*x = InputDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputDescriptor) ProtoMessage() {}

func (x *InputDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputDescriptor.ProtoReflect.Descriptor instead.
func (*InputDescriptor) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{11}
}

func (x *InputDescriptor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InputDescriptor) GetGroup() []string {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *InputDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InputDescriptor) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *InputDescriptor) GetMetadata() map[string]*anypb.Any {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InputDescriptor) GetSchema() []*Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *InputDescriptor) GetConstraints() *types1.Constraints {
	if x != nil {
		return x.Constraints
	}
	return nil
}

// InputDescriptorMapping maps an InputDescriptor to a verifiable credential pointed to by the JSONPath in `Path`.
type InputDescriptorMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Format     string                  `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	Path       string                  `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	PathNested *InputDescriptorMapping `protobuf:"bytes,4,opt,name=path_nested,json=pathNested,proto3" json:"path_nested,omitempty"`
}

func (x *InputDescriptorMapping) Reset() {
	*x = InputDescriptorMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputDescriptorMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputDescriptorMapping) ProtoMessage() {}

func (x *InputDescriptorMapping) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputDescriptorMapping.ProtoReflect.Descriptor instead.
func (*InputDescriptorMapping) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{12}
}

func (x *InputDescriptorMapping) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *InputDescriptorMapping) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *InputDescriptorMapping) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *InputDescriptorMapping) GetPathNested() *InputDescriptorMapping {
	if x != nil {
		return x.PathNested
	}
	return nil
}

// ResolvedProperty contains resolved result for each resolved property.
type ResolvedProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema *Schema    `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Label  string     `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Value  *anypb.Any `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ResolvedProperty) Reset() {
	*x = ResolvedProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolvedProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedProperty) ProtoMessage() {}

func (x *ResolvedProperty) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedProperty.ProtoReflect.Descriptor instead.
func (*ResolvedProperty) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{13}
}

func (x *ResolvedProperty) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ResolvedProperty) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ResolvedProperty) GetValue() *anypb.Any {
	if x != nil {
		return x.Value
	}
	return nil
}

// DisplayMappingObject represents a Display Mapping Object as defined in
// https://identity.foundation/credential-manifest/wallet-rendering/#display-mapping-object
// There are two possibilities here:
// If the text field is used, then schema is not needed.
// If the path field is used, then schema is required.
// TODO (#3045) Support for JSONPath bracket notation.
// swagger:model
type DisplayMappingObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text     string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Path     []string `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"`
	Schema   *Schema  `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	Fallback string   `protobuf:"bytes,4,opt,name=fallback,proto3" json:"fallback,omitempty"`
}

func (x *DisplayMappingObject) Reset() {
	*x = DisplayMappingObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayMappingObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayMappingObject) ProtoMessage() {}

func (x *DisplayMappingObject) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayMappingObject.ProtoReflect.Descriptor instead.
func (*DisplayMappingObject) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{14}
}

func (x *DisplayMappingObject) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *DisplayMappingObject) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *DisplayMappingObject) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *DisplayMappingObject) GetFallback() string {
	if x != nil {
		return x.Fallback
	}
	return ""
}

// LabeledDisplayMappingObject is a DisplayMappingObject with an additional Label field.
// They are used for the dynamic Properties array in a DataDisplayDescriptor.
// swagger:model
type LabeledDisplayMappingObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text     string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Path     []string `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"`
	Schema   *Schema  `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	Fallback string   `protobuf:"bytes,4,opt,name=fallback,proto3" json:"fallback,omitempty"`
	Label    string   `protobuf:"bytes,5,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *LabeledDisplayMappingObject) Reset() {
	*x = LabeledDisplayMappingObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabeledDisplayMappingObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabeledDisplayMappingObject) ProtoMessage() {}

func (x *LabeledDisplayMappingObject) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabeledDisplayMappingObject.ProtoReflect.Descriptor instead.
func (*LabeledDisplayMappingObject) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{15}
}

func (x *LabeledDisplayMappingObject) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *LabeledDisplayMappingObject) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *LabeledDisplayMappingObject) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *LabeledDisplayMappingObject) GetFallback() string {
	if x != nil {
		return x.Fallback
	}
	return ""
}

func (x *LabeledDisplayMappingObject) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// ResolvedDescriptor typically represents results of resolving manifests by credential fulfillment.
// typically represents a DataDisplayDescriptor that's had its various "template" fields resolved
// into concrete values based on a Verifiable Credential.
// swagger:model
type ResolvedDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DescriptorId string              `protobuf:"bytes,1,opt,name=descriptor_id,json=descriptorId,proto3" json:"descriptor_id,omitempty"` // descriptionId
	Title        string              `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle     string              `protobuf:"bytes,3,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	Description  string              `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Styles       *types1.Styles      `protobuf:"bytes,5,opt,name=styles,proto3" json:"styles,omitempty"`
	Properties   []*ResolvedProperty `protobuf:"bytes,6,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *ResolvedDescriptor) Reset() {
	*x = ResolvedDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolvedDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedDescriptor) ProtoMessage() {}

func (x *ResolvedDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedDescriptor.ProtoReflect.Descriptor instead.
func (*ResolvedDescriptor) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{16}
}

func (x *ResolvedDescriptor) GetDescriptorId() string {
	if x != nil {
		return x.DescriptorId
	}
	return ""
}

func (x *ResolvedDescriptor) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ResolvedDescriptor) GetSubtitle() string {
	if x != nil {
		return x.Subtitle
	}
	return ""
}

func (x *ResolvedDescriptor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ResolvedDescriptor) GetStyles() *types1.Styles {
	if x != nil {
		return x.Styles
	}
	return nil
}

func (x *ResolvedDescriptor) GetProperties() []*ResolvedProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

// DataDisplayDescriptor represents a Data Display Descriptor as defined in
// https://identity.foundation/credential-manifest/wallet-rendering/#data-display.
// swagger:model
type DataDisplayDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title       *DisplayMappingObject          `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Subtitle    *DisplayMappingObject          `protobuf:"bytes,2,opt,name=subtitle,proto3" json:"subtitle,omitempty"`
	Description *DisplayMappingObject          `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Properties  []*LabeledDisplayMappingObject `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *DataDisplayDescriptor) Reset() {
	*x = DataDisplayDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataDisplayDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataDisplayDescriptor) ProtoMessage() {}

func (x *DataDisplayDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataDisplayDescriptor.ProtoReflect.Descriptor instead.
func (*DataDisplayDescriptor) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{17}
}

func (x *DataDisplayDescriptor) GetTitle() *DisplayMappingObject {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *DataDisplayDescriptor) GetSubtitle() *DisplayMappingObject {
	if x != nil {
		return x.Subtitle
	}
	return nil
}

func (x *DataDisplayDescriptor) GetDescription() *DisplayMappingObject {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *DataDisplayDescriptor) GetProperties() []*LabeledDisplayMappingObject {
	if x != nil {
		return x.Properties
	}
	return nil
}

// OutputDescriptor represents an Output Descriptor object as defined in
// https://identity.foundation/credential-manifest/#output-descriptor.
// swagger:model
type OutputDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Schema      string                 `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Name        string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Display     *DataDisplayDescriptor `protobuf:"bytes,5,opt,name=display,proto3" json:"display,omitempty"`
	Styles      *types1.Styles         `protobuf:"bytes,6,opt,name=styles,proto3" json:"styles,omitempty"`
}

func (x *OutputDescriptor) Reset() {
	*x = OutputDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputDescriptor) ProtoMessage() {}

func (x *OutputDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputDescriptor.ProtoReflect.Descriptor instead.
func (*OutputDescriptor) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{18}
}

func (x *OutputDescriptor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OutputDescriptor) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *OutputDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OutputDescriptor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OutputDescriptor) GetDisplay() *DataDisplayDescriptor {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *OutputDescriptor) GetStyles() *types1.Styles {
	if x != nil {
		return x.Styles
	}
	return nil
}

// CredentialFulfillment represents a Credential Fulfillment object as defined in
// https://identity.foundation/credential-manifest/#credential-fulfillment.
// swagger:model
type CredentialFulfillment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // @id
	ManifestId    string             `protobuf:"bytes,2,opt,name=manifest_id,json=manifestId,proto3" json:"manifest_id,omitempty"`
	DescriptorMap []*InputDescriptor `protobuf:"bytes,3,rep,name=descriptor_map,json=descriptorMap,proto3" json:"descriptor_map,omitempty"`
}

func (x *CredentialFulfillment) Reset() {
	*x = CredentialFulfillment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialFulfillment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialFulfillment) ProtoMessage() {}

func (x *CredentialFulfillment) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialFulfillment.ProtoReflect.Descriptor instead.
func (*CredentialFulfillment) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{19}
}

func (x *CredentialFulfillment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CredentialFulfillment) GetManifestId() string {
	if x != nil {
		return x.ManifestId
	}
	return ""
}

func (x *CredentialFulfillment) GetDescriptorMap() []*InputDescriptor {
	if x != nil {
		return x.DescriptorMap
	}
	return nil
}

// CredentialManifest represents a Credential Manifest object as defined in
// https://identity.foundation/credential-manifest/#credential-manifest-2.
// swagger:model
type CredentialManifest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // @id
	Version                string                  `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Issuer                 *types1.Issuer          `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	OutputDescriptors      []*OutputDescriptor     `protobuf:"bytes,4,rep,name=output_descriptors,json=outputDescriptors,proto3" json:"output_descriptors,omitempty"`
	Format                 *Format                 `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
	PresentationDefinition *PresentationDefinition `protobuf:"bytes,6,opt,name=presentation_definition,json=presentationDefinition,proto3" json:"presentation_definition,omitempty"`
}

func (x *CredentialManifest) Reset() {
	*x = CredentialManifest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialManifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialManifest) ProtoMessage() {}

func (x *CredentialManifest) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialManifest.ProtoReflect.Descriptor instead.
func (*CredentialManifest) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{20}
}

func (x *CredentialManifest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CredentialManifest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CredentialManifest) GetIssuer() *types1.Issuer {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *CredentialManifest) GetOutputDescriptors() []*OutputDescriptor {
	if x != nil {
		return x.OutputDescriptors
	}
	return nil
}

func (x *CredentialManifest) GetFormat() *Format {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *CredentialManifest) GetPresentationDefinition() *PresentationDefinition {
	if x != nil {
		return x.PresentationDefinition
	}
	return nil
}

// PresentationDefinition presentation definitions (https://identity.foundation/presentation-exchange/).
// swagger:model
type PresentationDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID unique resource identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name human-friendly name that describes what the Presentation Definition pertains to.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Purpose describes the purpose for which the Presentation Definition’s inputs are being requested.
	Purpose string `protobuf:"bytes,3,opt,name=purpose,proto3" json:"purpose,omitempty"`
	Locale  string `protobuf:"bytes,4,opt,name=locale,proto3" json:"locale,omitempty"`
	// Format is an object with one or more properties matching the registered Claim Format Designations
	// (jwt, jwt_vc, jwt_vp, etc.) to inform the Holder of the claim format configurations the Verifier can process.
	Format *Format `protobuf:"bytes,5,opt,name=format,proto3" json:"format,omitempty"`
	// SubmissionRequirements must conform to the Submission Requirement Format.
	// If not present, all inputs listed in the InputDescriptors array are required for submission.
	SubmissionRequirements []*SubmissionRequirement `protobuf:"bytes,6,rep,name=submission_requirements,json=submissionRequirements,proto3" json:"submission_requirements,omitempty"`
	InputDescriptors       []*InputDescriptor       `protobuf:"bytes,7,rep,name=input_descriptors,json=inputDescriptors,proto3" json:"input_descriptors,omitempty"`
}

func (x *PresentationDefinition) Reset() {
	*x = PresentationDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresentationDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresentationDefinition) ProtoMessage() {}

func (x *PresentationDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresentationDefinition.ProtoReflect.Descriptor instead.
func (*PresentationDefinition) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{21}
}

func (x *PresentationDefinition) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PresentationDefinition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PresentationDefinition) GetPurpose() string {
	if x != nil {
		return x.Purpose
	}
	return ""
}

func (x *PresentationDefinition) GetLocale() string {
	if x != nil {
		return x.Locale
	}
	return ""
}

func (x *PresentationDefinition) GetFormat() *Format {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *PresentationDefinition) GetSubmissionRequirements() []*SubmissionRequirement {
	if x != nil {
		return x.SubmissionRequirements
	}
	return nil
}

func (x *PresentationDefinition) GetInputDescriptors() []*InputDescriptor {
	if x != nil {
		return x.InputDescriptors
	}
	return nil
}

// JWTPresClaims is JWT Claims extension by Verifiable Presentation (with custom "vp" claim).
// swagger:model
type JWTPresClaims struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iss string           `protobuf:"bytes,1,opt,name=iss,proto3" json:"iss,omitempty"`  // issuer
	Sub string           `protobuf:"bytes,2,opt,name=sub,proto3" json:"sub,omitempty"`  // subject
	Aud []string         `protobuf:"bytes,3,rep,name=aud,proto3" json:"aud,omitempty"`  // audience
	Exp int64            `protobuf:"varint,4,opt,name=exp,proto3" json:"exp,omitempty"` // expiry
	Nbf int64            `protobuf:"varint,5,opt,name=nbf,proto3" json:"nbf,omitempty"` // NotBefore
	Iat int64            `protobuf:"varint,6,opt,name=iat,proto3" json:"iat,omitempty"` // IssuedAt
	Jti string           `protobuf:"bytes,7,opt,name=jti,proto3" json:"jti,omitempty"`  // id
	Vp  *RawPresentation `protobuf:"bytes,8,opt,name=vp,proto3" json:"vp,omitempty"`
}

func (x *JWTPresClaims) Reset() {
	*x = JWTPresClaims{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTPresClaims) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTPresClaims) ProtoMessage() {}

func (x *JWTPresClaims) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTPresClaims.ProtoReflect.Descriptor instead.
func (*JWTPresClaims) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{22}
}

func (x *JWTPresClaims) GetIss() string {
	if x != nil {
		return x.Iss
	}
	return ""
}

func (x *JWTPresClaims) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *JWTPresClaims) GetAud() []string {
	if x != nil {
		return x.Aud
	}
	return nil
}

func (x *JWTPresClaims) GetExp() int64 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *JWTPresClaims) GetNbf() int64 {
	if x != nil {
		return x.Nbf
	}
	return 0
}

func (x *JWTPresClaims) GetIat() int64 {
	if x != nil {
		return x.Iat
	}
	return 0
}

func (x *JWTPresClaims) GetJti() string {
	if x != nil {
		return x.Jti
	}
	return ""
}

func (x *JWTPresClaims) GetVp() *RawPresentation {
	if x != nil {
		return x.Vp
	}
	return nil
}

// RawPresentation is a basic verifiable credential.
// swagger:model
type RawPresentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // @id
	Type                 string     `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // @type
	Holder               string     `protobuf:"bytes,3,opt,name=holder,proto3" json:"holder,omitempty"`
	Context              *anypb.Any `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`                           // interface{} context
	VerifiableCredential *anypb.Any `protobuf:"bytes,5,opt,name=verifiableCredential,proto3" json:"verifiableCredential,omitempty"` // interface
	Proof                []byte     `protobuf:"bytes,6,opt,name=proof,proto3" json:"proof,omitempty"`                               // json.RawMessage
	// All unmapped fields are put here.
	CustomFields map[string]*anypb.Any `protobuf:"bytes,7,rep,name=customFields,proto3" json:"customFields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RawPresentation) Reset() {
	*x = RawPresentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawPresentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawPresentation) ProtoMessage() {}

func (x *RawPresentation) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawPresentation.ProtoReflect.Descriptor instead.
func (*RawPresentation) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{23}
}

func (x *RawPresentation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RawPresentation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RawPresentation) GetHolder() string {
	if x != nil {
		return x.Holder
	}
	return ""
}

func (x *RawPresentation) GetContext() *anypb.Any {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RawPresentation) GetVerifiableCredential() *anypb.Any {
	if x != nil {
		return x.VerifiableCredential
	}
	return nil
}

func (x *RawPresentation) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *RawPresentation) GetCustomFields() map[string]*anypb.Any {
	if x != nil {
		return x.CustomFields
	}
	return nil
}

// Combination of V2 and V3
// swagger:model
type GenericPresentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // @id
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // @type
	// Comment is a field that provides some human readable information about the proposed presentation.
	// TODO: Should follow DIDComm conventions for l10n. [Issue #1300].
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	// Formats contains an entry for each presentations~attach array entry, providing the the value of the attachment
	// @id and the verifiable presentation format and version of the attachment.
	Formats []*Format `protobuf:"bytes,4,rep,name=formats,proto3" json:"formats,omitempty"`
	// PresentationsAttach an array of attachments containing the presentation in the requested format(s).
	PresentationsAttach []*types.Attachment `protobuf:"bytes,5,rep,name=presentations_attach,json=presentationsAttach,proto3" json:"presentations_attach,omitempty"` //presentations~attach
	// Attachments is an array of attachments that further define the presentation request being proposed.
	// This might be used to clarify which formats or format versions are wanted.
	Attachments []*types.AttachmentV2 `protobuf:"bytes,6,rep,name=attachments,proto3" json:"attachments,omitempty"`
	//
	Body *PresentationV3Body `protobuf:"bytes,7,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *GenericPresentation) Reset() {
	*x = GenericPresentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericPresentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericPresentation) ProtoMessage() {}

func (x *GenericPresentation) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericPresentation.ProtoReflect.Descriptor instead.
func (*GenericPresentation) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{24}
}

func (x *GenericPresentation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GenericPresentation) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GenericPresentation) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *GenericPresentation) GetFormats() []*Format {
	if x != nil {
		return x.Formats
	}
	return nil
}

func (x *GenericPresentation) GetPresentationsAttach() []*types.Attachment {
	if x != nil {
		return x.PresentationsAttach
	}
	return nil
}

func (x *GenericPresentation) GetAttachments() []*types.AttachmentV2 {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *GenericPresentation) GetBody() *PresentationV3Body {
	if x != nil {
		return x.Body
	}
	return nil
}

// PresentationV2 is a response to a RequestPresentationV2 message and contains signed presentations.
// TODO: Add ~please_ack decorator support for the protocol [Issue #2047].
// swagger:model
type PresentationV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`     // @id
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // @type
	// Comment is a field that provides some human readable information about the proposed presentation.
	// TODO: Should follow DIDComm conventions for l10n. [Issue #1300].
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	// Formats contains an entry for each presentations~attach array entry, providing the the value of the attachment
	// @id and the verifiable presentation format and version of the attachment.
	Formats []*Format `protobuf:"bytes,4,rep,name=formats,proto3" json:"formats,omitempty"`
	// PresentationsAttach an array of attachments containing the presentation in the requested format(s).
	PresentationsAttach []*types.Attachment `protobuf:"bytes,5,rep,name=presentations_attach,json=presentationsAttach,proto3" json:"presentations_attach,omitempty"` //presentations~attach
}

func (x *PresentationV2) Reset() {
	*x = PresentationV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresentationV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresentationV2) ProtoMessage() {}

func (x *PresentationV2) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresentationV2.ProtoReflect.Descriptor instead.
func (*PresentationV2) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{25}
}

func (x *PresentationV2) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PresentationV2) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PresentationV2) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *PresentationV2) GetFormats() []*Format {
	if x != nil {
		return x.Formats
	}
	return nil
}

func (x *PresentationV2) GetPresentationsAttach() []*types.Attachment {
	if x != nil {
		return x.PresentationsAttach
	}
	return nil
}

// PresentationV3 is a response to a RequestPresentationV3 message and contains signed presentations.
// swagger:model
type PresentationV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string              `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // @type
	Body *PresentationV3Body `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	// Attachments is an array of attachments that further define the presentation request being proposed.
	// This might be used to clarify which formats or format versions are wanted.
	Attachments []*types.AttachmentV2 `protobuf:"bytes,3,rep,name=attachments,proto3" json:"attachments,omitempty"`
}

func (x *PresentationV3) Reset() {
	*x = PresentationV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresentationV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresentationV3) ProtoMessage() {}

func (x *PresentationV3) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresentationV3.ProtoReflect.Descriptor instead.
func (*PresentationV3) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{26}
}

func (x *PresentationV3) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PresentationV3) GetBody() *PresentationV3Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *PresentationV3) GetAttachments() []*types.AttachmentV2 {
	if x != nil {
		return x.Attachments
	}
	return nil
}

// PresentationV3Body represents body for PresentationV3.
type PresentationV3Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoalCode string `protobuf:"bytes,1,opt,name=goal_code,json=goalCode,proto3" json:"goal_code,omitempty"`
	// Comment is a field that provides some human readable information about the proposed presentation.
	// TODO: Should follow DIDComm conventions for l10n. [Issue #1300]
	Comment string `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *PresentationV3Body) Reset() {
	*x = PresentationV3Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresentationV3Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresentationV3Body) ProtoMessage() {}

func (x *PresentationV3Body) ProtoReflect() protoreflect.Message {
	mi := &file_api_did_presentproof_types_presentproof_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresentationV3Body.ProtoReflect.Descriptor instead.
func (*PresentationV3Body) Descriptor() ([]byte, []int) {
	return file_api_did_presentproof_types_presentproof_proto_rawDescGZIP(), []int{27}
}

func (x *PresentationV3Body) GetGoalCode() string {
	if x != nil {
		return x.GoalCode
	}
	return ""
}

func (x *PresentationV3Body) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

var File_api_did_presentproof_types_presentproof_proto protoreflect.FileDescriptor

var file_api_did_presentproof_types_presentproof_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x64, 0x2f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1a, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x64, 0x2f,
	0x64, 0x6f, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6f, 0x75, 0x74, 0x6f, 0x66, 0x62,
	0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0xee, 0x02, 0x0a,
	0x1a, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x07,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12,
	0x49, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x32,
	0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xdb, 0x01,
	0x0a, 0x15, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x22, 0xc9, 0x01, 0x0a, 0x15,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33,
	0x42, 0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x6f, 0x61, 0x6c, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xaa, 0x03, 0x0a, 0x1a,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x77, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x3c, 0x0a, 0x07, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x1c, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x49, 0x0a, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x0b, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x97, 0x02, 0x0a, 0x15, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x12, 0x3c, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x73, 0x12, 0x5f, 0x0a, 0x1c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69,
	0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x22, 0xc9, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x49, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x33, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56,
	0x32, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x75,
	0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x6f, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x6f, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x6c, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x22, 0x3d, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x22, 0xfb, 0x01, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x52,
	0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x22, 0x88, 0x03, 0x0a, 0x0f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x3a, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x51, 0x0a, 0x0d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x01,
	0x0a, 0x16, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x53, 0x0a, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70,
	0x61, 0x74, 0x68, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x52, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x3a,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x96, 0x01, 0x0a,
	0x14, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xb3, 0x01, 0x0a, 0x1b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65,
	0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x89, 0x02, 0x0a, 0x12,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xda, 0x02, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x12, 0x46, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x08, 0x73, 0x75, 0x62,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f,
	0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x10, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x63, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x73, 0x52, 0x06, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x46, 0x75, 0x6c, 0x66, 0x69, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x52, 0x0a,
	0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x4d, 0x61,
	0x70, 0x22, 0xf2, 0x02, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x12, 0x5b, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x6b, 0x0a, 0x17, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf0, 0x02, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x6a, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x16, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x58, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x0d, 0x4a, 0x57,
	0x54, 0x50, 0x72, 0x65, 0x73, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x73, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x75, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x61, 0x75,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x65, 0x78, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x62, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6e, 0x62, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x69, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x74, 0x69, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x74, 0x69, 0x12, 0x3b, 0x0a, 0x02, 0x76, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x52, 0x61, 0x77, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x02, 0x76, 0x70, 0x22, 0x97, 0x03, 0x0a, 0x0f, 0x52, 0x61, 0x77, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x48, 0x0a, 0x14, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x14, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x61, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x61, 0x77, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x55, 0x0a, 0x11, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xea, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x07, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x14, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x13, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x52, 0x0b, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69,
	0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x33, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xde, 0x01,
	0x0a, 0x0e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c,
	0x0a, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x14,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x22, 0xab,
	0x01, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x33, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x41, 0x0a, 0x0b, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x69, 0x64, 0x2e, 0x64, 0x6f, 0x63, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x32, 0x52,
	0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x4b, 0x0a, 0x12,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x33, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x6f, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x68, 0x61, 0x74, 0x74, 0x69, 0x2f, 0x47,
	0x53, 0x53, 0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x69, 0x64, 0x2f, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_did_presentproof_types_presentproof_proto_rawDescOnce sync.Once
	file_api_did_presentproof_types_presentproof_proto_rawDescData = file_api_did_presentproof_types_presentproof_proto_rawDesc
)

func file_api_did_presentproof_types_presentproof_proto_rawDescGZIP() []byte {
	file_api_did_presentproof_types_presentproof_proto_rawDescOnce.Do(func() {
		file_api_did_presentproof_types_presentproof_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_did_presentproof_types_presentproof_proto_rawDescData)
	})
	return file_api_did_presentproof_types_presentproof_proto_rawDescData
}

var file_api_did_presentproof_types_presentproof_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_api_did_presentproof_types_presentproof_proto_goTypes = []interface{}{
	(*Schema)(nil),                      // 0: api.did.presentproof.types.Schema
	(*GenericProposePresentation)(nil),  // 1: api.did.presentproof.types.GenericProposePresentation
	(*ProposePresentationV2)(nil),       // 2: api.did.presentproof.types.ProposePresentationV2
	(*ProposePresentationV3)(nil),       // 3: api.did.presentproof.types.ProposePresentationV3
	(*ProposePresentationV3Body)(nil),   // 4: api.did.presentproof.types.ProposePresentationV3Body
	(*GenericRequestPresentation)(nil),  // 5: api.did.presentproof.types.GenericRequestPresentation
	(*RequestPresentationV2)(nil),       // 6: api.did.presentproof.types.RequestPresentationV2
	(*RequestPresentationV3)(nil),       // 7: api.did.presentproof.types.RequestPresentationV3
	(*RequestPresentationV3Body)(nil),   // 8: api.did.presentproof.types.RequestPresentationV3Body
	(*Format)(nil),                      // 9: api.did.presentproof.types.Format
	(*SubmissionRequirement)(nil),       // 10: api.did.presentproof.types.SubmissionRequirement
	(*InputDescriptor)(nil),             // 11: api.did.presentproof.types.InputDescriptor
	(*InputDescriptorMapping)(nil),      // 12: api.did.presentproof.types.InputDescriptorMapping
	(*ResolvedProperty)(nil),            // 13: api.did.presentproof.types.ResolvedProperty
	(*DisplayMappingObject)(nil),        // 14: api.did.presentproof.types.DisplayMappingObject
	(*LabeledDisplayMappingObject)(nil), // 15: api.did.presentproof.types.LabeledDisplayMappingObject
	(*ResolvedDescriptor)(nil),          // 16: api.did.presentproof.types.ResolvedDescriptor
	(*DataDisplayDescriptor)(nil),       // 17: api.did.presentproof.types.DataDisplayDescriptor
	(*OutputDescriptor)(nil),            // 18: api.did.presentproof.types.OutputDescriptor
	(*CredentialFulfillment)(nil),       // 19: api.did.presentproof.types.CredentialFulfillment
	(*CredentialManifest)(nil),          // 20: api.did.presentproof.types.CredentialManifest
	(*PresentationDefinition)(nil),      // 21: api.did.presentproof.types.PresentationDefinition
	(*JWTPresClaims)(nil),               // 22: api.did.presentproof.types.JWTPresClaims
	(*RawPresentation)(nil),             // 23: api.did.presentproof.types.RawPresentation
	(*GenericPresentation)(nil),         // 24: api.did.presentproof.types.GenericPresentation
	(*PresentationV2)(nil),              // 25: api.did.presentproof.types.PresentationV2
	(*PresentationV3)(nil),              // 26: api.did.presentproof.types.PresentationV3
	(*PresentationV3Body)(nil),          // 27: api.did.presentproof.types.PresentationV3Body
	nil,                                 // 28: api.did.presentproof.types.InputDescriptor.MetadataEntry
	nil,                                 // 29: api.did.presentproof.types.RawPresentation.CustomFieldsEntry
	(*types.Attachment)(nil),            // 30: api.did.doc.types.Attachment
	(*types.AttachmentV2)(nil),          // 31: api.did.doc.types.AttachmentV2
	(*types1.Constraints)(nil),          // 32: api.vc.types.Constraints
	(*anypb.Any)(nil),                   // 33: google.protobuf.Any
	(*types1.Styles)(nil),               // 34: api.vc.types.Styles
	(*types1.Issuer)(nil),               // 35: api.vc.types.Issuer
}
var file_api_did_presentproof_types_presentproof_proto_depIdxs = []int32{
	9,  // 0: api.did.presentproof.types.GenericProposePresentation.formats:type_name -> api.did.presentproof.types.Format
	30, // 1: api.did.presentproof.types.GenericProposePresentation.proposal_attach:type_name -> api.did.doc.types.Attachment
	4,  // 2: api.did.presentproof.types.GenericProposePresentation.body:type_name -> api.did.presentproof.types.ProposePresentationV3Body
	31, // 3: api.did.presentproof.types.GenericProposePresentation.attachments:type_name -> api.did.doc.types.AttachmentV2
	9,  // 4: api.did.presentproof.types.ProposePresentationV2.formats:type_name -> api.did.presentproof.types.Format
	30, // 5: api.did.presentproof.types.ProposePresentationV2.proposal_attach:type_name -> api.did.doc.types.Attachment
	4,  // 6: api.did.presentproof.types.ProposePresentationV3.body:type_name -> api.did.presentproof.types.ProposePresentationV3Body
	31, // 7: api.did.presentproof.types.ProposePresentationV3.attachments:type_name -> api.did.doc.types.AttachmentV2
	9,  // 8: api.did.presentproof.types.GenericRequestPresentation.formats:type_name -> api.did.presentproof.types.Format
	30, // 9: api.did.presentproof.types.GenericRequestPresentation.request_presentations_attach:type_name -> api.did.doc.types.Attachment
	8,  // 10: api.did.presentproof.types.GenericRequestPresentation.body:type_name -> api.did.presentproof.types.RequestPresentationV3Body
	31, // 11: api.did.presentproof.types.GenericRequestPresentation.attachments:type_name -> api.did.doc.types.AttachmentV2
	9,  // 12: api.did.presentproof.types.RequestPresentationV2.formats:type_name -> api.did.presentproof.types.Format
	30, // 13: api.did.presentproof.types.RequestPresentationV2.request_presentations_attach:type_name -> api.did.doc.types.Attachment
	8,  // 14: api.did.presentproof.types.RequestPresentationV3.body:type_name -> api.did.presentproof.types.RequestPresentationV3Body
	31, // 15: api.did.presentproof.types.RequestPresentationV3.attachments:type_name -> api.did.doc.types.AttachmentV2
	10, // 16: api.did.presentproof.types.SubmissionRequirement.from_nested:type_name -> api.did.presentproof.types.SubmissionRequirement
	28, // 17: api.did.presentproof.types.InputDescriptor.metadata:type_name -> api.did.presentproof.types.InputDescriptor.MetadataEntry
	0,  // 18: api.did.presentproof.types.InputDescriptor.schema:type_name -> api.did.presentproof.types.Schema
	32, // 19: api.did.presentproof.types.InputDescriptor.constraints:type_name -> api.vc.types.Constraints
	12, // 20: api.did.presentproof.types.InputDescriptorMapping.path_nested:type_name -> api.did.presentproof.types.InputDescriptorMapping
	0,  // 21: api.did.presentproof.types.ResolvedProperty.schema:type_name -> api.did.presentproof.types.Schema
	33, // 22: api.did.presentproof.types.ResolvedProperty.value:type_name -> google.protobuf.Any
	0,  // 23: api.did.presentproof.types.DisplayMappingObject.schema:type_name -> api.did.presentproof.types.Schema
	0,  // 24: api.did.presentproof.types.LabeledDisplayMappingObject.schema:type_name -> api.did.presentproof.types.Schema
	34, // 25: api.did.presentproof.types.ResolvedDescriptor.styles:type_name -> api.vc.types.Styles
	13, // 26: api.did.presentproof.types.ResolvedDescriptor.properties:type_name -> api.did.presentproof.types.ResolvedProperty
	14, // 27: api.did.presentproof.types.DataDisplayDescriptor.title:type_name -> api.did.presentproof.types.DisplayMappingObject
	14, // 28: api.did.presentproof.types.DataDisplayDescriptor.subtitle:type_name -> api.did.presentproof.types.DisplayMappingObject
	14, // 29: api.did.presentproof.types.DataDisplayDescriptor.description:type_name -> api.did.presentproof.types.DisplayMappingObject
	15, // 30: api.did.presentproof.types.DataDisplayDescriptor.properties:type_name -> api.did.presentproof.types.LabeledDisplayMappingObject
	17, // 31: api.did.presentproof.types.OutputDescriptor.display:type_name -> api.did.presentproof.types.DataDisplayDescriptor
	34, // 32: api.did.presentproof.types.OutputDescriptor.styles:type_name -> api.vc.types.Styles
	11, // 33: api.did.presentproof.types.CredentialFulfillment.descriptor_map:type_name -> api.did.presentproof.types.InputDescriptor
	35, // 34: api.did.presentproof.types.CredentialManifest.issuer:type_name -> api.vc.types.Issuer
	18, // 35: api.did.presentproof.types.CredentialManifest.output_descriptors:type_name -> api.did.presentproof.types.OutputDescriptor
	9,  // 36: api.did.presentproof.types.CredentialManifest.format:type_name -> api.did.presentproof.types.Format
	21, // 37: api.did.presentproof.types.CredentialManifest.presentation_definition:type_name -> api.did.presentproof.types.PresentationDefinition
	9,  // 38: api.did.presentproof.types.PresentationDefinition.format:type_name -> api.did.presentproof.types.Format
	10, // 39: api.did.presentproof.types.PresentationDefinition.submission_requirements:type_name -> api.did.presentproof.types.SubmissionRequirement
	11, // 40: api.did.presentproof.types.PresentationDefinition.input_descriptors:type_name -> api.did.presentproof.types.InputDescriptor
	23, // 41: api.did.presentproof.types.JWTPresClaims.vp:type_name -> api.did.presentproof.types.RawPresentation
	33, // 42: api.did.presentproof.types.RawPresentation.context:type_name -> google.protobuf.Any
	33, // 43: api.did.presentproof.types.RawPresentation.verifiableCredential:type_name -> google.protobuf.Any
	29, // 44: api.did.presentproof.types.RawPresentation.customFields:type_name -> api.did.presentproof.types.RawPresentation.CustomFieldsEntry
	9,  // 45: api.did.presentproof.types.GenericPresentation.formats:type_name -> api.did.presentproof.types.Format
	30, // 46: api.did.presentproof.types.GenericPresentation.presentations_attach:type_name -> api.did.doc.types.Attachment
	31, // 47: api.did.presentproof.types.GenericPresentation.attachments:type_name -> api.did.doc.types.AttachmentV2
	27, // 48: api.did.presentproof.types.GenericPresentation.body:type_name -> api.did.presentproof.types.PresentationV3Body
	9,  // 49: api.did.presentproof.types.PresentationV2.formats:type_name -> api.did.presentproof.types.Format
	30, // 50: api.did.presentproof.types.PresentationV2.presentations_attach:type_name -> api.did.doc.types.Attachment
	27, // 51: api.did.presentproof.types.PresentationV3.body:type_name -> api.did.presentproof.types.PresentationV3Body
	31, // 52: api.did.presentproof.types.PresentationV3.attachments:type_name -> api.did.doc.types.AttachmentV2
	33, // 53: api.did.presentproof.types.InputDescriptor.MetadataEntry.value:type_name -> google.protobuf.Any
	33, // 54: api.did.presentproof.types.RawPresentation.CustomFieldsEntry.value:type_name -> google.protobuf.Any
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_api_did_presentproof_types_presentproof_proto_init() }
func file_api_did_presentproof_types_presentproof_proto_init() {
	if File_api_did_presentproof_types_presentproof_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_did_presentproof_types_presentproof_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericProposePresentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposePresentationV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposePresentationV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposePresentationV3Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericRequestPresentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestPresentationV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestPresentationV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestPresentationV3Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Format); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputDescriptorMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolvedProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayMappingObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabeledDisplayMappingObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolvedDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataDisplayDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialFulfillment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialManifest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresentationDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTPresClaims); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawPresentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericPresentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresentationV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresentationV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_did_presentproof_types_presentproof_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresentationV3Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_did_presentproof_types_presentproof_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_did_presentproof_types_presentproof_proto_goTypes,
		DependencyIndexes: file_api_did_presentproof_types_presentproof_proto_depIdxs,
		MessageInfos:      file_api_did_presentproof_types_presentproof_proto_msgTypes,
	}.Build()
	File_api_did_presentproof_types_presentproof_proto = out.File
	file_api_did_presentproof_types_presentproof_proto_rawDesc = nil
	file_api_did_presentproof_types_presentproof_proto_goTypes = nil
	file_api_did_presentproof_types_presentproof_proto_depIdxs = nil
}
