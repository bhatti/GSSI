// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/did/presentproof/services/presentproof.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PresentProofControllerClient is the client API for PresentProofController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PresentProofControllerClient interface {
	// Actions returns pending actions that have not yet to be executed or canceled.
	// Actions swagger:route GET /presentproof/actions present-proof presentProofActions
	//
	// Returns pending actions that have not yet to be executed or cancelled.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofActionsResponse
	Actions(ctx context.Context, in *PresentProofActionsRequest, opts ...grpc.CallOption) (*PresentProofActionsResponse, error)
	// SendRequestPresentation is used by the Verifier to send a request presentation.
	// SendRequestPresentation swagger:route POST /presentproof/send-request-presentation present-proof presentProofSendRequestPresentation
	//
	// Sends a request presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofSendRequestPresentationResponse
	SendRequestPresentation(ctx context.Context, in *PresentProofSendRequestPresentationV2Request, opts ...grpc.CallOption) (*PresentProofSendRequestPresentationResponse, error)
	// SendRequestPresentationV3 swagger:route POST /presentproof/v3/send-request-presentation present-proof presentProofSendRequestPresentationV3
	//
	// Sends a request presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofSendRequestPresentationResponse
	SendRequestPresentationV3(ctx context.Context, in *PresentProofSendRequestPresentationV3Request, opts ...grpc.CallOption) (*PresentProofSendRequestPresentationResponse, error)
	// SendProposePresentation is used by the Prover to send a propose presentation.
	// SendProposePresentation swagger:route POST /presentproof/send-propose-presentation present-proof presentProofSendProposePresentation
	//
	// Sends a propose presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofSendProposePresentationResponse
	SendProposePresentation(ctx context.Context, in *PresentProofSendProposePresentationRequest, opts ...grpc.CallOption) (*PresentProofSendRequestPresentationResponse, error)
	// sendProposePresentationV3 swagger:route POST /presentproof/v3/send-propose-presentation present-proof presentProofSendProposePresentationV3
	//
	// Sends a propose presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofSendProposePresentationResponse
	// AcceptRequestPresentation is used by the Prover is to accept a presentation request.
	SendProposePresentationV3(ctx context.Context, in *PresentProofSendProposePresentationV3Request, opts ...grpc.CallOption) (*PresentProofSendRequestPresentationResponse, error)
	// AcceptProblemReport swagger:route POST /presentproof/{piid}/accept-problem-report present-proof presentProofAcceptProblemReport
	//
	// Accepts a problem report.
	// AcceptProblemReport is used for accepting problem report.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofAcceptProblemReportResponse
	AcceptProblemReport(ctx context.Context, in *PresentProofAcceptProblemReportRequest, opts ...grpc.CallOption) (*PresentProofAcceptProblemReportResponse, error)
	// AcceptRequestPresentation swagger:route POST /presentproof/{piid}/accept-request-presentation present-proof presentProofAcceptRequestPresentation
	//
	// Accepts a request presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofAcceptRequestPresentationResponse
	AcceptRequestPresentation(ctx context.Context, in *PresentProofAcceptProblemReportRequest, opts ...grpc.CallOption) (*PresentProofAcceptProblemReportResponse, error)
	// AcceptRequestPresentationV3 swagger:route POST /presentproof/v3/{piid}/accept-request-presentation present-proof presentProofAcceptRequestPresentationV3
	//
	// Accepts a request presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofAcceptRequestPresentationResponse
	AcceptRequestPresentationV3(ctx context.Context, in *PresentProofAcceptRequestPresentationV3Request, opts ...grpc.CallOption) (*PresentProofAcceptProblemReportResponse, error)
	// acceptProposePresentation swagger:route POST /presentproof/{piid}/accept-propose-presentation present-proof presentProofAcceptProposePresentation
	//
	// AcceptProposePresentation is used when the Verifier is willing to accept the propose presentation.
	// Accepts a propose presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofAcceptProposePresentationResponse
	AcceptProposePresentation(ctx context.Context, in *PresentProofAcceptProposePresentationRequest, opts ...grpc.CallOption) (*PresentProofAcceptProposePresentationResponse, error)
	// AcceptProposePresentationV3 swagger:route POST /presentproof/v3/{piid}/accept-propose-presentation present-proof presentProofAcceptProposePresentationV3
	//
	// Accepts a propose presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofAcceptProposePresentationResponse
	AcceptProposePresentationV3(ctx context.Context, in *PresentProofAcceptProposePresentationV3Request, opts ...grpc.CallOption) (*PresentProofAcceptProposePresentationResponse, error)
	// AcceptPresentation is used by the Verifier to accept a presentation.
	// AcceptPresentation swagger:route POST /presentproof/{piid}/accept-presentation present-proof presentProofAcceptPresentation
	//
	// Accepts a presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofAcceptPresentationResponse
	AcceptPresentation(ctx context.Context, in *PresentProofAcceptPresentationRequest, opts ...grpc.CallOption) (*PresentProofAcceptPresentationResponse, error)
	// NegotiateRequestPresentation is used by the Prover to counter a presentation request they received with a proposal.
	// NegotiateRequestPresentation swagger:route POST /presentproof/{piid}/negotiate-request-presentation present-proof presentProofNegotiateRequestPresentation
	//
	// Is used by the Prover to counter a presentation request they received with a proposal.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofNegotiateRequestPresentationResponse
	NegotiateRequestPresentation(ctx context.Context, in *PresentProofNegotiateRequestPresentationRequest, opts ...grpc.CallOption) (*PresentProofNegotiateRequestPresentationResponse, error)
	// NegotiateRequestPresentationV3 swagger:route POST /presentproof/v3/{piid}/negotiate-request-presentation present-proof presentProofNegotiateRequestPresentationV3
	//
	// Is used by the Prover to counter a presentation request they received with a proposal.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofNegotiateRequestPresentationResponse
	NegotiateRequestPresentationV3(ctx context.Context, in *PresentProofNegotiateRequestPresentationV3Request, opts ...grpc.CallOption) (*PresentProofNegotiateRequestPresentationResponse, error)
	// DeclineRequestPresentation is used when the Prover does not want to accept the request presentation.
	// DeclineRequestPresentation swagger:route POST /presentproof/{piid}/decline-request-presentation present-proof presentProofDeclineRequestPresentation
	//
	// Declines a request presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofDeclineRequestPresentationResponse
	DeclineRequestPresentation(ctx context.Context, in *PresentProofDeclineRequestPresentationRequest, opts ...grpc.CallOption) (*PresentProofDeclineRequestPresentationResponse, error)
	// DeclineProposePresentation is used when the Verifier does not want to accept the propose presentation.
	// DeclineProposePresentation swagger:route POST /presentproof/{piid}/decline-propose-presentation present-proof presentProofDeclineProposePresentation
	//
	// Declines a propose presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofDeclineProposePresentationResponse
	DeclineProposePresentation(ctx context.Context, in *PresentProofDeclineProposePresentationRequest, opts ...grpc.CallOption) (*PresentProofDeclineProposePresentationResponse, error)
	// DeclinePresentation is used by the Verifier to decline a presentation.
	// DeclinePresentation swagger:route POST /presentproof/{piid}/decline-presentation present-proof presentProofDeclinePresentation
	//
	// Declines a presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofDeclinePresentationResponse
	DeclinePresentation(ctx context.Context, in *PresentProofDeclinePresentationRequest, opts ...grpc.CallOption) (*PresentProofDeclinePresentationResponse, error)
}

type presentProofControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewPresentProofControllerClient(cc grpc.ClientConnInterface) PresentProofControllerClient {
	return &presentProofControllerClient{cc}
}

func (c *presentProofControllerClient) Actions(ctx context.Context, in *PresentProofActionsRequest, opts ...grpc.CallOption) (*PresentProofActionsResponse, error) {
	out := new(PresentProofActionsResponse)
	err := c.cc.Invoke(ctx, "/api.did.presentproof.services.PresentProofController/actions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentProofControllerClient) SendRequestPresentation(ctx context.Context, in *PresentProofSendRequestPresentationV2Request, opts ...grpc.CallOption) (*PresentProofSendRequestPresentationResponse, error) {
	out := new(PresentProofSendRequestPresentationResponse)
	err := c.cc.Invoke(ctx, "/api.did.presentproof.services.PresentProofController/sendRequestPresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentProofControllerClient) SendRequestPresentationV3(ctx context.Context, in *PresentProofSendRequestPresentationV3Request, opts ...grpc.CallOption) (*PresentProofSendRequestPresentationResponse, error) {
	out := new(PresentProofSendRequestPresentationResponse)
	err := c.cc.Invoke(ctx, "/api.did.presentproof.services.PresentProofController/sendRequestPresentationV3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentProofControllerClient) SendProposePresentation(ctx context.Context, in *PresentProofSendProposePresentationRequest, opts ...grpc.CallOption) (*PresentProofSendRequestPresentationResponse, error) {
	out := new(PresentProofSendRequestPresentationResponse)
	err := c.cc.Invoke(ctx, "/api.did.presentproof.services.PresentProofController/sendProposePresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentProofControllerClient) SendProposePresentationV3(ctx context.Context, in *PresentProofSendProposePresentationV3Request, opts ...grpc.CallOption) (*PresentProofSendRequestPresentationResponse, error) {
	out := new(PresentProofSendRequestPresentationResponse)
	err := c.cc.Invoke(ctx, "/api.did.presentproof.services.PresentProofController/sendProposePresentationV3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentProofControllerClient) AcceptProblemReport(ctx context.Context, in *PresentProofAcceptProblemReportRequest, opts ...grpc.CallOption) (*PresentProofAcceptProblemReportResponse, error) {
	out := new(PresentProofAcceptProblemReportResponse)
	err := c.cc.Invoke(ctx, "/api.did.presentproof.services.PresentProofController/acceptProblemReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentProofControllerClient) AcceptRequestPresentation(ctx context.Context, in *PresentProofAcceptProblemReportRequest, opts ...grpc.CallOption) (*PresentProofAcceptProblemReportResponse, error) {
	out := new(PresentProofAcceptProblemReportResponse)
	err := c.cc.Invoke(ctx, "/api.did.presentproof.services.PresentProofController/acceptRequestPresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentProofControllerClient) AcceptRequestPresentationV3(ctx context.Context, in *PresentProofAcceptRequestPresentationV3Request, opts ...grpc.CallOption) (*PresentProofAcceptProblemReportResponse, error) {
	out := new(PresentProofAcceptProblemReportResponse)
	err := c.cc.Invoke(ctx, "/api.did.presentproof.services.PresentProofController/acceptRequestPresentationV3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentProofControllerClient) AcceptProposePresentation(ctx context.Context, in *PresentProofAcceptProposePresentationRequest, opts ...grpc.CallOption) (*PresentProofAcceptProposePresentationResponse, error) {
	out := new(PresentProofAcceptProposePresentationResponse)
	err := c.cc.Invoke(ctx, "/api.did.presentproof.services.PresentProofController/acceptProposePresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentProofControllerClient) AcceptProposePresentationV3(ctx context.Context, in *PresentProofAcceptProposePresentationV3Request, opts ...grpc.CallOption) (*PresentProofAcceptProposePresentationResponse, error) {
	out := new(PresentProofAcceptProposePresentationResponse)
	err := c.cc.Invoke(ctx, "/api.did.presentproof.services.PresentProofController/acceptProposePresentationV3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentProofControllerClient) AcceptPresentation(ctx context.Context, in *PresentProofAcceptPresentationRequest, opts ...grpc.CallOption) (*PresentProofAcceptPresentationResponse, error) {
	out := new(PresentProofAcceptPresentationResponse)
	err := c.cc.Invoke(ctx, "/api.did.presentproof.services.PresentProofController/acceptPresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentProofControllerClient) NegotiateRequestPresentation(ctx context.Context, in *PresentProofNegotiateRequestPresentationRequest, opts ...grpc.CallOption) (*PresentProofNegotiateRequestPresentationResponse, error) {
	out := new(PresentProofNegotiateRequestPresentationResponse)
	err := c.cc.Invoke(ctx, "/api.did.presentproof.services.PresentProofController/negotiateRequestPresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentProofControllerClient) NegotiateRequestPresentationV3(ctx context.Context, in *PresentProofNegotiateRequestPresentationV3Request, opts ...grpc.CallOption) (*PresentProofNegotiateRequestPresentationResponse, error) {
	out := new(PresentProofNegotiateRequestPresentationResponse)
	err := c.cc.Invoke(ctx, "/api.did.presentproof.services.PresentProofController/negotiateRequestPresentationV3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentProofControllerClient) DeclineRequestPresentation(ctx context.Context, in *PresentProofDeclineRequestPresentationRequest, opts ...grpc.CallOption) (*PresentProofDeclineRequestPresentationResponse, error) {
	out := new(PresentProofDeclineRequestPresentationResponse)
	err := c.cc.Invoke(ctx, "/api.did.presentproof.services.PresentProofController/declineRequestPresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentProofControllerClient) DeclineProposePresentation(ctx context.Context, in *PresentProofDeclineProposePresentationRequest, opts ...grpc.CallOption) (*PresentProofDeclineProposePresentationResponse, error) {
	out := new(PresentProofDeclineProposePresentationResponse)
	err := c.cc.Invoke(ctx, "/api.did.presentproof.services.PresentProofController/declineProposePresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *presentProofControllerClient) DeclinePresentation(ctx context.Context, in *PresentProofDeclinePresentationRequest, opts ...grpc.CallOption) (*PresentProofDeclinePresentationResponse, error) {
	out := new(PresentProofDeclinePresentationResponse)
	err := c.cc.Invoke(ctx, "/api.did.presentproof.services.PresentProofController/declinePresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PresentProofControllerServer is the server API for PresentProofController service.
// All implementations must embed UnimplementedPresentProofControllerServer
// for forward compatibility
type PresentProofControllerServer interface {
	// Actions returns pending actions that have not yet to be executed or canceled.
	// Actions swagger:route GET /presentproof/actions present-proof presentProofActions
	//
	// Returns pending actions that have not yet to be executed or cancelled.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofActionsResponse
	Actions(context.Context, *PresentProofActionsRequest) (*PresentProofActionsResponse, error)
	// SendRequestPresentation is used by the Verifier to send a request presentation.
	// SendRequestPresentation swagger:route POST /presentproof/send-request-presentation present-proof presentProofSendRequestPresentation
	//
	// Sends a request presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofSendRequestPresentationResponse
	SendRequestPresentation(context.Context, *PresentProofSendRequestPresentationV2Request) (*PresentProofSendRequestPresentationResponse, error)
	// SendRequestPresentationV3 swagger:route POST /presentproof/v3/send-request-presentation present-proof presentProofSendRequestPresentationV3
	//
	// Sends a request presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofSendRequestPresentationResponse
	SendRequestPresentationV3(context.Context, *PresentProofSendRequestPresentationV3Request) (*PresentProofSendRequestPresentationResponse, error)
	// SendProposePresentation is used by the Prover to send a propose presentation.
	// SendProposePresentation swagger:route POST /presentproof/send-propose-presentation present-proof presentProofSendProposePresentation
	//
	// Sends a propose presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofSendProposePresentationResponse
	SendProposePresentation(context.Context, *PresentProofSendProposePresentationRequest) (*PresentProofSendRequestPresentationResponse, error)
	// sendProposePresentationV3 swagger:route POST /presentproof/v3/send-propose-presentation present-proof presentProofSendProposePresentationV3
	//
	// Sends a propose presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofSendProposePresentationResponse
	// AcceptRequestPresentation is used by the Prover is to accept a presentation request.
	SendProposePresentationV3(context.Context, *PresentProofSendProposePresentationV3Request) (*PresentProofSendRequestPresentationResponse, error)
	// AcceptProblemReport swagger:route POST /presentproof/{piid}/accept-problem-report present-proof presentProofAcceptProblemReport
	//
	// Accepts a problem report.
	// AcceptProblemReport is used for accepting problem report.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofAcceptProblemReportResponse
	AcceptProblemReport(context.Context, *PresentProofAcceptProblemReportRequest) (*PresentProofAcceptProblemReportResponse, error)
	// AcceptRequestPresentation swagger:route POST /presentproof/{piid}/accept-request-presentation present-proof presentProofAcceptRequestPresentation
	//
	// Accepts a request presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofAcceptRequestPresentationResponse
	AcceptRequestPresentation(context.Context, *PresentProofAcceptProblemReportRequest) (*PresentProofAcceptProblemReportResponse, error)
	// AcceptRequestPresentationV3 swagger:route POST /presentproof/v3/{piid}/accept-request-presentation present-proof presentProofAcceptRequestPresentationV3
	//
	// Accepts a request presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofAcceptRequestPresentationResponse
	AcceptRequestPresentationV3(context.Context, *PresentProofAcceptRequestPresentationV3Request) (*PresentProofAcceptProblemReportResponse, error)
	// acceptProposePresentation swagger:route POST /presentproof/{piid}/accept-propose-presentation present-proof presentProofAcceptProposePresentation
	//
	// AcceptProposePresentation is used when the Verifier is willing to accept the propose presentation.
	// Accepts a propose presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofAcceptProposePresentationResponse
	AcceptProposePresentation(context.Context, *PresentProofAcceptProposePresentationRequest) (*PresentProofAcceptProposePresentationResponse, error)
	// AcceptProposePresentationV3 swagger:route POST /presentproof/v3/{piid}/accept-propose-presentation present-proof presentProofAcceptProposePresentationV3
	//
	// Accepts a propose presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofAcceptProposePresentationResponse
	AcceptProposePresentationV3(context.Context, *PresentProofAcceptProposePresentationV3Request) (*PresentProofAcceptProposePresentationResponse, error)
	// AcceptPresentation is used by the Verifier to accept a presentation.
	// AcceptPresentation swagger:route POST /presentproof/{piid}/accept-presentation present-proof presentProofAcceptPresentation
	//
	// Accepts a presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofAcceptPresentationResponse
	AcceptPresentation(context.Context, *PresentProofAcceptPresentationRequest) (*PresentProofAcceptPresentationResponse, error)
	// NegotiateRequestPresentation is used by the Prover to counter a presentation request they received with a proposal.
	// NegotiateRequestPresentation swagger:route POST /presentproof/{piid}/negotiate-request-presentation present-proof presentProofNegotiateRequestPresentation
	//
	// Is used by the Prover to counter a presentation request they received with a proposal.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofNegotiateRequestPresentationResponse
	NegotiateRequestPresentation(context.Context, *PresentProofNegotiateRequestPresentationRequest) (*PresentProofNegotiateRequestPresentationResponse, error)
	// NegotiateRequestPresentationV3 swagger:route POST /presentproof/v3/{piid}/negotiate-request-presentation present-proof presentProofNegotiateRequestPresentationV3
	//
	// Is used by the Prover to counter a presentation request they received with a proposal.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofNegotiateRequestPresentationResponse
	NegotiateRequestPresentationV3(context.Context, *PresentProofNegotiateRequestPresentationV3Request) (*PresentProofNegotiateRequestPresentationResponse, error)
	// DeclineRequestPresentation is used when the Prover does not want to accept the request presentation.
	// DeclineRequestPresentation swagger:route POST /presentproof/{piid}/decline-request-presentation present-proof presentProofDeclineRequestPresentation
	//
	// Declines a request presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofDeclineRequestPresentationResponse
	DeclineRequestPresentation(context.Context, *PresentProofDeclineRequestPresentationRequest) (*PresentProofDeclineRequestPresentationResponse, error)
	// DeclineProposePresentation is used when the Verifier does not want to accept the propose presentation.
	// DeclineProposePresentation swagger:route POST /presentproof/{piid}/decline-propose-presentation present-proof presentProofDeclineProposePresentation
	//
	// Declines a propose presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofDeclineProposePresentationResponse
	DeclineProposePresentation(context.Context, *PresentProofDeclineProposePresentationRequest) (*PresentProofDeclineProposePresentationResponse, error)
	// DeclinePresentation is used by the Verifier to decline a presentation.
	// DeclinePresentation swagger:route POST /presentproof/{piid}/decline-presentation present-proof presentProofDeclinePresentation
	//
	// Declines a presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentProofDeclinePresentationResponse
	DeclinePresentation(context.Context, *PresentProofDeclinePresentationRequest) (*PresentProofDeclinePresentationResponse, error)
	mustEmbedUnimplementedPresentProofControllerServer()
}

// UnimplementedPresentProofControllerServer must be embedded to have forward compatible implementations.
type UnimplementedPresentProofControllerServer struct {
}

func (UnimplementedPresentProofControllerServer) Actions(context.Context, *PresentProofActionsRequest) (*PresentProofActionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Actions not implemented")
}
func (UnimplementedPresentProofControllerServer) SendRequestPresentation(context.Context, *PresentProofSendRequestPresentationV2Request) (*PresentProofSendRequestPresentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequestPresentation not implemented")
}
func (UnimplementedPresentProofControllerServer) SendRequestPresentationV3(context.Context, *PresentProofSendRequestPresentationV3Request) (*PresentProofSendRequestPresentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRequestPresentationV3 not implemented")
}
func (UnimplementedPresentProofControllerServer) SendProposePresentation(context.Context, *PresentProofSendProposePresentationRequest) (*PresentProofSendRequestPresentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProposePresentation not implemented")
}
func (UnimplementedPresentProofControllerServer) SendProposePresentationV3(context.Context, *PresentProofSendProposePresentationV3Request) (*PresentProofSendRequestPresentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProposePresentationV3 not implemented")
}
func (UnimplementedPresentProofControllerServer) AcceptProblemReport(context.Context, *PresentProofAcceptProblemReportRequest) (*PresentProofAcceptProblemReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptProblemReport not implemented")
}
func (UnimplementedPresentProofControllerServer) AcceptRequestPresentation(context.Context, *PresentProofAcceptProblemReportRequest) (*PresentProofAcceptProblemReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptRequestPresentation not implemented")
}
func (UnimplementedPresentProofControllerServer) AcceptRequestPresentationV3(context.Context, *PresentProofAcceptRequestPresentationV3Request) (*PresentProofAcceptProblemReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptRequestPresentationV3 not implemented")
}
func (UnimplementedPresentProofControllerServer) AcceptProposePresentation(context.Context, *PresentProofAcceptProposePresentationRequest) (*PresentProofAcceptProposePresentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptProposePresentation not implemented")
}
func (UnimplementedPresentProofControllerServer) AcceptProposePresentationV3(context.Context, *PresentProofAcceptProposePresentationV3Request) (*PresentProofAcceptProposePresentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptProposePresentationV3 not implemented")
}
func (UnimplementedPresentProofControllerServer) AcceptPresentation(context.Context, *PresentProofAcceptPresentationRequest) (*PresentProofAcceptPresentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptPresentation not implemented")
}
func (UnimplementedPresentProofControllerServer) NegotiateRequestPresentation(context.Context, *PresentProofNegotiateRequestPresentationRequest) (*PresentProofNegotiateRequestPresentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NegotiateRequestPresentation not implemented")
}
func (UnimplementedPresentProofControllerServer) NegotiateRequestPresentationV3(context.Context, *PresentProofNegotiateRequestPresentationV3Request) (*PresentProofNegotiateRequestPresentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NegotiateRequestPresentationV3 not implemented")
}
func (UnimplementedPresentProofControllerServer) DeclineRequestPresentation(context.Context, *PresentProofDeclineRequestPresentationRequest) (*PresentProofDeclineRequestPresentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineRequestPresentation not implemented")
}
func (UnimplementedPresentProofControllerServer) DeclineProposePresentation(context.Context, *PresentProofDeclineProposePresentationRequest) (*PresentProofDeclineProposePresentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclineProposePresentation not implemented")
}
func (UnimplementedPresentProofControllerServer) DeclinePresentation(context.Context, *PresentProofDeclinePresentationRequest) (*PresentProofDeclinePresentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclinePresentation not implemented")
}
func (UnimplementedPresentProofControllerServer) mustEmbedUnimplementedPresentProofControllerServer() {
}

// UnsafePresentProofControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PresentProofControllerServer will
// result in compilation errors.
type UnsafePresentProofControllerServer interface {
	mustEmbedUnimplementedPresentProofControllerServer()
}

func RegisterPresentProofControllerServer(s grpc.ServiceRegistrar, srv PresentProofControllerServer) {
	s.RegisterService(&PresentProofController_ServiceDesc, srv)
}

func _PresentProofController_Actions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresentProofActionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentProofControllerServer).Actions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.presentproof.services.PresentProofController/actions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentProofControllerServer).Actions(ctx, req.(*PresentProofActionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresentProofController_SendRequestPresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresentProofSendRequestPresentationV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentProofControllerServer).SendRequestPresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.presentproof.services.PresentProofController/sendRequestPresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentProofControllerServer).SendRequestPresentation(ctx, req.(*PresentProofSendRequestPresentationV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresentProofController_SendRequestPresentationV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresentProofSendRequestPresentationV3Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentProofControllerServer).SendRequestPresentationV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.presentproof.services.PresentProofController/sendRequestPresentationV3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentProofControllerServer).SendRequestPresentationV3(ctx, req.(*PresentProofSendRequestPresentationV3Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresentProofController_SendProposePresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresentProofSendProposePresentationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentProofControllerServer).SendProposePresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.presentproof.services.PresentProofController/sendProposePresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentProofControllerServer).SendProposePresentation(ctx, req.(*PresentProofSendProposePresentationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresentProofController_SendProposePresentationV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresentProofSendProposePresentationV3Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentProofControllerServer).SendProposePresentationV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.presentproof.services.PresentProofController/sendProposePresentationV3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentProofControllerServer).SendProposePresentationV3(ctx, req.(*PresentProofSendProposePresentationV3Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresentProofController_AcceptProblemReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresentProofAcceptProblemReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentProofControllerServer).AcceptProblemReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.presentproof.services.PresentProofController/acceptProblemReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentProofControllerServer).AcceptProblemReport(ctx, req.(*PresentProofAcceptProblemReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresentProofController_AcceptRequestPresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresentProofAcceptProblemReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentProofControllerServer).AcceptRequestPresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.presentproof.services.PresentProofController/acceptRequestPresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentProofControllerServer).AcceptRequestPresentation(ctx, req.(*PresentProofAcceptProblemReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresentProofController_AcceptRequestPresentationV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresentProofAcceptRequestPresentationV3Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentProofControllerServer).AcceptRequestPresentationV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.presentproof.services.PresentProofController/acceptRequestPresentationV3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentProofControllerServer).AcceptRequestPresentationV3(ctx, req.(*PresentProofAcceptRequestPresentationV3Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresentProofController_AcceptProposePresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresentProofAcceptProposePresentationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentProofControllerServer).AcceptProposePresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.presentproof.services.PresentProofController/acceptProposePresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentProofControllerServer).AcceptProposePresentation(ctx, req.(*PresentProofAcceptProposePresentationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresentProofController_AcceptProposePresentationV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresentProofAcceptProposePresentationV3Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentProofControllerServer).AcceptProposePresentationV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.presentproof.services.PresentProofController/acceptProposePresentationV3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentProofControllerServer).AcceptProposePresentationV3(ctx, req.(*PresentProofAcceptProposePresentationV3Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresentProofController_AcceptPresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresentProofAcceptPresentationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentProofControllerServer).AcceptPresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.presentproof.services.PresentProofController/acceptPresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentProofControllerServer).AcceptPresentation(ctx, req.(*PresentProofAcceptPresentationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresentProofController_NegotiateRequestPresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresentProofNegotiateRequestPresentationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentProofControllerServer).NegotiateRequestPresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.presentproof.services.PresentProofController/negotiateRequestPresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentProofControllerServer).NegotiateRequestPresentation(ctx, req.(*PresentProofNegotiateRequestPresentationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresentProofController_NegotiateRequestPresentationV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresentProofNegotiateRequestPresentationV3Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentProofControllerServer).NegotiateRequestPresentationV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.presentproof.services.PresentProofController/negotiateRequestPresentationV3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentProofControllerServer).NegotiateRequestPresentationV3(ctx, req.(*PresentProofNegotiateRequestPresentationV3Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresentProofController_DeclineRequestPresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresentProofDeclineRequestPresentationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentProofControllerServer).DeclineRequestPresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.presentproof.services.PresentProofController/declineRequestPresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentProofControllerServer).DeclineRequestPresentation(ctx, req.(*PresentProofDeclineRequestPresentationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresentProofController_DeclineProposePresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresentProofDeclineProposePresentationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentProofControllerServer).DeclineProposePresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.presentproof.services.PresentProofController/declineProposePresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentProofControllerServer).DeclineProposePresentation(ctx, req.(*PresentProofDeclineProposePresentationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PresentProofController_DeclinePresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresentProofDeclinePresentationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresentProofControllerServer).DeclinePresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.did.presentproof.services.PresentProofController/declinePresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresentProofControllerServer).DeclinePresentation(ctx, req.(*PresentProofDeclinePresentationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PresentProofController_ServiceDesc is the grpc.ServiceDesc for PresentProofController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PresentProofController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.did.presentproof.services.PresentProofController",
	HandlerType: (*PresentProofControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "actions",
			Handler:    _PresentProofController_Actions_Handler,
		},
		{
			MethodName: "sendRequestPresentation",
			Handler:    _PresentProofController_SendRequestPresentation_Handler,
		},
		{
			MethodName: "sendRequestPresentationV3",
			Handler:    _PresentProofController_SendRequestPresentationV3_Handler,
		},
		{
			MethodName: "sendProposePresentation",
			Handler:    _PresentProofController_SendProposePresentation_Handler,
		},
		{
			MethodName: "sendProposePresentationV3",
			Handler:    _PresentProofController_SendProposePresentationV3_Handler,
		},
		{
			MethodName: "acceptProblemReport",
			Handler:    _PresentProofController_AcceptProblemReport_Handler,
		},
		{
			MethodName: "acceptRequestPresentation",
			Handler:    _PresentProofController_AcceptRequestPresentation_Handler,
		},
		{
			MethodName: "acceptRequestPresentationV3",
			Handler:    _PresentProofController_AcceptRequestPresentationV3_Handler,
		},
		{
			MethodName: "acceptProposePresentation",
			Handler:    _PresentProofController_AcceptProposePresentation_Handler,
		},
		{
			MethodName: "acceptProposePresentationV3",
			Handler:    _PresentProofController_AcceptProposePresentationV3_Handler,
		},
		{
			MethodName: "acceptPresentation",
			Handler:    _PresentProofController_AcceptPresentation_Handler,
		},
		{
			MethodName: "negotiateRequestPresentation",
			Handler:    _PresentProofController_NegotiateRequestPresentation_Handler,
		},
		{
			MethodName: "negotiateRequestPresentationV3",
			Handler:    _PresentProofController_NegotiateRequestPresentationV3_Handler,
		},
		{
			MethodName: "declineRequestPresentation",
			Handler:    _PresentProofController_DeclineRequestPresentation_Handler,
		},
		{
			MethodName: "declineProposePresentation",
			Handler:    _PresentProofController_DeclineProposePresentation_Handler,
		},
		{
			MethodName: "declinePresentation",
			Handler:    _PresentProofController_DeclinePresentation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/did/presentproof/services/presentproof.proto",
}
