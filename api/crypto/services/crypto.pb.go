// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: api/crypto/services/crypto.proto

package services

import (
	types "github.com/bhatti/GSSI/api/crypto/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// EncryptRequest encrypt
type EncryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message []byte     `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Aad     []byte     `protobuf:"bytes,2,opt,name=aad,proto3" json:"aad,omitempty"`
	Kh      *anypb.Any `protobuf:"bytes,3,opt,name=kh,proto3" json:"kh,omitempty"`
}

func (x *EncryptRequest) Reset() {
	*x = EncryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptRequest) ProtoMessage() {}

func (x *EncryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptRequest.ProtoReflect.Descriptor instead.
func (*EncryptRequest) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{0}
}

func (x *EncryptRequest) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *EncryptRequest) GetAad() []byte {
	if x != nil {
		return x.Aad
	}
	return nil
}

func (x *EncryptRequest) GetKh() *anypb.Any {
	if x != nil {
		return x.Kh
	}
	return nil
}

// EncryptResponse encrypt
type EncryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CipherText []byte `protobuf:"bytes,1,opt,name=cipherText,proto3" json:"cipherText,omitempty"`
	Nonce      []byte `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *EncryptResponse) Reset() {
	*x = EncryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptResponse) ProtoMessage() {}

func (x *EncryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptResponse.ProtoReflect.Descriptor instead.
func (*EncryptResponse) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{1}
}

func (x *EncryptResponse) GetCipherText() []byte {
	if x != nil {
		return x.CipherText
	}
	return nil
}

func (x *EncryptResponse) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

// DecryptRequest decrypt
type DecryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cipher []byte     `protobuf:"bytes,1,opt,name=cipher,proto3" json:"cipher,omitempty"`
	Aad    []byte     `protobuf:"bytes,2,opt,name=aad,proto3" json:"aad,omitempty"`
	Nonce  []byte     `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Kh     *anypb.Any `protobuf:"bytes,4,opt,name=kh,proto3" json:"kh,omitempty"`
}

func (x *DecryptRequest) Reset() {
	*x = DecryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptRequest) ProtoMessage() {}

func (x *DecryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptRequest.ProtoReflect.Descriptor instead.
func (*DecryptRequest) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{2}
}

func (x *DecryptRequest) GetCipher() []byte {
	if x != nil {
		return x.Cipher
	}
	return nil
}

func (x *DecryptRequest) GetAad() []byte {
	if x != nil {
		return x.Aad
	}
	return nil
}

func (x *DecryptRequest) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *DecryptRequest) GetKh() *anypb.Any {
	if x != nil {
		return x.Kh
	}
	return nil
}

// EncryptResponse decrypt
type DecryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlainText []byte `protobuf:"bytes,1,opt,name=plainText,proto3" json:"plainText,omitempty"`
}

func (x *DecryptResponse) Reset() {
	*x = DecryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptResponse) ProtoMessage() {}

func (x *DecryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptResponse.ProtoReflect.Descriptor instead.
func (*DecryptResponse) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{3}
}

func (x *DecryptResponse) GetPlainText() []byte {
	if x != nil {
		return x.PlainText
	}
	return nil
}

// SignRequest sign
type SignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message []byte     `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Kh      *anypb.Any `protobuf:"bytes,2,opt,name=kh,proto3" json:"kh,omitempty"`
}

func (x *SignRequest) Reset() {
	*x = SignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRequest) ProtoMessage() {}

func (x *SignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRequest.ProtoReflect.Descriptor instead.
func (*SignRequest) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{4}
}

func (x *SignRequest) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SignRequest) GetKh() *anypb.Any {
	if x != nil {
		return x.Kh
	}
	return nil
}

// SignResponse sign
type SignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignResponse) Reset() {
	*x = SignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignResponse) ProtoMessage() {}

func (x *SignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignResponse.ProtoReflect.Descriptor instead.
func (*SignResponse) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{5}
}

func (x *SignResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// VerifyRequest verify
type VerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   []byte     `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Signature []byte     `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Kh        *anypb.Any `protobuf:"bytes,3,opt,name=kh,proto3" json:"kh,omitempty"`
}

func (x *VerifyRequest) Reset() {
	*x = VerifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyRequest) ProtoMessage() {}

func (x *VerifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyRequest.ProtoReflect.Descriptor instead.
func (*VerifyRequest) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{6}
}

func (x *VerifyRequest) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *VerifyRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *VerifyRequest) GetKh() *anypb.Any {
	if x != nil {
		return x.Kh
	}
	return nil
}

// VerifyResponse verify
type VerifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VerifyResponse) Reset() {
	*x = VerifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyResponse) ProtoMessage() {}

func (x *VerifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyResponse.ProtoReflect.Descriptor instead.
func (*VerifyResponse) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{7}
}

// ComputeMacRequest mac
type ComputeMacRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte     `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Kh   *anypb.Any `protobuf:"bytes,2,opt,name=kh,proto3" json:"kh,omitempty"`
}

func (x *ComputeMacRequest) Reset() {
	*x = ComputeMacRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeMacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeMacRequest) ProtoMessage() {}

func (x *ComputeMacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeMacRequest.ProtoReflect.Descriptor instead.
func (*ComputeMacRequest) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{8}
}

func (x *ComputeMacRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ComputeMacRequest) GetKh() *anypb.Any {
	if x != nil {
		return x.Kh
	}
	return nil
}

// ComputeMacResponse mac
type ComputeMacResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac []byte `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (x *ComputeMacResponse) Reset() {
	*x = ComputeMacResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeMacResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeMacResponse) ProtoMessage() {}

func (x *ComputeMacResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeMacResponse.ProtoReflect.Descriptor instead.
func (*ComputeMacResponse) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{9}
}

func (x *ComputeMacResponse) GetMac() []byte {
	if x != nil {
		return x.Mac
	}
	return nil
}

// VerifyMacRequest mac
type VerifyMacRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac  []byte     `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	Data []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Kh   *anypb.Any `protobuf:"bytes,3,opt,name=kh,proto3" json:"kh,omitempty"`
}

func (x *VerifyMacRequest) Reset() {
	*x = VerifyMacRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyMacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyMacRequest) ProtoMessage() {}

func (x *VerifyMacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyMacRequest.ProtoReflect.Descriptor instead.
func (*VerifyMacRequest) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{10}
}

func (x *VerifyMacRequest) GetMac() []byte {
	if x != nil {
		return x.Mac
	}
	return nil
}

func (x *VerifyMacRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *VerifyMacRequest) GetKh() *anypb.Any {
	if x != nil {
		return x.Kh
	}
	return nil
}

// VerifyMacResponse mac
type VerifyMacResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VerifyMacResponse) Reset() {
	*x = VerifyMacResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyMacResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyMacResponse) ProtoMessage() {}

func (x *VerifyMacResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyMacResponse.ProtoReflect.Descriptor instead.
func (*VerifyMacResponse) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{11}
}

// WrapKeyRequest wrap
type WrapKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cek         []byte            `protobuf:"bytes,1,opt,name=cek,proto3" json:"cek,omitempty"`
	Apu         []byte            `protobuf:"bytes,2,opt,name=apu,proto3" json:"apu,omitempty"`
	Apv         []byte            `protobuf:"bytes,3,opt,name=apv,proto3" json:"apv,omitempty"`
	RecPubKey   *types.PublicKey  `protobuf:"bytes,4,opt,name=recPubKey,proto3" json:"recPubKey,omitempty"`
	WrapKeyOpts map[string]string `protobuf:"bytes,5,rep,name=wrapKeyOpts,proto3" json:"wrapKeyOpts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WrapKeyRequest) Reset() {
	*x = WrapKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WrapKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WrapKeyRequest) ProtoMessage() {}

func (x *WrapKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WrapKeyRequest.ProtoReflect.Descriptor instead.
func (*WrapKeyRequest) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{12}
}

func (x *WrapKeyRequest) GetCek() []byte {
	if x != nil {
		return x.Cek
	}
	return nil
}

func (x *WrapKeyRequest) GetApu() []byte {
	if x != nil {
		return x.Apu
	}
	return nil
}

func (x *WrapKeyRequest) GetApv() []byte {
	if x != nil {
		return x.Apv
	}
	return nil
}

func (x *WrapKeyRequest) GetRecPubKey() *types.PublicKey {
	if x != nil {
		return x.RecPubKey
	}
	return nil
}

func (x *WrapKeyRequest) GetWrapKeyOpts() map[string]string {
	if x != nil {
		return x.WrapKeyOpts
	}
	return nil
}

// WrapKeyResponse unwrap
type WrapKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipientWrappedKey *types.RecipientWrappedKey `protobuf:"bytes,1,opt,name=recipientWrappedKey,proto3" json:"recipientWrappedKey,omitempty"`
}

func (x *WrapKeyResponse) Reset() {
	*x = WrapKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WrapKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WrapKeyResponse) ProtoMessage() {}

func (x *WrapKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WrapKeyResponse.ProtoReflect.Descriptor instead.
func (*WrapKeyResponse) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{13}
}

func (x *WrapKeyResponse) GetRecipientWrappedKey() *types.RecipientWrappedKey {
	if x != nil {
		return x.RecipientWrappedKey
	}
	return nil
}

// UnwrapKeyRequest unwrap
type UnwrapKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipientWrappedKey *types.RecipientWrappedKey `protobuf:"bytes,1,opt,name=recipientWrappedKey,proto3" json:"recipientWrappedKey,omitempty"`
	Kh                  *anypb.Any                 `protobuf:"bytes,2,opt,name=kh,proto3" json:"kh,omitempty"`
	UnwrapKeyOpts       map[string]string          `protobuf:"bytes,3,rep,name=unwrapKeyOpts,proto3" json:"unwrapKeyOpts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UnwrapKeyRequest) Reset() {
	*x = UnwrapKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnwrapKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnwrapKeyRequest) ProtoMessage() {}

func (x *UnwrapKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnwrapKeyRequest.ProtoReflect.Descriptor instead.
func (*UnwrapKeyRequest) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{14}
}

func (x *UnwrapKeyRequest) GetRecipientWrappedKey() *types.RecipientWrappedKey {
	if x != nil {
		return x.RecipientWrappedKey
	}
	return nil
}

func (x *UnwrapKeyRequest) GetKh() *anypb.Any {
	if x != nil {
		return x.Kh
	}
	return nil
}

func (x *UnwrapKeyRequest) GetUnwrapKeyOpts() map[string]string {
	if x != nil {
		return x.UnwrapKeyOpts
	}
	return nil
}

// UnwrapKeyResponse wrap
type UnwrapKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *UnwrapKeyResponse) Reset() {
	*x = UnwrapKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnwrapKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnwrapKeyResponse) ProtoMessage() {}

func (x *UnwrapKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnwrapKeyResponse.ProtoReflect.Descriptor instead.
func (*UnwrapKeyResponse) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{15}
}

func (x *UnwrapKeyResponse) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

// SignMultiRequest sign
type SignMultiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message [][]byte   `protobuf:"bytes,1,rep,name=message,proto3" json:"message,omitempty"`
	Kh      *anypb.Any `protobuf:"bytes,2,opt,name=kh,proto3" json:"kh,omitempty"`
}

func (x *SignMultiRequest) Reset() {
	*x = SignMultiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignMultiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignMultiRequest) ProtoMessage() {}

func (x *SignMultiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignMultiRequest.ProtoReflect.Descriptor instead.
func (*SignMultiRequest) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{16}
}

func (x *SignMultiRequest) GetMessage() [][]byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *SignMultiRequest) GetKh() *anypb.Any {
	if x != nil {
		return x.Kh
	}
	return nil
}

// SignMultiResponse sign
type SignMultiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignMultiResponse) Reset() {
	*x = SignMultiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignMultiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignMultiResponse) ProtoMessage() {}

func (x *SignMultiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignMultiResponse.ProtoReflect.Descriptor instead.
func (*SignMultiResponse) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{17}
}

func (x *SignMultiResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// VerifyMultiRequest verify
type VerifyMultiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   [][]byte   `protobuf:"bytes,1,rep,name=message,proto3" json:"message,omitempty"`
	Signature []byte     `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Kh        *anypb.Any `protobuf:"bytes,3,opt,name=kh,proto3" json:"kh,omitempty"`
}

func (x *VerifyMultiRequest) Reset() {
	*x = VerifyMultiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyMultiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyMultiRequest) ProtoMessage() {}

func (x *VerifyMultiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyMultiRequest.ProtoReflect.Descriptor instead.
func (*VerifyMultiRequest) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{18}
}

func (x *VerifyMultiRequest) GetMessage() [][]byte {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *VerifyMultiRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *VerifyMultiRequest) GetKh() *anypb.Any {
	if x != nil {
		return x.Kh
	}
	return nil
}

// VerifyMultiResponse verify
type VerifyMultiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VerifyMultiResponse) Reset() {
	*x = VerifyMultiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyMultiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyMultiResponse) ProtoMessage() {}

func (x *VerifyMultiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyMultiResponse.ProtoReflect.Descriptor instead.
func (*VerifyMultiResponse) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{19}
}

// VerifyProofRequest proof
type VerifyProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RevealedMessages [][]byte   `protobuf:"bytes,1,rep,name=revealedMessages,proto3" json:"revealedMessages,omitempty"`
	Proof            []byte     `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
	Nonce            []byte     `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Kh               *anypb.Any `protobuf:"bytes,4,opt,name=kh,proto3" json:"kh,omitempty"`
}

func (x *VerifyProofRequest) Reset() {
	*x = VerifyProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyProofRequest) ProtoMessage() {}

func (x *VerifyProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyProofRequest.ProtoReflect.Descriptor instead.
func (*VerifyProofRequest) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{20}
}

func (x *VerifyProofRequest) GetRevealedMessages() [][]byte {
	if x != nil {
		return x.RevealedMessages
	}
	return nil
}

func (x *VerifyProofRequest) GetProof() []byte {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *VerifyProofRequest) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *VerifyProofRequest) GetKh() *anypb.Any {
	if x != nil {
		return x.Kh
	}
	return nil
}

// VerifyProofResponse proof
type VerifyProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VerifyProofResponse) Reset() {
	*x = VerifyProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyProofResponse) ProtoMessage() {}

func (x *VerifyProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyProofResponse.ProtoReflect.Descriptor instead.
func (*VerifyProofResponse) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{21}
}

// DeriveProofRequest proof
type DeriveProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RevealedMessages [][]byte   `protobuf:"bytes,1,rep,name=revealedMessages,proto3" json:"revealedMessages,omitempty"`
	BbsSignature     []byte     `protobuf:"bytes,2,opt,name=bbsSignature,proto3" json:"bbsSignature,omitempty"`
	Nonce            []byte     `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	RevealedIndexes  []int32    `protobuf:"varint,4,rep,packed,name=revealedIndexes,proto3" json:"revealedIndexes,omitempty"`
	Kh               *anypb.Any `protobuf:"bytes,5,opt,name=kh,proto3" json:"kh,omitempty"`
}

func (x *DeriveProofRequest) Reset() {
	*x = DeriveProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeriveProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeriveProofRequest) ProtoMessage() {}

func (x *DeriveProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeriveProofRequest.ProtoReflect.Descriptor instead.
func (*DeriveProofRequest) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{22}
}

func (x *DeriveProofRequest) GetRevealedMessages() [][]byte {
	if x != nil {
		return x.RevealedMessages
	}
	return nil
}

func (x *DeriveProofRequest) GetBbsSignature() []byte {
	if x != nil {
		return x.BbsSignature
	}
	return nil
}

func (x *DeriveProofRequest) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *DeriveProofRequest) GetRevealedIndexes() []int32 {
	if x != nil {
		return x.RevealedIndexes
	}
	return nil
}

func (x *DeriveProofRequest) GetKh() *anypb.Any {
	if x != nil {
		return x.Kh
	}
	return nil
}

// DeriveProofResponse proof
type DeriveProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignatureProof []byte `protobuf:"bytes,1,opt,name=signatureProof,proto3" json:"signatureProof,omitempty"`
}

func (x *DeriveProofResponse) Reset() {
	*x = DeriveProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crypto_services_crypto_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeriveProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeriveProofResponse) ProtoMessage() {}

func (x *DeriveProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_crypto_services_crypto_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeriveProofResponse.ProtoReflect.Descriptor instead.
func (*DeriveProofResponse) Descriptor() ([]byte, []int) {
	return file_api_crypto_services_crypto_proto_rawDescGZIP(), []int{23}
}

func (x *DeriveProofResponse) GetSignatureProof() []byte {
	if x != nil {
		return x.SignatureProof
	}
	return nil
}

var File_api_crypto_services_crypto_proto protoreflect.FileDescriptor

var file_api_crypto_services_crypto_proto_rawDesc = []byte{
	0x0a, 0x20, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x62, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x61, 0x61, 0x64, 0x12,
	0x24, 0x0a, 0x02, 0x6b, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x02, 0x6b, 0x68, 0x22, 0x47, 0x0a, 0x0f, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x76,
	0x0a, 0x0e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x61, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x24, 0x0a, 0x02, 0x6b, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x02, 0x6b, 0x68, 0x22, 0x2f, 0x0a, 0x0f, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0x4d, 0x0a, 0x0b, 0x53, 0x69, 0x67, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x24, 0x0a, 0x02, 0x6b, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x02, 0x6b, 0x68, 0x22, 0x2c, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x6d, 0x0a, 0x0d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a,
	0x02, 0x6b, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x02, 0x6b, 0x68, 0x22, 0x10, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x4d, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24,
	0x0a, 0x02, 0x6b, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x02, 0x6b, 0x68, 0x22, 0x26, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x22, 0x5e, 0x0a, 0x10,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d,
	0x61, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x02, 0x6b, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x02, 0x6b, 0x68, 0x22, 0x13, 0x0a, 0x11,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x99, 0x02, 0x0a, 0x0e, 0x57, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x65, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x63, 0x65, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x75, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x61, 0x70, 0x75, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x76, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x61, 0x70, 0x76, 0x12, 0x39, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x72, 0x65, 0x63, 0x50,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x56, 0x0a, 0x0b, 0x77, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79,
	0x4f, 0x70, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x57, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x57, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x4f, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0b, 0x77, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x4f, 0x70, 0x74, 0x73, 0x1a, 0x3e, 0x0a,
	0x10, 0x57, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x4f, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6a, 0x0a,
	0x0f, 0x57, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x52, 0x13, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x22, 0xb3, 0x02, 0x0a, 0x10, 0x55, 0x6e,
	0x77, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57,
	0x0a, 0x13, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x52, 0x13, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x57, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x02, 0x6b, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x02, 0x6b, 0x68, 0x12, 0x5e, 0x0a,
	0x0d, 0x75, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x4f, 0x70, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x77, 0x72, 0x61,
	0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x6e, 0x77, 0x72,
	0x61, 0x70, 0x4b, 0x65, 0x79, 0x4f, 0x70, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x75, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x4f, 0x70, 0x74, 0x73, 0x1a, 0x40, 0x0a,
	0x12, 0x55, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x4f, 0x70, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x25, 0x0a, 0x11, 0x55, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x52, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x02, 0x6b, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x02, 0x6b, 0x68, 0x22, 0x31, 0x0a, 0x11, 0x53, 0x69,
	0x67, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x72, 0x0a,
	0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x02, 0x6b,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x02, 0x6b,
	0x68, 0x22, 0x15, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x76, 0x65, 0x61,
	0x6c, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x02, 0x6b, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x02, 0x6b, 0x68, 0x22, 0x15, 0x0a,
	0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x72,
	0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x62, 0x73, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x62,
	0x62, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x76, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x76, 0x65,
	0x61, 0x6c, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x02, 0x6b,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x02, 0x6b,
	0x68, 0x22, 0x3d, 0x0a, 0x13, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x32, 0xdb, 0x08, 0x0a, 0x06, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12, 0x56, 0x0a, 0x07, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x23,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x04, 0x73,
	0x69, 0x67, 0x6e, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x06, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5f, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x12, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5c, 0x0a, 0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x63, 0x12, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x07, 0x77, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x57, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x57, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x09, 0x75, 0x6e, 0x77, 0x72, 0x61, 0x70,
	0x4b, 0x65, 0x79, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x77, 0x72, 0x61, 0x70,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x55, 0x6e, 0x77, 0x72, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x62, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0b, 0x64, 0x65,
	0x72, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2c,
	0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x68, 0x61,
	0x74, 0x74, 0x69, 0x2f, 0x47, 0x53, 0x53, 0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_crypto_services_crypto_proto_rawDescOnce sync.Once
	file_api_crypto_services_crypto_proto_rawDescData = file_api_crypto_services_crypto_proto_rawDesc
)

func file_api_crypto_services_crypto_proto_rawDescGZIP() []byte {
	file_api_crypto_services_crypto_proto_rawDescOnce.Do(func() {
		file_api_crypto_services_crypto_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_crypto_services_crypto_proto_rawDescData)
	})
	return file_api_crypto_services_crypto_proto_rawDescData
}

var file_api_crypto_services_crypto_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_api_crypto_services_crypto_proto_goTypes = []interface{}{
	(*EncryptRequest)(nil),            // 0: api.crypto.services.EncryptRequest
	(*EncryptResponse)(nil),           // 1: api.crypto.services.EncryptResponse
	(*DecryptRequest)(nil),            // 2: api.crypto.services.DecryptRequest
	(*DecryptResponse)(nil),           // 3: api.crypto.services.DecryptResponse
	(*SignRequest)(nil),               // 4: api.crypto.services.SignRequest
	(*SignResponse)(nil),              // 5: api.crypto.services.SignResponse
	(*VerifyRequest)(nil),             // 6: api.crypto.services.VerifyRequest
	(*VerifyResponse)(nil),            // 7: api.crypto.services.VerifyResponse
	(*ComputeMacRequest)(nil),         // 8: api.crypto.services.ComputeMacRequest
	(*ComputeMacResponse)(nil),        // 9: api.crypto.services.ComputeMacResponse
	(*VerifyMacRequest)(nil),          // 10: api.crypto.services.VerifyMacRequest
	(*VerifyMacResponse)(nil),         // 11: api.crypto.services.VerifyMacResponse
	(*WrapKeyRequest)(nil),            // 12: api.crypto.services.WrapKeyRequest
	(*WrapKeyResponse)(nil),           // 13: api.crypto.services.WrapKeyResponse
	(*UnwrapKeyRequest)(nil),          // 14: api.crypto.services.UnwrapKeyRequest
	(*UnwrapKeyResponse)(nil),         // 15: api.crypto.services.UnwrapKeyResponse
	(*SignMultiRequest)(nil),          // 16: api.crypto.services.SignMultiRequest
	(*SignMultiResponse)(nil),         // 17: api.crypto.services.SignMultiResponse
	(*VerifyMultiRequest)(nil),        // 18: api.crypto.services.VerifyMultiRequest
	(*VerifyMultiResponse)(nil),       // 19: api.crypto.services.VerifyMultiResponse
	(*VerifyProofRequest)(nil),        // 20: api.crypto.services.VerifyProofRequest
	(*VerifyProofResponse)(nil),       // 21: api.crypto.services.VerifyProofResponse
	(*DeriveProofRequest)(nil),        // 22: api.crypto.services.DeriveProofRequest
	(*DeriveProofResponse)(nil),       // 23: api.crypto.services.DeriveProofResponse
	nil,                               // 24: api.crypto.services.WrapKeyRequest.WrapKeyOptsEntry
	nil,                               // 25: api.crypto.services.UnwrapKeyRequest.UnwrapKeyOptsEntry
	(*anypb.Any)(nil),                 // 26: google.protobuf.Any
	(*types.PublicKey)(nil),           // 27: api.crypto.types.PublicKey
	(*types.RecipientWrappedKey)(nil), // 28: api.crypto.types.RecipientWrappedKey
}
var file_api_crypto_services_crypto_proto_depIdxs = []int32{
	26, // 0: api.crypto.services.EncryptRequest.kh:type_name -> google.protobuf.Any
	26, // 1: api.crypto.services.DecryptRequest.kh:type_name -> google.protobuf.Any
	26, // 2: api.crypto.services.SignRequest.kh:type_name -> google.protobuf.Any
	26, // 3: api.crypto.services.VerifyRequest.kh:type_name -> google.protobuf.Any
	26, // 4: api.crypto.services.ComputeMacRequest.kh:type_name -> google.protobuf.Any
	26, // 5: api.crypto.services.VerifyMacRequest.kh:type_name -> google.protobuf.Any
	27, // 6: api.crypto.services.WrapKeyRequest.recPubKey:type_name -> api.crypto.types.PublicKey
	24, // 7: api.crypto.services.WrapKeyRequest.wrapKeyOpts:type_name -> api.crypto.services.WrapKeyRequest.WrapKeyOptsEntry
	28, // 8: api.crypto.services.WrapKeyResponse.recipientWrappedKey:type_name -> api.crypto.types.RecipientWrappedKey
	28, // 9: api.crypto.services.UnwrapKeyRequest.recipientWrappedKey:type_name -> api.crypto.types.RecipientWrappedKey
	26, // 10: api.crypto.services.UnwrapKeyRequest.kh:type_name -> google.protobuf.Any
	25, // 11: api.crypto.services.UnwrapKeyRequest.unwrapKeyOpts:type_name -> api.crypto.services.UnwrapKeyRequest.UnwrapKeyOptsEntry
	26, // 12: api.crypto.services.SignMultiRequest.kh:type_name -> google.protobuf.Any
	26, // 13: api.crypto.services.VerifyMultiRequest.kh:type_name -> google.protobuf.Any
	26, // 14: api.crypto.services.VerifyProofRequest.kh:type_name -> google.protobuf.Any
	26, // 15: api.crypto.services.DeriveProofRequest.kh:type_name -> google.protobuf.Any
	0,  // 16: api.crypto.services.Crypto.encrypt:input_type -> api.crypto.services.EncryptRequest
	2,  // 17: api.crypto.services.Crypto.decrypt:input_type -> api.crypto.services.DecryptRequest
	4,  // 18: api.crypto.services.Crypto.sign:input_type -> api.crypto.services.SignRequest
	6,  // 19: api.crypto.services.Crypto.verify:input_type -> api.crypto.services.VerifyRequest
	8,  // 20: api.crypto.services.Crypto.computeMac:input_type -> api.crypto.services.ComputeMacRequest
	10, // 21: api.crypto.services.Crypto.verifyMac:input_type -> api.crypto.services.VerifyMacRequest
	12, // 22: api.crypto.services.Crypto.wrapKey:input_type -> api.crypto.services.WrapKeyRequest
	14, // 23: api.crypto.services.Crypto.unwrapKey:input_type -> api.crypto.services.UnwrapKeyRequest
	16, // 24: api.crypto.services.Crypto.signMulti:input_type -> api.crypto.services.SignMultiRequest
	18, // 25: api.crypto.services.Crypto.verifyMulti:input_type -> api.crypto.services.VerifyMultiRequest
	20, // 26: api.crypto.services.Crypto.verifyProof:input_type -> api.crypto.services.VerifyProofRequest
	22, // 27: api.crypto.services.Crypto.deriveProof:input_type -> api.crypto.services.DeriveProofRequest
	1,  // 28: api.crypto.services.Crypto.encrypt:output_type -> api.crypto.services.EncryptResponse
	3,  // 29: api.crypto.services.Crypto.decrypt:output_type -> api.crypto.services.DecryptResponse
	5,  // 30: api.crypto.services.Crypto.sign:output_type -> api.crypto.services.SignResponse
	7,  // 31: api.crypto.services.Crypto.verify:output_type -> api.crypto.services.VerifyResponse
	9,  // 32: api.crypto.services.Crypto.computeMac:output_type -> api.crypto.services.ComputeMacResponse
	11, // 33: api.crypto.services.Crypto.verifyMac:output_type -> api.crypto.services.VerifyMacResponse
	13, // 34: api.crypto.services.Crypto.wrapKey:output_type -> api.crypto.services.WrapKeyResponse
	15, // 35: api.crypto.services.Crypto.unwrapKey:output_type -> api.crypto.services.UnwrapKeyResponse
	17, // 36: api.crypto.services.Crypto.signMulti:output_type -> api.crypto.services.SignMultiResponse
	19, // 37: api.crypto.services.Crypto.verifyMulti:output_type -> api.crypto.services.VerifyMultiResponse
	21, // 38: api.crypto.services.Crypto.verifyProof:output_type -> api.crypto.services.VerifyProofResponse
	23, // 39: api.crypto.services.Crypto.deriveProof:output_type -> api.crypto.services.DeriveProofResponse
	28, // [28:40] is the sub-list for method output_type
	16, // [16:28] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_api_crypto_services_crypto_proto_init() }
func file_api_crypto_services_crypto_proto_init() {
	if File_api_crypto_services_crypto_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_crypto_services_crypto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeMacRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeMacResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyMacRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyMacResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WrapKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WrapKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnwrapKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnwrapKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignMultiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignMultiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyMultiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyMultiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeriveProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crypto_services_crypto_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeriveProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_crypto_services_crypto_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_crypto_services_crypto_proto_goTypes,
		DependencyIndexes: file_api_crypto_services_crypto_proto_depIdxs,
		MessageInfos:      file_api_crypto_services_crypto_proto_msgTypes,
	}.Build()
	File_api_crypto_services_crypto_proto = out.File
	file_api_crypto_services_crypto_proto_rawDesc = nil
	file_api_crypto_services_crypto_proto_goTypes = nil
	file_api_crypto_services_crypto_proto_depIdxs = nil
}
