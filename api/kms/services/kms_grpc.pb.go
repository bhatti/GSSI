// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/kms/services/kms.proto

package types

import (
	context "context"
	types "github.com/bhatti/GSSI/api/common/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KMSControllerClient is the client API for KMSController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KMSControllerClient interface {
	// CreateKeySet create a new public/private encryption and signature key pairs set.
	// CreateKeySet swagger:route POST /kms/keyset kms createKeySet
	//
	// Create key set.
	//
	// Responses:
	//        200: createKeySetRes
	CreateKeySet(ctx context.Context, in *CreateKeySetRequest, opts ...grpc.CallOption) (*CreateKeySetResponse, error)
	// ImportKey imports a key.
	// ImportKey swagger:route POST /kms/import kms importKey
	//
	// Responses:
	ImportKey(ctx context.Context, in *ImportKeyReq, opts ...grpc.CallOption) (*types.EmptyResponse, error)
}

type kMSControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewKMSControllerClient(cc grpc.ClientConnInterface) KMSControllerClient {
	return &kMSControllerClient{cc}
}

func (c *kMSControllerClient) CreateKeySet(ctx context.Context, in *CreateKeySetRequest, opts ...grpc.CallOption) (*CreateKeySetResponse, error) {
	out := new(CreateKeySetResponse)
	err := c.cc.Invoke(ctx, "/api.kms.services.KMSController/createKeySet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kMSControllerClient) ImportKey(ctx context.Context, in *ImportKeyReq, opts ...grpc.CallOption) (*types.EmptyResponse, error) {
	out := new(types.EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.kms.services.KMSController/importKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KMSControllerServer is the server API for KMSController service.
// All implementations must embed UnimplementedKMSControllerServer
// for forward compatibility
type KMSControllerServer interface {
	// CreateKeySet create a new public/private encryption and signature key pairs set.
	// CreateKeySet swagger:route POST /kms/keyset kms createKeySet
	//
	// Create key set.
	//
	// Responses:
	//        200: createKeySetRes
	CreateKeySet(context.Context, *CreateKeySetRequest) (*CreateKeySetResponse, error)
	// ImportKey imports a key.
	// ImportKey swagger:route POST /kms/import kms importKey
	//
	// Responses:
	ImportKey(context.Context, *ImportKeyReq) (*types.EmptyResponse, error)
	mustEmbedUnimplementedKMSControllerServer()
}

// UnimplementedKMSControllerServer must be embedded to have forward compatible implementations.
type UnimplementedKMSControllerServer struct {
}

func (UnimplementedKMSControllerServer) CreateKeySet(context.Context, *CreateKeySetRequest) (*CreateKeySetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeySet not implemented")
}
func (UnimplementedKMSControllerServer) ImportKey(context.Context, *ImportKeyReq) (*types.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportKey not implemented")
}
func (UnimplementedKMSControllerServer) mustEmbedUnimplementedKMSControllerServer() {}

// UnsafeKMSControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KMSControllerServer will
// result in compilation errors.
type UnsafeKMSControllerServer interface {
	mustEmbedUnimplementedKMSControllerServer()
}

func RegisterKMSControllerServer(s grpc.ServiceRegistrar, srv KMSControllerServer) {
	s.RegisterService(&KMSController_ServiceDesc, srv)
}

func _KMSController_CreateKeySet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeySetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSControllerServer).CreateKeySet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.kms.services.KMSController/createKeySet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSControllerServer).CreateKeySet(ctx, req.(*CreateKeySetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KMSController_ImportKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KMSControllerServer).ImportKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.kms.services.KMSController/importKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KMSControllerServer).ImportKey(ctx, req.(*ImportKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// KMSController_ServiceDesc is the grpc.ServiceDesc for KMSController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KMSController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.kms.services.KMSController",
	HandlerType: (*KMSControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createKeySet",
			Handler:    _KMSController_CreateKeySet_Handler,
		},
		{
			MethodName: "importKey",
			Handler:    _KMSController_ImportKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/kms/services/kms.proto",
}
