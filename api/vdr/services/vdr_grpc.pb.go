// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/vdr/services/vdr.proto

package services

import (
	context "context"
	types "github.com/bhatti/GSSI/api/common/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VDRControllerClient is the client API for VDRController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VDRControllerClient interface {
	// ResolveDID resolve did.
	// ResolveDID swagger:route GET /vdr/did/resolve/{id} vdr resolveDIDReq
	//
	// Resolve did
	//
	// Responses:
	//    default: genericError
	//        200: resolveDIDRes
	ResolveDID(ctx context.Context, in *ResolveDIDReq, opts ...grpc.CallOption) (*ResolveDIDRes, error)
	// SaveDID saves the did doc to the store.
	// SaveDID swagger:route POST /vdr/did vdr saveDIDReq
	//
	// Saves a did document with the friendly name.
	//
	// Responses:
	//    default: genericError
	SaveDID(ctx context.Context, in *SaveDIDReq, opts ...grpc.CallOption) (*types.EmptyResponse, error)
	// CreateDID create the did doc.
	// CreateDID swagger:route POST /vdr/did/create vdr createDIDReq
	//
	// Create a did document.
	//
	// Responses:
	//    default: genericError
	//        200: documentRes
	CreateDID(ctx context.Context, in *CreateDIDRequest, opts ...grpc.CallOption) (*DocumentRes, error)
	// GetDID retrieves the did from the store.
	// GetDID swagger:route GET /vdr/did/{id} vdr getDIDReq
	//
	// Gets did document with the friendly name.
	//
	// Responses:
	//    default: genericError
	//        200: documentRes
	GetDID(ctx context.Context, in *GetDIDReq, opts ...grpc.CallOption) (*DocumentRes, error)
	// GetDIDRecords retrieves the did doc containing name and didID.
	// GetDIDRecords swagger:route GET /vdr/did/records vdr getDIDRecords
	//
	// Retrieves the did records
	//
	// Responses:
	//    default: genericError
	//        200: didRecordResult
	GetDIDRecords(ctx context.Context, in *DetDIDRecordsReq, opts ...grpc.CallOption) (*DidRecordResult, error)
}

type vDRControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewVDRControllerClient(cc grpc.ClientConnInterface) VDRControllerClient {
	return &vDRControllerClient{cc}
}

func (c *vDRControllerClient) ResolveDID(ctx context.Context, in *ResolveDIDReq, opts ...grpc.CallOption) (*ResolveDIDRes, error) {
	out := new(ResolveDIDRes)
	err := c.cc.Invoke(ctx, "/api.vdr.services.VDRController/resolveDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vDRControllerClient) SaveDID(ctx context.Context, in *SaveDIDReq, opts ...grpc.CallOption) (*types.EmptyResponse, error) {
	out := new(types.EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.vdr.services.VDRController/saveDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vDRControllerClient) CreateDID(ctx context.Context, in *CreateDIDRequest, opts ...grpc.CallOption) (*DocumentRes, error) {
	out := new(DocumentRes)
	err := c.cc.Invoke(ctx, "/api.vdr.services.VDRController/createDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vDRControllerClient) GetDID(ctx context.Context, in *GetDIDReq, opts ...grpc.CallOption) (*DocumentRes, error) {
	out := new(DocumentRes)
	err := c.cc.Invoke(ctx, "/api.vdr.services.VDRController/getDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vDRControllerClient) GetDIDRecords(ctx context.Context, in *DetDIDRecordsReq, opts ...grpc.CallOption) (*DidRecordResult, error) {
	out := new(DidRecordResult)
	err := c.cc.Invoke(ctx, "/api.vdr.services.VDRController/getDIDRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VDRControllerServer is the server API for VDRController service.
// All implementations must embed UnimplementedVDRControllerServer
// for forward compatibility
type VDRControllerServer interface {
	// ResolveDID resolve did.
	// ResolveDID swagger:route GET /vdr/did/resolve/{id} vdr resolveDIDReq
	//
	// Resolve did
	//
	// Responses:
	//    default: genericError
	//        200: resolveDIDRes
	ResolveDID(context.Context, *ResolveDIDReq) (*ResolveDIDRes, error)
	// SaveDID saves the did doc to the store.
	// SaveDID swagger:route POST /vdr/did vdr saveDIDReq
	//
	// Saves a did document with the friendly name.
	//
	// Responses:
	//    default: genericError
	SaveDID(context.Context, *SaveDIDReq) (*types.EmptyResponse, error)
	// CreateDID create the did doc.
	// CreateDID swagger:route POST /vdr/did/create vdr createDIDReq
	//
	// Create a did document.
	//
	// Responses:
	//    default: genericError
	//        200: documentRes
	CreateDID(context.Context, *CreateDIDRequest) (*DocumentRes, error)
	// GetDID retrieves the did from the store.
	// GetDID swagger:route GET /vdr/did/{id} vdr getDIDReq
	//
	// Gets did document with the friendly name.
	//
	// Responses:
	//    default: genericError
	//        200: documentRes
	GetDID(context.Context, *GetDIDReq) (*DocumentRes, error)
	// GetDIDRecords retrieves the did doc containing name and didID.
	// GetDIDRecords swagger:route GET /vdr/did/records vdr getDIDRecords
	//
	// Retrieves the did records
	//
	// Responses:
	//    default: genericError
	//        200: didRecordResult
	GetDIDRecords(context.Context, *DetDIDRecordsReq) (*DidRecordResult, error)
	mustEmbedUnimplementedVDRControllerServer()
}

// UnimplementedVDRControllerServer must be embedded to have forward compatible implementations.
type UnimplementedVDRControllerServer struct {
}

func (UnimplementedVDRControllerServer) ResolveDID(context.Context, *ResolveDIDReq) (*ResolveDIDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveDID not implemented")
}
func (UnimplementedVDRControllerServer) SaveDID(context.Context, *SaveDIDReq) (*types.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveDID not implemented")
}
func (UnimplementedVDRControllerServer) CreateDID(context.Context, *CreateDIDRequest) (*DocumentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDID not implemented")
}
func (UnimplementedVDRControllerServer) GetDID(context.Context, *GetDIDReq) (*DocumentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDID not implemented")
}
func (UnimplementedVDRControllerServer) GetDIDRecords(context.Context, *DetDIDRecordsReq) (*DidRecordResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDIDRecords not implemented")
}
func (UnimplementedVDRControllerServer) mustEmbedUnimplementedVDRControllerServer() {}

// UnsafeVDRControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VDRControllerServer will
// result in compilation errors.
type UnsafeVDRControllerServer interface {
	mustEmbedUnimplementedVDRControllerServer()
}

func RegisterVDRControllerServer(s grpc.ServiceRegistrar, srv VDRControllerServer) {
	s.RegisterService(&VDRController_ServiceDesc, srv)
}

func _VDRController_ResolveDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveDIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VDRControllerServer).ResolveDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vdr.services.VDRController/resolveDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VDRControllerServer).ResolveDID(ctx, req.(*ResolveDIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VDRController_SaveDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveDIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VDRControllerServer).SaveDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vdr.services.VDRController/saveDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VDRControllerServer).SaveDID(ctx, req.(*SaveDIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VDRController_CreateDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VDRControllerServer).CreateDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vdr.services.VDRController/createDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VDRControllerServer).CreateDID(ctx, req.(*CreateDIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VDRController_GetDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VDRControllerServer).GetDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vdr.services.VDRController/getDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VDRControllerServer).GetDID(ctx, req.(*GetDIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VDRController_GetDIDRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetDIDRecordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VDRControllerServer).GetDIDRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vdr.services.VDRController/getDIDRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VDRControllerServer).GetDIDRecords(ctx, req.(*DetDIDRecordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VDRController_ServiceDesc is the grpc.ServiceDesc for VDRController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VDRController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.vdr.services.VDRController",
	HandlerType: (*VDRControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "resolveDID",
			Handler:    _VDRController_ResolveDID_Handler,
		},
		{
			MethodName: "saveDID",
			Handler:    _VDRController_SaveDID_Handler,
		},
		{
			MethodName: "createDID",
			Handler:    _VDRController_CreateDID_Handler,
		},
		{
			MethodName: "getDID",
			Handler:    _VDRController_GetDID_Handler,
		},
		{
			MethodName: "getDIDRecords",
			Handler:    _VDRController_GetDIDRecords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/vdr/services/vdr.proto",
}
