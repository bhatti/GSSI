// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/ld/services/ld.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LinkedDataControllerClient is the client API for LinkedDataController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LinkedDataControllerClient interface {
	// addContexts swagger:route POST /ld/context ld addContextsReq
	//
	// Adds JSON-LD contexts to the underlying storage.
	//
	// Responses:
	//    default: genericError
	AddContexts(ctx context.Context, in *AddContextsRequest, opts ...grpc.CallOption) (*AddContextsResponse, error)
	// addRemoteProvider swagger:route POST /ld/remote-provider ld addRemoteProviderReq
	//
	// Adds remote provider and JSON-LD contexts from that provider to the underlying storage.
	//
	// Responses:
	//    default: genericError
	AddRemoteProvider(ctx context.Context, in *AddRemoteProviderRequest, opts ...grpc.CallOption) (*AddRemoteProviderResponse, error)
	// refreshRemoteProvider swagger:route POST /ld/remote-provider/{id}/refresh ld refreshRemoteProviderReq
	//
	// Updates contexts from the remote provider.
	//
	// Responses:
	//    default: genericError
	RefreshRemoteProvider(ctx context.Context, in *RefreshRemoteProviderRequest, opts ...grpc.CallOption) (*RefreshRemoteProviderResponse, error)
	// deleteRemoteProvider swagger:route DELETE /ld/remote-provider/{id} ld deleteRemoteProviderReq
	//
	// Deletes remote provider and JSON-LD contexts from that provider from the underlying storage.
	//
	//
	// Responses:
	//    default: genericError
	DeleteRemoteProvider(ctx context.Context, in *DeleteRemoteProviderRequest, opts ...grpc.CallOption) (*DeleteRemoteProviderResponse, error)
	// getAllRemoteProviders swagger:route GET /ld/remote-providers ld getAllRemoteProvidersReq
	//
	// Gets all remote providers from the underlying storage.
	//
	// Responses:
	//    default: genericError
	//    200: getAllRemoteProvidersResp
	GetAllRemoteProviders(ctx context.Context, in *GetAllRemoteProvidersRequest, opts ...grpc.CallOption) (*GetAllRemoteProvidersResponse, error)
	// RefreshAllRemoteProviders swagger:route POST /ld/remote-providers/refresh ld refreshAllRemoteProvidersReq
	//
	// Updates contexts from all remote providers in the underlying storage.
	//
	// Responses:
	//    default: genericError
	//    200: getAllRemoteProvidersResp
	RefreshAllRemoteProviders(ctx context.Context, in *RefreshAllRemoteProvidersRequst, opts ...grpc.CallOption) (*RefreshAllRemoteProvidersResponse, error)
}

type linkedDataControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewLinkedDataControllerClient(cc grpc.ClientConnInterface) LinkedDataControllerClient {
	return &linkedDataControllerClient{cc}
}

func (c *linkedDataControllerClient) AddContexts(ctx context.Context, in *AddContextsRequest, opts ...grpc.CallOption) (*AddContextsResponse, error) {
	out := new(AddContextsResponse)
	err := c.cc.Invoke(ctx, "/api.ld.services.LinkedDataController/addContexts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedDataControllerClient) AddRemoteProvider(ctx context.Context, in *AddRemoteProviderRequest, opts ...grpc.CallOption) (*AddRemoteProviderResponse, error) {
	out := new(AddRemoteProviderResponse)
	err := c.cc.Invoke(ctx, "/api.ld.services.LinkedDataController/addRemoteProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedDataControllerClient) RefreshRemoteProvider(ctx context.Context, in *RefreshRemoteProviderRequest, opts ...grpc.CallOption) (*RefreshRemoteProviderResponse, error) {
	out := new(RefreshRemoteProviderResponse)
	err := c.cc.Invoke(ctx, "/api.ld.services.LinkedDataController/refreshRemoteProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedDataControllerClient) DeleteRemoteProvider(ctx context.Context, in *DeleteRemoteProviderRequest, opts ...grpc.CallOption) (*DeleteRemoteProviderResponse, error) {
	out := new(DeleteRemoteProviderResponse)
	err := c.cc.Invoke(ctx, "/api.ld.services.LinkedDataController/deleteRemoteProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedDataControllerClient) GetAllRemoteProviders(ctx context.Context, in *GetAllRemoteProvidersRequest, opts ...grpc.CallOption) (*GetAllRemoteProvidersResponse, error) {
	out := new(GetAllRemoteProvidersResponse)
	err := c.cc.Invoke(ctx, "/api.ld.services.LinkedDataController/getAllRemoteProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *linkedDataControllerClient) RefreshAllRemoteProviders(ctx context.Context, in *RefreshAllRemoteProvidersRequst, opts ...grpc.CallOption) (*RefreshAllRemoteProvidersResponse, error) {
	out := new(RefreshAllRemoteProvidersResponse)
	err := c.cc.Invoke(ctx, "/api.ld.services.LinkedDataController/refreshAllRemoteProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LinkedDataControllerServer is the server API for LinkedDataController service.
// All implementations must embed UnimplementedLinkedDataControllerServer
// for forward compatibility
type LinkedDataControllerServer interface {
	// addContexts swagger:route POST /ld/context ld addContextsReq
	//
	// Adds JSON-LD contexts to the underlying storage.
	//
	// Responses:
	//    default: genericError
	AddContexts(context.Context, *AddContextsRequest) (*AddContextsResponse, error)
	// addRemoteProvider swagger:route POST /ld/remote-provider ld addRemoteProviderReq
	//
	// Adds remote provider and JSON-LD contexts from that provider to the underlying storage.
	//
	// Responses:
	//    default: genericError
	AddRemoteProvider(context.Context, *AddRemoteProviderRequest) (*AddRemoteProviderResponse, error)
	// refreshRemoteProvider swagger:route POST /ld/remote-provider/{id}/refresh ld refreshRemoteProviderReq
	//
	// Updates contexts from the remote provider.
	//
	// Responses:
	//    default: genericError
	RefreshRemoteProvider(context.Context, *RefreshRemoteProviderRequest) (*RefreshRemoteProviderResponse, error)
	// deleteRemoteProvider swagger:route DELETE /ld/remote-provider/{id} ld deleteRemoteProviderReq
	//
	// Deletes remote provider and JSON-LD contexts from that provider from the underlying storage.
	//
	//
	// Responses:
	//    default: genericError
	DeleteRemoteProvider(context.Context, *DeleteRemoteProviderRequest) (*DeleteRemoteProviderResponse, error)
	// getAllRemoteProviders swagger:route GET /ld/remote-providers ld getAllRemoteProvidersReq
	//
	// Gets all remote providers from the underlying storage.
	//
	// Responses:
	//    default: genericError
	//    200: getAllRemoteProvidersResp
	GetAllRemoteProviders(context.Context, *GetAllRemoteProvidersRequest) (*GetAllRemoteProvidersResponse, error)
	// RefreshAllRemoteProviders swagger:route POST /ld/remote-providers/refresh ld refreshAllRemoteProvidersReq
	//
	// Updates contexts from all remote providers in the underlying storage.
	//
	// Responses:
	//    default: genericError
	//    200: getAllRemoteProvidersResp
	RefreshAllRemoteProviders(context.Context, *RefreshAllRemoteProvidersRequst) (*RefreshAllRemoteProvidersResponse, error)
	mustEmbedUnimplementedLinkedDataControllerServer()
}

// UnimplementedLinkedDataControllerServer must be embedded to have forward compatible implementations.
type UnimplementedLinkedDataControllerServer struct {
}

func (UnimplementedLinkedDataControllerServer) AddContexts(context.Context, *AddContextsRequest) (*AddContextsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddContexts not implemented")
}
func (UnimplementedLinkedDataControllerServer) AddRemoteProvider(context.Context, *AddRemoteProviderRequest) (*AddRemoteProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRemoteProvider not implemented")
}
func (UnimplementedLinkedDataControllerServer) RefreshRemoteProvider(context.Context, *RefreshRemoteProviderRequest) (*RefreshRemoteProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshRemoteProvider not implemented")
}
func (UnimplementedLinkedDataControllerServer) DeleteRemoteProvider(context.Context, *DeleteRemoteProviderRequest) (*DeleteRemoteProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRemoteProvider not implemented")
}
func (UnimplementedLinkedDataControllerServer) GetAllRemoteProviders(context.Context, *GetAllRemoteProvidersRequest) (*GetAllRemoteProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRemoteProviders not implemented")
}
func (UnimplementedLinkedDataControllerServer) RefreshAllRemoteProviders(context.Context, *RefreshAllRemoteProvidersRequst) (*RefreshAllRemoteProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshAllRemoteProviders not implemented")
}
func (UnimplementedLinkedDataControllerServer) mustEmbedUnimplementedLinkedDataControllerServer() {}

// UnsafeLinkedDataControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LinkedDataControllerServer will
// result in compilation errors.
type UnsafeLinkedDataControllerServer interface {
	mustEmbedUnimplementedLinkedDataControllerServer()
}

func RegisterLinkedDataControllerServer(s grpc.ServiceRegistrar, srv LinkedDataControllerServer) {
	s.RegisterService(&LinkedDataController_ServiceDesc, srv)
}

func _LinkedDataController_AddContexts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContextsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedDataControllerServer).AddContexts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ld.services.LinkedDataController/addContexts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedDataControllerServer).AddContexts(ctx, req.(*AddContextsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedDataController_AddRemoteProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRemoteProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedDataControllerServer).AddRemoteProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ld.services.LinkedDataController/addRemoteProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedDataControllerServer).AddRemoteProvider(ctx, req.(*AddRemoteProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedDataController_RefreshRemoteProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRemoteProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedDataControllerServer).RefreshRemoteProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ld.services.LinkedDataController/refreshRemoteProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedDataControllerServer).RefreshRemoteProvider(ctx, req.(*RefreshRemoteProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedDataController_DeleteRemoteProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRemoteProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedDataControllerServer).DeleteRemoteProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ld.services.LinkedDataController/deleteRemoteProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedDataControllerServer).DeleteRemoteProvider(ctx, req.(*DeleteRemoteProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedDataController_GetAllRemoteProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRemoteProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedDataControllerServer).GetAllRemoteProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ld.services.LinkedDataController/getAllRemoteProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedDataControllerServer).GetAllRemoteProviders(ctx, req.(*GetAllRemoteProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LinkedDataController_RefreshAllRemoteProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshAllRemoteProvidersRequst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LinkedDataControllerServer).RefreshAllRemoteProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ld.services.LinkedDataController/refreshAllRemoteProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LinkedDataControllerServer).RefreshAllRemoteProviders(ctx, req.(*RefreshAllRemoteProvidersRequst))
	}
	return interceptor(ctx, in, info, handler)
}

// LinkedDataController_ServiceDesc is the grpc.ServiceDesc for LinkedDataController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LinkedDataController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ld.services.LinkedDataController",
	HandlerType: (*LinkedDataControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addContexts",
			Handler:    _LinkedDataController_AddContexts_Handler,
		},
		{
			MethodName: "addRemoteProvider",
			Handler:    _LinkedDataController_AddRemoteProvider_Handler,
		},
		{
			MethodName: "refreshRemoteProvider",
			Handler:    _LinkedDataController_RefreshRemoteProvider_Handler,
		},
		{
			MethodName: "deleteRemoteProvider",
			Handler:    _LinkedDataController_DeleteRemoteProvider_Handler,
		},
		{
			MethodName: "getAllRemoteProviders",
			Handler:    _LinkedDataController_GetAllRemoteProviders_Handler,
		},
		{
			MethodName: "refreshAllRemoteProviders",
			Handler:    _LinkedDataController_RefreshAllRemoteProviders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ld/services/ld.proto",
}
