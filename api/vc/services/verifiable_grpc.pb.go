// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/vc/services/verifiable.proto

package services

import (
	context "context"
	types "github.com/bhatti/GSSI/api/common/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VerifiableControllerClient is the client API for VerifiableController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VerifiableControllerClient interface {
	// ValidateCredential validates the verifiable credential.
	// ValidateCredential swagger:route POST /verifiable/credential/validate verifiable validateCredentialReq
	//
	// Validates the verifiable credential.
	//
	// Responses:
	//    default: genericError
	//        200: emptyRes
	ValidateCredential(ctx context.Context, in *ValidateCredentialReq, opts ...grpc.CallOption) (*types.EmptyResponse, error)
	// SaveCredential saves the verifiable credential to the store.
	// SaveCredential swagger:route POST /verifiable/credential verifiable saveCredentialReq
	//
	// Saves the verifiable credential.
	//
	// Responses:
	//    default: genericError
	//        200: emptyRes
	SaveCredential(ctx context.Context, in *SaveCredentialReq, opts ...grpc.CallOption) (*types.EmptyResponse, error)
	// SavePresentation swagger:route POST /verifiable/presentation verifiable savePresentationReq
	//
	// Saves the verifiable presentation.
	//
	// Responses:
	//    default: genericError
	//        200: emptyRes
	// SavePresentation saves the presentation to the store.
	SavePresentation(ctx context.Context, in *SavePresentationReq, opts ...grpc.CallOption) (*types.EmptyResponse, error)
	// GetCredential retrieves the verifiable credential from the store.
	// GetCredential swagger:route GET /verifiable/credential/{id} verifiable getCredentialReq
	//
	// Retrieves the verifiable credential.
	//
	// Responses:
	//    default: genericError
	//        200: credentialRes
	GetCredential(ctx context.Context, in *GetCredentialReq, opts ...grpc.CallOption) (*CredentialRes, error)
	// GetPresentation retrieves the verifiable presentation from the store.
	// GetPresentation swagger:route GET /verifiable/presentation/{id} verifiable getPresentationReq
	//
	// Retrieves the verifiable presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentationRes
	GetPresentation(ctx context.Context, in *GetPresentationReq, opts ...grpc.CallOption) (*PresentationRes, error)
	// GetCredentialByName retrieves the verifiable credential by name from the store.
	// GetCredentialByName swagger:route GET /verifiable/credential/name/{name} verifiable getCredentialByNameReq
	//
	// Retrieves the verifiable credential by name.
	//
	// Responses:
	//    default: genericError
	//        200: credentialRecord
	GetCredentialByName(ctx context.Context, in *GetCredentialByNameReq, opts ...grpc.CallOption) (*CredentialRecord, error)
	// GetCredentials retrieves the verifiable credential records containing name and fields of interest.
	// GetCredentials swagger:route GET /verifiable/credentials verifiable getCredentials
	//
	// Retrieves the verifiable credentials.
	//
	// Responses:
	//    default: genericError
	//        200: credentialRecordResult
	GetCredentials(ctx context.Context, in *GetCredentialsReq, opts ...grpc.CallOption) (*CredentialRecordResult, error)
	// SignCredential adds proof to given verifiable credential.
	// SignCredential swagger:route POST /verifiable/signcredential verifiable signCredentialReq
	//
	// Signs given credential.
	//
	// Responses:
	//    default: genericError
	//        200: signCredentialRes
	SignCredential(ctx context.Context, in *SignCredentialReq, opts ...grpc.CallOption) (*SignCredentialRes, error)
	// DeriveCredential swagger:route POST /verifiable/derivecredential verifiable deriveCredentialReq
	//
	// Derives a given verifiable credential for selective disclosure.
	//
	// Responses:
	//    default: genericError
	//        200: deriveCredentialRes
	DeriveCredential(ctx context.Context, in *DeriveCredentialReq, opts ...grpc.CallOption) (*DeriveCredentialRes, error)
	// GetPresentations retrieves the verifiable presentation records containing name and fields of interest.
	// GetPresentations swagger:route GET /verifiable/presentations verifiable
	//
	// Retrieves the verifiable credentials.
	//
	// Responses:
	//    default: genericError
	//        200: presentationRecordResult
	GetPresentations(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*PresentationRecordResult, error)
	// GeneratePresentation generates a verifiable presentation from a verifiable credential.
	// GeneratePresentation swagger:route POST /verifiable/presentation/generate verifiable generatePresentationReq
	//
	// Generates the verifiable presentation from a verifiable credential.
	//
	// Responses:
	//    default: genericError
	//        200: presentationRes
	GeneratePresentation(ctx context.Context, in *GeneratePresentationReq, opts ...grpc.CallOption) (*PresentationRes, error)
	// GeneratePresentationByID generates verifiable presentation from a stored verifiable credential.
	// GeneratePresentationByID swagger:route POST /verifiable/presentation/generatebyid verifiable generatePresentationByIDReq
	//
	// Generates the verifiable presentation from a stored verifiable credential.
	//
	// Responses:
	//    default: genericError
	//        200: presentationRes
	GeneratePresentationByID(ctx context.Context, in *GeneratePresentationByIDReq, opts ...grpc.CallOption) (*PresentationRes, error)
	// RemoveCredentialByName will remove a VC that matches the specified name from the verifiable store.
	// RemoveCredentialByName swagger:route POST /verifiable/credential/remove/name/{name} verifiable removeCredentialByNameReq
	//
	// Removes a verifiable credential by name.
	//
	// Responses:
	//    default: genericError
	//        200: emptyResponse
	RemoveCredentialByName(ctx context.Context, in *RemoveCredentialByNameReq, opts ...grpc.CallOption) (*types.EmptyResponse, error)
	// RemovePresentationByName will remove a VP that matches the specified name from the verifiable store.
	// RemovePresentationByName swagger:route POST /verifiable/presentation/remove/name/{name} verifiable removePresentationByNameReq
	//
	// Removes a verifiable presentation by name.
	//
	// Responses:
	//    default: genericError
	//        200: emptyResponse
	RemovePresentationByName(ctx context.Context, in *RemovePresentationByNameReq, opts ...grpc.CallOption) (*types.EmptyResponse, error)
}

type verifiableControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewVerifiableControllerClient(cc grpc.ClientConnInterface) VerifiableControllerClient {
	return &verifiableControllerClient{cc}
}

func (c *verifiableControllerClient) ValidateCredential(ctx context.Context, in *ValidateCredentialReq, opts ...grpc.CallOption) (*types.EmptyResponse, error) {
	out := new(types.EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.vc.services.VerifiableController/validateCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableControllerClient) SaveCredential(ctx context.Context, in *SaveCredentialReq, opts ...grpc.CallOption) (*types.EmptyResponse, error) {
	out := new(types.EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.vc.services.VerifiableController/saveCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableControllerClient) SavePresentation(ctx context.Context, in *SavePresentationReq, opts ...grpc.CallOption) (*types.EmptyResponse, error) {
	out := new(types.EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.vc.services.VerifiableController/savePresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableControllerClient) GetCredential(ctx context.Context, in *GetCredentialReq, opts ...grpc.CallOption) (*CredentialRes, error) {
	out := new(CredentialRes)
	err := c.cc.Invoke(ctx, "/api.vc.services.VerifiableController/getCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableControllerClient) GetPresentation(ctx context.Context, in *GetPresentationReq, opts ...grpc.CallOption) (*PresentationRes, error) {
	out := new(PresentationRes)
	err := c.cc.Invoke(ctx, "/api.vc.services.VerifiableController/getPresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableControllerClient) GetCredentialByName(ctx context.Context, in *GetCredentialByNameReq, opts ...grpc.CallOption) (*CredentialRecord, error) {
	out := new(CredentialRecord)
	err := c.cc.Invoke(ctx, "/api.vc.services.VerifiableController/getCredentialByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableControllerClient) GetCredentials(ctx context.Context, in *GetCredentialsReq, opts ...grpc.CallOption) (*CredentialRecordResult, error) {
	out := new(CredentialRecordResult)
	err := c.cc.Invoke(ctx, "/api.vc.services.VerifiableController/getCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableControllerClient) SignCredential(ctx context.Context, in *SignCredentialReq, opts ...grpc.CallOption) (*SignCredentialRes, error) {
	out := new(SignCredentialRes)
	err := c.cc.Invoke(ctx, "/api.vc.services.VerifiableController/signCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableControllerClient) DeriveCredential(ctx context.Context, in *DeriveCredentialReq, opts ...grpc.CallOption) (*DeriveCredentialRes, error) {
	out := new(DeriveCredentialRes)
	err := c.cc.Invoke(ctx, "/api.vc.services.VerifiableController/deriveCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableControllerClient) GetPresentations(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*PresentationRecordResult, error) {
	out := new(PresentationRecordResult)
	err := c.cc.Invoke(ctx, "/api.vc.services.VerifiableController/getPresentations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableControllerClient) GeneratePresentation(ctx context.Context, in *GeneratePresentationReq, opts ...grpc.CallOption) (*PresentationRes, error) {
	out := new(PresentationRes)
	err := c.cc.Invoke(ctx, "/api.vc.services.VerifiableController/generatePresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableControllerClient) GeneratePresentationByID(ctx context.Context, in *GeneratePresentationByIDReq, opts ...grpc.CallOption) (*PresentationRes, error) {
	out := new(PresentationRes)
	err := c.cc.Invoke(ctx, "/api.vc.services.VerifiableController/generatePresentationByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableControllerClient) RemoveCredentialByName(ctx context.Context, in *RemoveCredentialByNameReq, opts ...grpc.CallOption) (*types.EmptyResponse, error) {
	out := new(types.EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.vc.services.VerifiableController/removeCredentialByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifiableControllerClient) RemovePresentationByName(ctx context.Context, in *RemovePresentationByNameReq, opts ...grpc.CallOption) (*types.EmptyResponse, error) {
	out := new(types.EmptyResponse)
	err := c.cc.Invoke(ctx, "/api.vc.services.VerifiableController/removePresentationByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VerifiableControllerServer is the server API for VerifiableController service.
// All implementations must embed UnimplementedVerifiableControllerServer
// for forward compatibility
type VerifiableControllerServer interface {
	// ValidateCredential validates the verifiable credential.
	// ValidateCredential swagger:route POST /verifiable/credential/validate verifiable validateCredentialReq
	//
	// Validates the verifiable credential.
	//
	// Responses:
	//    default: genericError
	//        200: emptyRes
	ValidateCredential(context.Context, *ValidateCredentialReq) (*types.EmptyResponse, error)
	// SaveCredential saves the verifiable credential to the store.
	// SaveCredential swagger:route POST /verifiable/credential verifiable saveCredentialReq
	//
	// Saves the verifiable credential.
	//
	// Responses:
	//    default: genericError
	//        200: emptyRes
	SaveCredential(context.Context, *SaveCredentialReq) (*types.EmptyResponse, error)
	// SavePresentation swagger:route POST /verifiable/presentation verifiable savePresentationReq
	//
	// Saves the verifiable presentation.
	//
	// Responses:
	//    default: genericError
	//        200: emptyRes
	// SavePresentation saves the presentation to the store.
	SavePresentation(context.Context, *SavePresentationReq) (*types.EmptyResponse, error)
	// GetCredential retrieves the verifiable credential from the store.
	// GetCredential swagger:route GET /verifiable/credential/{id} verifiable getCredentialReq
	//
	// Retrieves the verifiable credential.
	//
	// Responses:
	//    default: genericError
	//        200: credentialRes
	GetCredential(context.Context, *GetCredentialReq) (*CredentialRes, error)
	// GetPresentation retrieves the verifiable presentation from the store.
	// GetPresentation swagger:route GET /verifiable/presentation/{id} verifiable getPresentationReq
	//
	// Retrieves the verifiable presentation.
	//
	// Responses:
	//    default: genericError
	//        200: presentationRes
	GetPresentation(context.Context, *GetPresentationReq) (*PresentationRes, error)
	// GetCredentialByName retrieves the verifiable credential by name from the store.
	// GetCredentialByName swagger:route GET /verifiable/credential/name/{name} verifiable getCredentialByNameReq
	//
	// Retrieves the verifiable credential by name.
	//
	// Responses:
	//    default: genericError
	//        200: credentialRecord
	GetCredentialByName(context.Context, *GetCredentialByNameReq) (*CredentialRecord, error)
	// GetCredentials retrieves the verifiable credential records containing name and fields of interest.
	// GetCredentials swagger:route GET /verifiable/credentials verifiable getCredentials
	//
	// Retrieves the verifiable credentials.
	//
	// Responses:
	//    default: genericError
	//        200: credentialRecordResult
	GetCredentials(context.Context, *GetCredentialsReq) (*CredentialRecordResult, error)
	// SignCredential adds proof to given verifiable credential.
	// SignCredential swagger:route POST /verifiable/signcredential verifiable signCredentialReq
	//
	// Signs given credential.
	//
	// Responses:
	//    default: genericError
	//        200: signCredentialRes
	SignCredential(context.Context, *SignCredentialReq) (*SignCredentialRes, error)
	// DeriveCredential swagger:route POST /verifiable/derivecredential verifiable deriveCredentialReq
	//
	// Derives a given verifiable credential for selective disclosure.
	//
	// Responses:
	//    default: genericError
	//        200: deriveCredentialRes
	DeriveCredential(context.Context, *DeriveCredentialReq) (*DeriveCredentialRes, error)
	// GetPresentations retrieves the verifiable presentation records containing name and fields of interest.
	// GetPresentations swagger:route GET /verifiable/presentations verifiable
	//
	// Retrieves the verifiable credentials.
	//
	// Responses:
	//    default: genericError
	//        200: presentationRecordResult
	GetPresentations(context.Context, *types.Empty) (*PresentationRecordResult, error)
	// GeneratePresentation generates a verifiable presentation from a verifiable credential.
	// GeneratePresentation swagger:route POST /verifiable/presentation/generate verifiable generatePresentationReq
	//
	// Generates the verifiable presentation from a verifiable credential.
	//
	// Responses:
	//    default: genericError
	//        200: presentationRes
	GeneratePresentation(context.Context, *GeneratePresentationReq) (*PresentationRes, error)
	// GeneratePresentationByID generates verifiable presentation from a stored verifiable credential.
	// GeneratePresentationByID swagger:route POST /verifiable/presentation/generatebyid verifiable generatePresentationByIDReq
	//
	// Generates the verifiable presentation from a stored verifiable credential.
	//
	// Responses:
	//    default: genericError
	//        200: presentationRes
	GeneratePresentationByID(context.Context, *GeneratePresentationByIDReq) (*PresentationRes, error)
	// RemoveCredentialByName will remove a VC that matches the specified name from the verifiable store.
	// RemoveCredentialByName swagger:route POST /verifiable/credential/remove/name/{name} verifiable removeCredentialByNameReq
	//
	// Removes a verifiable credential by name.
	//
	// Responses:
	//    default: genericError
	//        200: emptyResponse
	RemoveCredentialByName(context.Context, *RemoveCredentialByNameReq) (*types.EmptyResponse, error)
	// RemovePresentationByName will remove a VP that matches the specified name from the verifiable store.
	// RemovePresentationByName swagger:route POST /verifiable/presentation/remove/name/{name} verifiable removePresentationByNameReq
	//
	// Removes a verifiable presentation by name.
	//
	// Responses:
	//    default: genericError
	//        200: emptyResponse
	RemovePresentationByName(context.Context, *RemovePresentationByNameReq) (*types.EmptyResponse, error)
	mustEmbedUnimplementedVerifiableControllerServer()
}

// UnimplementedVerifiableControllerServer must be embedded to have forward compatible implementations.
type UnimplementedVerifiableControllerServer struct {
}

func (UnimplementedVerifiableControllerServer) ValidateCredential(context.Context, *ValidateCredentialReq) (*types.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCredential not implemented")
}
func (UnimplementedVerifiableControllerServer) SaveCredential(context.Context, *SaveCredentialReq) (*types.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCredential not implemented")
}
func (UnimplementedVerifiableControllerServer) SavePresentation(context.Context, *SavePresentationReq) (*types.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePresentation not implemented")
}
func (UnimplementedVerifiableControllerServer) GetCredential(context.Context, *GetCredentialReq) (*CredentialRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredential not implemented")
}
func (UnimplementedVerifiableControllerServer) GetPresentation(context.Context, *GetPresentationReq) (*PresentationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPresentation not implemented")
}
func (UnimplementedVerifiableControllerServer) GetCredentialByName(context.Context, *GetCredentialByNameReq) (*CredentialRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentialByName not implemented")
}
func (UnimplementedVerifiableControllerServer) GetCredentials(context.Context, *GetCredentialsReq) (*CredentialRecordResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentials not implemented")
}
func (UnimplementedVerifiableControllerServer) SignCredential(context.Context, *SignCredentialReq) (*SignCredentialRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignCredential not implemented")
}
func (UnimplementedVerifiableControllerServer) DeriveCredential(context.Context, *DeriveCredentialReq) (*DeriveCredentialRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeriveCredential not implemented")
}
func (UnimplementedVerifiableControllerServer) GetPresentations(context.Context, *types.Empty) (*PresentationRecordResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPresentations not implemented")
}
func (UnimplementedVerifiableControllerServer) GeneratePresentation(context.Context, *GeneratePresentationReq) (*PresentationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePresentation not implemented")
}
func (UnimplementedVerifiableControllerServer) GeneratePresentationByID(context.Context, *GeneratePresentationByIDReq) (*PresentationRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneratePresentationByID not implemented")
}
func (UnimplementedVerifiableControllerServer) RemoveCredentialByName(context.Context, *RemoveCredentialByNameReq) (*types.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCredentialByName not implemented")
}
func (UnimplementedVerifiableControllerServer) RemovePresentationByName(context.Context, *RemovePresentationByNameReq) (*types.EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePresentationByName not implemented")
}
func (UnimplementedVerifiableControllerServer) mustEmbedUnimplementedVerifiableControllerServer() {}

// UnsafeVerifiableControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VerifiableControllerServer will
// result in compilation errors.
type UnsafeVerifiableControllerServer interface {
	mustEmbedUnimplementedVerifiableControllerServer()
}

func RegisterVerifiableControllerServer(s grpc.ServiceRegistrar, srv VerifiableControllerServer) {
	s.RegisterService(&VerifiableController_ServiceDesc, srv)
}

func _VerifiableController_ValidateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableControllerServer).ValidateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vc.services.VerifiableController/validateCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableControllerServer).ValidateCredential(ctx, req.(*ValidateCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableController_SaveCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableControllerServer).SaveCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vc.services.VerifiableController/saveCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableControllerServer).SaveCredential(ctx, req.(*SaveCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableController_SavePresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavePresentationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableControllerServer).SavePresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vc.services.VerifiableController/savePresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableControllerServer).SavePresentation(ctx, req.(*SavePresentationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableController_GetCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableControllerServer).GetCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vc.services.VerifiableController/getCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableControllerServer).GetCredential(ctx, req.(*GetCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableController_GetPresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPresentationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableControllerServer).GetPresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vc.services.VerifiableController/getPresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableControllerServer).GetPresentation(ctx, req.(*GetPresentationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableController_GetCredentialByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableControllerServer).GetCredentialByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vc.services.VerifiableController/getCredentialByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableControllerServer).GetCredentialByName(ctx, req.(*GetCredentialByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableController_GetCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableControllerServer).GetCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vc.services.VerifiableController/getCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableControllerServer).GetCredentials(ctx, req.(*GetCredentialsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableController_SignCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableControllerServer).SignCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vc.services.VerifiableController/signCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableControllerServer).SignCredential(ctx, req.(*SignCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableController_DeriveCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeriveCredentialReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableControllerServer).DeriveCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vc.services.VerifiableController/deriveCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableControllerServer).DeriveCredential(ctx, req.(*DeriveCredentialReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableController_GetPresentations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableControllerServer).GetPresentations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vc.services.VerifiableController/getPresentations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableControllerServer).GetPresentations(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableController_GeneratePresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneratePresentationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableControllerServer).GeneratePresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vc.services.VerifiableController/generatePresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableControllerServer).GeneratePresentation(ctx, req.(*GeneratePresentationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableController_GeneratePresentationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneratePresentationByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableControllerServer).GeneratePresentationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vc.services.VerifiableController/generatePresentationByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableControllerServer).GeneratePresentationByID(ctx, req.(*GeneratePresentationByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableController_RemoveCredentialByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCredentialByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableControllerServer).RemoveCredentialByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vc.services.VerifiableController/removeCredentialByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableControllerServer).RemoveCredentialByName(ctx, req.(*RemoveCredentialByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VerifiableController_RemovePresentationByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePresentationByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifiableControllerServer).RemovePresentationByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vc.services.VerifiableController/removePresentationByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifiableControllerServer).RemovePresentationByName(ctx, req.(*RemovePresentationByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

// VerifiableController_ServiceDesc is the grpc.ServiceDesc for VerifiableController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VerifiableController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.vc.services.VerifiableController",
	HandlerType: (*VerifiableControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "validateCredential",
			Handler:    _VerifiableController_ValidateCredential_Handler,
		},
		{
			MethodName: "saveCredential",
			Handler:    _VerifiableController_SaveCredential_Handler,
		},
		{
			MethodName: "savePresentation",
			Handler:    _VerifiableController_SavePresentation_Handler,
		},
		{
			MethodName: "getCredential",
			Handler:    _VerifiableController_GetCredential_Handler,
		},
		{
			MethodName: "getPresentation",
			Handler:    _VerifiableController_GetPresentation_Handler,
		},
		{
			MethodName: "getCredentialByName",
			Handler:    _VerifiableController_GetCredentialByName_Handler,
		},
		{
			MethodName: "getCredentials",
			Handler:    _VerifiableController_GetCredentials_Handler,
		},
		{
			MethodName: "signCredential",
			Handler:    _VerifiableController_SignCredential_Handler,
		},
		{
			MethodName: "deriveCredential",
			Handler:    _VerifiableController_DeriveCredential_Handler,
		},
		{
			MethodName: "getPresentations",
			Handler:    _VerifiableController_GetPresentations_Handler,
		},
		{
			MethodName: "generatePresentation",
			Handler:    _VerifiableController_GeneratePresentation_Handler,
		},
		{
			MethodName: "generatePresentationByID",
			Handler:    _VerifiableController_GeneratePresentationByID_Handler,
		},
		{
			MethodName: "removeCredentialByName",
			Handler:    _VerifiableController_RemoveCredentialByName_Handler,
		},
		{
			MethodName: "removePresentationByName",
			Handler:    _VerifiableController_RemovePresentationByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/vc/services/verifiable.proto",
}
