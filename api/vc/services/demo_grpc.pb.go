// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/vc/services/demo.proto

package services

import (
	context "context"
	types "github.com/bhatti/GSSI/api/vc/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DegreeServiceClient is the client API for DegreeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DegreeServiceClient interface {
	// GET /exchanges/degrees
	// 200	Degrees retrieved
	// 400	Bad Request
	// 401	Not Authorized
	// 410	Gone! There is no data here
	// 500	Internal Error
	// 501	Not Implemented
	GetAll(ctx context.Context, in *GetAllDegreesRequest, opts ...grpc.CallOption) (DegreeService_GetAllClient, error)
	// GET /exchanges/degrees/{id}
	// 200	Degree retrieved
	// 400	Bad Request
	// 401	Not Authorized
	// 410	Gone! There is no data here
	// 418	I'm a teapot - MUST not be returned outside of pre-arranged scenarios between both parties
	// 500	Internal Error
	// 501	Not Implemented
	Get(ctx context.Context, in *GetDegreeRequest, opts ...grpc.CallOption) (*types.RefreshableVerifiableCredential, error)
	// DELETE /exchanges/degrees/{id}
	Delete(ctx context.Context, in *DeleteDegreeRequest, opts ...grpc.CallOption) (*types.Bool, error)
	// POST /exchanges/degrees
	// 201	Degree successfully issued!
	// 400	invalid input!
	// 500	error!
	Create(ctx context.Context, in *CreateDegreeRequest, opts ...grpc.CallOption) (*types.RefreshableVerifiableCredential, error)
}

type degreeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDegreeServiceClient(cc grpc.ClientConnInterface) DegreeServiceClient {
	return &degreeServiceClient{cc}
}

func (c *degreeServiceClient) GetAll(ctx context.Context, in *GetAllDegreesRequest, opts ...grpc.CallOption) (DegreeService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &DegreeService_ServiceDesc.Streams[0], "/api.vc.services.DegreeService/getAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &degreeServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DegreeService_GetAllClient interface {
	Recv() (*types.RefreshableVerifiableCredential, error)
	grpc.ClientStream
}

type degreeServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *degreeServiceGetAllClient) Recv() (*types.RefreshableVerifiableCredential, error) {
	m := new(types.RefreshableVerifiableCredential)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *degreeServiceClient) Get(ctx context.Context, in *GetDegreeRequest, opts ...grpc.CallOption) (*types.RefreshableVerifiableCredential, error) {
	out := new(types.RefreshableVerifiableCredential)
	err := c.cc.Invoke(ctx, "/api.vc.services.DegreeService/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *degreeServiceClient) Delete(ctx context.Context, in *DeleteDegreeRequest, opts ...grpc.CallOption) (*types.Bool, error) {
	out := new(types.Bool)
	err := c.cc.Invoke(ctx, "/api.vc.services.DegreeService/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *degreeServiceClient) Create(ctx context.Context, in *CreateDegreeRequest, opts ...grpc.CallOption) (*types.RefreshableVerifiableCredential, error) {
	out := new(types.RefreshableVerifiableCredential)
	err := c.cc.Invoke(ctx, "/api.vc.services.DegreeService/create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DegreeServiceServer is the server API for DegreeService service.
// All implementations must embed UnimplementedDegreeServiceServer
// for forward compatibility
type DegreeServiceServer interface {
	// GET /exchanges/degrees
	// 200	Degrees retrieved
	// 400	Bad Request
	// 401	Not Authorized
	// 410	Gone! There is no data here
	// 500	Internal Error
	// 501	Not Implemented
	GetAll(*GetAllDegreesRequest, DegreeService_GetAllServer) error
	// GET /exchanges/degrees/{id}
	// 200	Degree retrieved
	// 400	Bad Request
	// 401	Not Authorized
	// 410	Gone! There is no data here
	// 418	I'm a teapot - MUST not be returned outside of pre-arranged scenarios between both parties
	// 500	Internal Error
	// 501	Not Implemented
	Get(context.Context, *GetDegreeRequest) (*types.RefreshableVerifiableCredential, error)
	// DELETE /exchanges/degrees/{id}
	Delete(context.Context, *DeleteDegreeRequest) (*types.Bool, error)
	// POST /exchanges/degrees
	// 201	Degree successfully issued!
	// 400	invalid input!
	// 500	error!
	Create(context.Context, *CreateDegreeRequest) (*types.RefreshableVerifiableCredential, error)
	mustEmbedUnimplementedDegreeServiceServer()
}

// UnimplementedDegreeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDegreeServiceServer struct {
}

func (UnimplementedDegreeServiceServer) GetAll(*GetAllDegreesRequest, DegreeService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedDegreeServiceServer) Get(context.Context, *GetDegreeRequest) (*types.RefreshableVerifiableCredential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDegreeServiceServer) Delete(context.Context, *DeleteDegreeRequest) (*types.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDegreeServiceServer) Create(context.Context, *CreateDegreeRequest) (*types.RefreshableVerifiableCredential, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDegreeServiceServer) mustEmbedUnimplementedDegreeServiceServer() {}

// UnsafeDegreeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DegreeServiceServer will
// result in compilation errors.
type UnsafeDegreeServiceServer interface {
	mustEmbedUnimplementedDegreeServiceServer()
}

func RegisterDegreeServiceServer(s grpc.ServiceRegistrar, srv DegreeServiceServer) {
	s.RegisterService(&DegreeService_ServiceDesc, srv)
}

func _DegreeService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllDegreesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DegreeServiceServer).GetAll(m, &degreeServiceGetAllServer{stream})
}

type DegreeService_GetAllServer interface {
	Send(*types.RefreshableVerifiableCredential) error
	grpc.ServerStream
}

type degreeServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *degreeServiceGetAllServer) Send(m *types.RefreshableVerifiableCredential) error {
	return x.ServerStream.SendMsg(m)
}

func _DegreeService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDegreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DegreeServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vc.services.DegreeService/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DegreeServiceServer).Get(ctx, req.(*GetDegreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DegreeService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDegreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DegreeServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vc.services.DegreeService/delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DegreeServiceServer).Delete(ctx, req.(*DeleteDegreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DegreeService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDegreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DegreeServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vc.services.DegreeService/create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DegreeServiceServer).Create(ctx, req.(*CreateDegreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DegreeService_ServiceDesc is the grpc.ServiceDesc for DegreeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DegreeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.vc.services.DegreeService",
	HandlerType: (*DegreeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get",
			Handler:    _DegreeService_Get_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _DegreeService_Delete_Handler,
		},
		{
			MethodName: "create",
			Handler:    _DegreeService_Create_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getAll",
			Handler:       _DegreeService_GetAll_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/vc/services/demo.proto",
}
