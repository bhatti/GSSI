// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/vc/services/verify.proto

package services

import (
	context "context"
	types "github.com/bhatti/GSSI/api/vc/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CredentialsVerifyServiceClient is the client API for CredentialsVerifyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CredentialsVerifyServiceClient interface {
	// Verifies a verifiableCredential and returns a verificationResult in the response body.
	// POST /credentials/verify
	// 200	Verifiable Credential successfully verified!
	// 400	invalid input!
	// 500	error!
	VerifyCredential(ctx context.Context, in *VerifyCredentialRequest, opts ...grpc.CallOption) (CredentialsVerifyService_VerifyCredentialClient, error)
	// Verifies a Presentation with or without proofs attached and returns a verificationResult in the response body.
	// POST /presentations/verify -
	// 200	Verifiable Presentation successfully verified!
	// 400	Invalid or malformed input
	// 413	Payload too large
	// 429	Request rate limit exceeded.
	// 500	Internal Server Error
	VerifyPresentation(ctx context.Context, in *VerifyPresentationRequest, opts ...grpc.CallOption) (CredentialsVerifyService_VerifyPresentationClient, error)
}

type credentialsVerifyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCredentialsVerifyServiceClient(cc grpc.ClientConnInterface) CredentialsVerifyServiceClient {
	return &credentialsVerifyServiceClient{cc}
}

func (c *credentialsVerifyServiceClient) VerifyCredential(ctx context.Context, in *VerifyCredentialRequest, opts ...grpc.CallOption) (CredentialsVerifyService_VerifyCredentialClient, error) {
	stream, err := c.cc.NewStream(ctx, &CredentialsVerifyService_ServiceDesc.Streams[0], "/api.vc.services.CredentialsVerifyService/verifyCredential", opts...)
	if err != nil {
		return nil, err
	}
	x := &credentialsVerifyServiceVerifyCredentialClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CredentialsVerifyService_VerifyCredentialClient interface {
	Recv() (*types.RefreshableVerifiableCredential, error)
	grpc.ClientStream
}

type credentialsVerifyServiceVerifyCredentialClient struct {
	grpc.ClientStream
}

func (x *credentialsVerifyServiceVerifyCredentialClient) Recv() (*types.RefreshableVerifiableCredential, error) {
	m := new(types.RefreshableVerifiableCredential)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *credentialsVerifyServiceClient) VerifyPresentation(ctx context.Context, in *VerifyPresentationRequest, opts ...grpc.CallOption) (CredentialsVerifyService_VerifyPresentationClient, error) {
	stream, err := c.cc.NewStream(ctx, &CredentialsVerifyService_ServiceDesc.Streams[1], "/api.vc.services.CredentialsVerifyService/verifyPresentation", opts...)
	if err != nil {
		return nil, err
	}
	x := &credentialsVerifyServiceVerifyPresentationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CredentialsVerifyService_VerifyPresentationClient interface {
	Recv() (*types.RefreshableVerifiableCredential, error)
	grpc.ClientStream
}

type credentialsVerifyServiceVerifyPresentationClient struct {
	grpc.ClientStream
}

func (x *credentialsVerifyServiceVerifyPresentationClient) Recv() (*types.RefreshableVerifiableCredential, error) {
	m := new(types.RefreshableVerifiableCredential)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CredentialsVerifyServiceServer is the server API for CredentialsVerifyService service.
// All implementations must embed UnimplementedCredentialsVerifyServiceServer
// for forward compatibility
type CredentialsVerifyServiceServer interface {
	// Verifies a verifiableCredential and returns a verificationResult in the response body.
	// POST /credentials/verify
	// 200	Verifiable Credential successfully verified!
	// 400	invalid input!
	// 500	error!
	VerifyCredential(*VerifyCredentialRequest, CredentialsVerifyService_VerifyCredentialServer) error
	// Verifies a Presentation with or without proofs attached and returns a verificationResult in the response body.
	// POST /presentations/verify -
	// 200	Verifiable Presentation successfully verified!
	// 400	Invalid or malformed input
	// 413	Payload too large
	// 429	Request rate limit exceeded.
	// 500	Internal Server Error
	VerifyPresentation(*VerifyPresentationRequest, CredentialsVerifyService_VerifyPresentationServer) error
	mustEmbedUnimplementedCredentialsVerifyServiceServer()
}

// UnimplementedCredentialsVerifyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCredentialsVerifyServiceServer struct {
}

func (UnimplementedCredentialsVerifyServiceServer) VerifyCredential(*VerifyCredentialRequest, CredentialsVerifyService_VerifyCredentialServer) error {
	return status.Errorf(codes.Unimplemented, "method VerifyCredential not implemented")
}
func (UnimplementedCredentialsVerifyServiceServer) VerifyPresentation(*VerifyPresentationRequest, CredentialsVerifyService_VerifyPresentationServer) error {
	return status.Errorf(codes.Unimplemented, "method VerifyPresentation not implemented")
}
func (UnimplementedCredentialsVerifyServiceServer) mustEmbedUnimplementedCredentialsVerifyServiceServer() {
}

// UnsafeCredentialsVerifyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CredentialsVerifyServiceServer will
// result in compilation errors.
type UnsafeCredentialsVerifyServiceServer interface {
	mustEmbedUnimplementedCredentialsVerifyServiceServer()
}

func RegisterCredentialsVerifyServiceServer(s grpc.ServiceRegistrar, srv CredentialsVerifyServiceServer) {
	s.RegisterService(&CredentialsVerifyService_ServiceDesc, srv)
}

func _CredentialsVerifyService_VerifyCredential_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VerifyCredentialRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CredentialsVerifyServiceServer).VerifyCredential(m, &credentialsVerifyServiceVerifyCredentialServer{stream})
}

type CredentialsVerifyService_VerifyCredentialServer interface {
	Send(*types.RefreshableVerifiableCredential) error
	grpc.ServerStream
}

type credentialsVerifyServiceVerifyCredentialServer struct {
	grpc.ServerStream
}

func (x *credentialsVerifyServiceVerifyCredentialServer) Send(m *types.RefreshableVerifiableCredential) error {
	return x.ServerStream.SendMsg(m)
}

func _CredentialsVerifyService_VerifyPresentation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VerifyPresentationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CredentialsVerifyServiceServer).VerifyPresentation(m, &credentialsVerifyServiceVerifyPresentationServer{stream})
}

type CredentialsVerifyService_VerifyPresentationServer interface {
	Send(*types.RefreshableVerifiableCredential) error
	grpc.ServerStream
}

type credentialsVerifyServiceVerifyPresentationServer struct {
	grpc.ServerStream
}

func (x *credentialsVerifyServiceVerifyPresentationServer) Send(m *types.RefreshableVerifiableCredential) error {
	return x.ServerStream.SendMsg(m)
}

// CredentialsVerifyService_ServiceDesc is the grpc.ServiceDesc for CredentialsVerifyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CredentialsVerifyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.vc.services.CredentialsVerifyService",
	HandlerType: (*CredentialsVerifyServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "verifyCredential",
			Handler:       _CredentialsVerifyService_VerifyCredential_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "verifyPresentation",
			Handler:       _CredentialsVerifyService_VerifyPresentation_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/vc/services/verify.proto",
}
