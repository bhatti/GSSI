syntax = "proto3";

package api.vc.services;

option go_package = "github.com/bhatti/GSSI/api/vc/services";

import "api/vc/types/common.proto";
import "api/vc/types/credential.proto";

// GetAllCredentialRequest for verifiable credentials
// Gets list of credentials or verifiable credentials
message GetAllCredentialRequest {
  int32 page = 1;
  int32 limit = 2;
  string query = 3;
}

// GetCredentialRequest for verifiable credentials
// Gets a credential or verifiable credential by ID
message GetCredentialRequest {
  string id = 1;
}

// DeleteCredentialRequest for verifiable credentials
// Deletes a credential or verifiable credential by ID
message DeleteCredentialRequest {
  string id = 1;
}

// IssueCredentialRequest for verifiable credentials
// POST /credentials/issue - Issues a credential and returns it in the response body.
message IssueCredentialRequest {
  // Verifies a verifiableCredential
  types.VerifiableCredential credential = 1;
  // options
  types.CredentialOptions options = 2;
}

// UpdateCredentialRequest for Updates the status of an issued credential
// POST /credentials/status
message UpdateCredentialRequest {
  // credentialId ID
  string credentialId = 1;
  // credentialStatus
  repeated types.CredentialStatus credentialStatus = 2;
}

// CredentialsIssueService --
service CredentialsIssueService {
  // Gets list of credentials or verifiable credentials
  // GET /credentials
  // 200	Credentials retrieved
  // 400	Bad Request
  // 401	Not Authorized
  // 410	Gone! There is no data here
  // 500	Internal Error
  // 501	Not Implemented
  rpc getAll(GetAllCredentialRequest) returns (stream types.RefreshableVerifiableCredential) {}
  // Gets list of credentials or verifiable credentials
  // GET /credentials/{id}
  // 200	Credential retrieved
  // 400	Bad Request
  // 401	Not Authorized
  // 410	Gone! There is no data here
  // 418	I'm a teapot - MUST not be returned outside of pre-arranged scenarios between both parties
  // 500	Internal Error
  // 501	Not Implemented
  rpc get(GetCredentialRequest) returns (types.RefreshableVerifiableCredential) {}
  // Deletes a credential or verifiable credential by ID
  // DELETE /credentials/{id}
  rpc delete(DeleteCredentialRequest) returns (types.Bool) {}
  // Issues a credential and returns it in the response body.
  // POST /credentials/issue
  // 201	Credential successfully issued!
  // 400	invalid input!
  // 500	error!
  rpc issue(IssueCredentialRequest) returns (types.RefreshableVerifiableCredential) {}
  // Updates the status of an issued credential
  // POST /credentials/status
  // 200	Credential status successfully updated
  // 400	Bad Request
  // 404	Credential not found
  // 500	Internal Server Error
  rpc update(UpdateCredentialRequest) returns (types.RefreshableVerifiableCredential) {}
}

