syntax = "proto3";

package api.vc.types;

option go_package = "github.com/bhatti/GSSI/api/vc/types";

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

import "api/vc/types/common.proto";


// SignatureRepresentation is a signature value holder type (e.g. "proofValue" or "jws").
enum SignatureRepresentation {
  proofValue = 0;
  jws = 1;
}

message CredentialStatus {
  // The type of credential status to issue the credential with
  string type = 1;
  // The status of credential
  string status = 2;
  // statusReason
  // {
  //   "value": "Address is out of date.",
  //   "lang": "en"
  // },
  LangValue statusReason = 3;
}

message DeriveCredentialOptions {
  // An encoded nonce provided by the holder of the credential to be included into the LinkedDataProof.
  string nonce = 1;
}

message CredentialSchema {
  // id of schema
  // e.g. https://example.org/examples/degree.json
  string id = 1;
  // type of schema
  // e.g. JsonSchemaValidator2018 or ZkpExampleSchema2018
  string type = 2;
}

// ProofOptions model
//
// Options for adding linked data proofs to a verifiable credential or a verifiable presentation.
// To be used as options for issue/prove wallet features.
//
message ProofOptions {
  string kid = 1;
  // Controller is a DID to be for signing. This option is required for issue/prove wallet features.
  string controller = 2;
  // VerificationMethod is the URI of the verificationMethod used for the proof.
  // Optional, by default Controller public key matching 'assertion' for issue or 'authentication' for prove functions.
  string verificationMethod = 3;
  // Domain is operational domain of a digital proof.
  // Optional, by default domain will not be part of proof.
  string domain = 4;
  // Challenge is a random or pseudo-random value option authentication.
  // Optional, by default challenge will not be part of proof.
  string challenge = 5;
  // ProofType is signature type used for signing.
  // Optional, by default proof will be generated in Ed25519Signature2018 format.
  string proofType = 6;
  // proofPurpose is purpose of the proof.
  string proofPurpose = 7;
  // ProofRepresentation is type of proof data expected, (Refer verifiable.SignatureProofValue)
  // Optional, by default proof will be represented as 'verifiable.SignatureProofValue'.
  SignatureRepresentation proofRepresentation = 8;
  // SignatureType signature type used for signing
  string signatureType = 9;
  // Created date of the proof.
  // Optional, current system time will be used.
  google.protobuf.Timestamp created = 10;
}


// CredentialProof for verifiable credentials
message CredentialProof {
  // Linked Data Signature Suite used to produce proof.
  // e.g. RsaSignature2018 or CLSignature2019
  string type = 1;
  // A value chosen by the verifier to mitigate authentication proof replay attacks.
  string challenge = 2;
  // The domain of the proof to restrict its use to a particular target.
  string domain = 3;
  // A value chosen by the creator of a proof to randomize proof values for privacy purposes.
  string nonce = 4;
  // Verification Method used to verify proof.
  // e.g. https://example.edu/issuers/14#key-1 or https://example.edu/issuers/565049#key-1
  string verificationMethod = 5;
  // The purpose of the proof to be used with verificationMethod
  // e.g. assertionMethod
  string proofPurpose = 6;
  // Detached JSON Web Signature
  string jws = 7;
  // Value of the Linked Data proof.
  // e.g. z2aArNcQKX9aqYK7GRZmV7c9xfGuwB5YAXhkYY9DTvLdTCQEsXaNpz1G
  string proofValue = 8;

  // e.g.     "attributes": "pPYmqDvwwWBDPNykXVrBtKdsJDeZUGFA...tTERiLqsZ5oxCoCSodPQaggkDJy",
  string attributes = 9;

  string signature = 10;

  string signatureCorrectnessProof = 11;

  string primaryProof = 12;

  string nonRevocationProof = 13;

  // The issuerData string
  google.protobuf.Timestamp issuerData = 14;

  string creator = 15;
  // The created string
  google.protobuf.Timestamp created = 16;

  // CapabilityChain must be an array. Each element is either a string or an object.
  repeated string capabilityChain = 17; // oneof Any or string

  SignatureRepresentation signatureRepresentation = 18;
}


// CredentialOptions options
message CredentialOptions {
  // The intended domain of validity for the proof. For example website.example
  string domain = 1;
  // A challenge provided by the requesting party of the proof. For example 6e62f66e-67de-11eb-b490-ef3eeefa55f2
  string challenge = 2;
  types.VerifiableCredential credentials = 3; // without proof
  // The method of credential status to issue the credential including. If omitted credential status will be included.
  CredentialStatus credentialStatus = 4;
  // The created string
  google.protobuf.Timestamp created = 5;
}


// A verifiable credential is a set of one or more claims made by the same entity. Credentials
// might also include an identifier and metadata to describe properties of the credential,
// such as the issuer, the expiry date and time, a representative image, a public key to use for
// verification purposes, the revocation mechanism, and so on. The metadata might be signed by the issuer.
// A verifiable credential is a set of tamper-evident claims and metadata that cryptographically prove who issued it.
// Verifiable credentials = Credential Metadata + Claims + Proofs
// Examples of verifiable credentials include digital employee
// identification cards, digital birth certificates, and digital educational certificates.
message VerifiableCredential {
  // The ID of the credential.
  string id = 1;
  // The JSON-LD context of the credential. Each item in the @context array MUST be a string.
  //  "@context": [
  //    "https://www.w3.org/2018/credentials/v1",
  //    "https://www.w3.org/2018/credentials/examples/v1"
  //  ]
  repeated string context = 2;
  // The JSON-LD type of the credential. Each item in the type array MUST be a string.
  // e.g. ["VerifiableCredential", "AlumniCredential"]
  repeated string type = 3;
  // A JSON-LD Verifiable Credential Issuer. The issuer object MUST be either a string or an object of the following form:
  // e.g. https://example.edu/issuers/565049
  oneof issuer {
    string issuserId = 4;
    Issuer issuerObject = 5;
  }

  // The issuanceDate string
  google.protobuf.Timestamp issuanceDate = 6;
  // The expirationDate string
  google.protobuf.Timestamp expirationDate = 7;
  // The method of credential status to issue the credential including. If omitted credential status will be included.
  google.protobuf.Any credentialSubject = 8;

  CredentialSchema credentialSchema = 9;

  TermsOfUse termsOfUse = 10;

  //  Evidence can be included by an issuer to provide the verifier with additional supporting information in a
  //  verifiable credential. This could be used by the verifier to establish the confidence with which
  //  it relies on the claims in the verifiable credential.
  //   "evidence": [{
  //    "id": "https://example.edu/evidence/f2aeec97-fc0d-42bf-8ca7-0548192d4231",
  //    "type": ["DocumentVerification"],
  //    "verifier": "https://example.edu/issuers/14",
  //    "evidenceDocument": "DriversLicense",
  //    "subjectPresence": "Physical",
  //    "documentPresence": "Physical",
  //    "licenseNumber": "123AB4567"
  //  }],
  repeated google.protobuf.Any evidence = 11;

  // A JSON-LD Linked Data proof
  CredentialProof proof = 12;

  string name = 13; // non-standard
}

// VerifiableCredentialOptions options
message VerifiableCredentialOptions {
  // The intended domain of validity for the proof. For example website.example
  string domain = 1;
  // A challenge provided by the requesting party of the proof. For example 6e62f66e-67de-11eb-b490-ef3eeefa55f2
  string challenge = 2;
}

// RefreshableVerifiableCredential for verifiable credentials
message RefreshableVerifiableCredential {
  // The ID of the credential.
  string id = 1;
  // The JSON-LD context of the credential. Each item in the @context array MUST be a string.
  //  "@context": [
  //    "https://www.w3.org/2018/credentials/v1",
  //    "https://www.w3.org/2018/credentials/examples/v1"
  //  ]
  repeated string context = 2;
  // The JSON-LD type of the credential. Each item in the type array MUST be a string.
  repeated string type = 3;
  // A JSON-LD Verifiable Credential Issuer. The issuer object MUST be either a string or an object of the following form:
  oneof issuer {
    string issuserId = 4;
    Issuer issuerObject = 5;
  }

  // The issuanceDate string
  google.protobuf.Timestamp issuanceDate = 6;
  // The expirationDate string
  google.protobuf.Timestamp expirationDate = 7;
  // The method of credential status to issue the credential including. If omitted credential status will be included.
  google.protobuf.Any credentialSubject = 8;

  CredentialSchema credentialSchema = 9;

  TermsOfUse termsOfUse = 10;

  //  Evidence can be included by an issuer to provide the verifier with additional supporting information in a
  //  verifiable credential. This could be used by the verifier to establish the confidence with which
  //  it relies on the claims in the verifiable credential.
  repeated google.protobuf.Any evidence = 11;

  // A JSON-LD Linked Data proof
  CredentialProof proof = 12;
  string name = 13; // non-standard

  // RefreshService
  RefreshService refreshService = 14;
}

