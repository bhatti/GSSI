// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: api/vc/types/credential.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SignatureRepresentation is a signature value holder type (e.g. "proofValue" or "jws").
type SignatureRepresentation int32

const (
	SignatureRepresentation_proofValue SignatureRepresentation = 0
	SignatureRepresentation_jws        SignatureRepresentation = 1
)

// Enum value maps for SignatureRepresentation.
var (
	SignatureRepresentation_name = map[int32]string{
		0: "proofValue",
		1: "jws",
	}
	SignatureRepresentation_value = map[string]int32{
		"proofValue": 0,
		"jws":        1,
	}
)

func (x SignatureRepresentation) Enum() *SignatureRepresentation {
	p := new(SignatureRepresentation)
	*p = x
	return p
}

func (x SignatureRepresentation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignatureRepresentation) Descriptor() protoreflect.EnumDescriptor {
	return file_api_vc_types_credential_proto_enumTypes[0].Descriptor()
}

func (SignatureRepresentation) Type() protoreflect.EnumType {
	return &file_api_vc_types_credential_proto_enumTypes[0]
}

func (x SignatureRepresentation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignatureRepresentation.Descriptor instead.
func (SignatureRepresentation) EnumDescriptor() ([]byte, []int) {
	return file_api_vc_types_credential_proto_rawDescGZIP(), []int{0}
}

// swagger:model
type CredentialStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of credential status to issue the credential with
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The status of credential
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// statusReason
	// {
	//   "value": "Address is out of date.",
	//   "lang": "en"
	// },
	StatusReason *LangValue `protobuf:"bytes,3,opt,name=statusReason,proto3" json:"statusReason,omitempty"`
}

func (x *CredentialStatus) Reset() {
	*x = CredentialStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_vc_types_credential_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialStatus) ProtoMessage() {}

func (x *CredentialStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_vc_types_credential_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialStatus.ProtoReflect.Descriptor instead.
func (*CredentialStatus) Descriptor() ([]byte, []int) {
	return file_api_vc_types_credential_proto_rawDescGZIP(), []int{0}
}

func (x *CredentialStatus) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CredentialStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CredentialStatus) GetStatusReason() *LangValue {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

// swagger:model
type DeriveCredentialOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An encoded nonce provided by the holder of the credential to be included into the LinkedDataProof.
	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *DeriveCredentialOptions) Reset() {
	*x = DeriveCredentialOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_vc_types_credential_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeriveCredentialOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeriveCredentialOptions) ProtoMessage() {}

func (x *DeriveCredentialOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_vc_types_credential_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeriveCredentialOptions.ProtoReflect.Descriptor instead.
func (*DeriveCredentialOptions) Descriptor() ([]byte, []int) {
	return file_api_vc_types_credential_proto_rawDescGZIP(), []int{1}
}

func (x *DeriveCredentialOptions) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

// swagger:model
type CredentialSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of schema
	// e.g. https://example.org/examples/degree.json
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// type of schema
	// e.g. JsonSchemaValidator2018 or ZkpExampleSchema2018
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CredentialSchema) Reset() {
	*x = CredentialSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_vc_types_credential_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialSchema) ProtoMessage() {}

func (x *CredentialSchema) ProtoReflect() protoreflect.Message {
	mi := &file_api_vc_types_credential_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialSchema.ProtoReflect.Descriptor instead.
func (*CredentialSchema) Descriptor() ([]byte, []int) {
	return file_api_vc_types_credential_proto_rawDescGZIP(), []int{2}
}

func (x *CredentialSchema) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CredentialSchema) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// ProofOptions model
//
// Options for adding linked data proofs to a verifiable credential or a verifiable presentation.
// To be used as options for issue/prove wallet features.
//
// swagger:model
type ProofOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kid string `protobuf:"bytes,1,opt,name=kid,proto3" json:"kid,omitempty"`
	// Controller is a DID to be for signing. This option is required for issue/prove wallet features.
	Controller string `protobuf:"bytes,2,opt,name=controller,proto3" json:"controller,omitempty"`
	// VerificationMethod is the URI of the verificationMethod used for the proof.
	// Optional, by default Controller public key matching 'assertion' for issue or 'authentication' for prove functions.
	VerificationMethod string `protobuf:"bytes,3,opt,name=verificationMethod,proto3" json:"verificationMethod,omitempty"`
	// Domain is operational domain of a digital proof.
	// Optional, by default domain will not be part of proof.
	Domain string `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	// Challenge is a random or pseudo-random value option authentication.
	// Optional, by default challenge will not be part of proof.
	Challenge string `protobuf:"bytes,5,opt,name=challenge,proto3" json:"challenge,omitempty"`
	// ProofType is signature type used for signing.
	// Optional, by default proof will be generated in Ed25519Signature2018 format.
	ProofType string `protobuf:"bytes,6,opt,name=proofType,proto3" json:"proofType,omitempty"`
	// proofPurpose is purpose of the proof.
	ProofPurpose string `protobuf:"bytes,7,opt,name=proofPurpose,proto3" json:"proofPurpose,omitempty"`
	// ProofRepresentation is type of proof data expected, (Refer verifiable.SignatureProofValue)
	// Optional, by default proof will be represented as 'verifiable.SignatureProofValue'.
	ProofRepresentation SignatureRepresentation `protobuf:"varint,8,opt,name=proofRepresentation,proto3,enum=api.vc.types.SignatureRepresentation" json:"proofRepresentation,omitempty"`
	// SignatureType signature type used for signing
	SignatureType string `protobuf:"bytes,9,opt,name=signatureType,proto3" json:"signatureType,omitempty"`
	// Created date of the proof.
	// Optional, current system time will be used.
	Created *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *ProofOptions) Reset() {
	*x = ProofOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_vc_types_credential_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProofOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProofOptions) ProtoMessage() {}

func (x *ProofOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_vc_types_credential_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProofOptions.ProtoReflect.Descriptor instead.
func (*ProofOptions) Descriptor() ([]byte, []int) {
	return file_api_vc_types_credential_proto_rawDescGZIP(), []int{3}
}

func (x *ProofOptions) GetKid() string {
	if x != nil {
		return x.Kid
	}
	return ""
}

func (x *ProofOptions) GetController() string {
	if x != nil {
		return x.Controller
	}
	return ""
}

func (x *ProofOptions) GetVerificationMethod() string {
	if x != nil {
		return x.VerificationMethod
	}
	return ""
}

func (x *ProofOptions) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *ProofOptions) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *ProofOptions) GetProofType() string {
	if x != nil {
		return x.ProofType
	}
	return ""
}

func (x *ProofOptions) GetProofPurpose() string {
	if x != nil {
		return x.ProofPurpose
	}
	return ""
}

func (x *ProofOptions) GetProofRepresentation() SignatureRepresentation {
	if x != nil {
		return x.ProofRepresentation
	}
	return SignatureRepresentation_proofValue
}

func (x *ProofOptions) GetSignatureType() string {
	if x != nil {
		return x.SignatureType
	}
	return ""
}

func (x *ProofOptions) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

// CredentialProof for verifiable credentials
// swagger:model
type CredentialProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Linked Data Signature Suite used to produce proof.
	// e.g. RsaSignature2018 or CLSignature2019
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// A value chosen by the verifier to mitigate authentication proof replay attacks.
	Challenge string `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
	// The domain of the proof to restrict its use to a particular target.
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	// A value chosen by the creator of a proof to randomize proof values for privacy purposes.
	Nonce string `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Verification Method used to verify proof.
	// e.g. https://example.edu/issuers/14#key-1 or https://example.edu/issuers/565049#key-1
	VerificationMethod string `protobuf:"bytes,5,opt,name=verificationMethod,proto3" json:"verificationMethod,omitempty"`
	// The purpose of the proof to be used with verificationMethod
	// e.g. assertionMethod
	ProofPurpose string `protobuf:"bytes,6,opt,name=proofPurpose,proto3" json:"proofPurpose,omitempty"`
	// Detached JSON Web Signature
	Jws string `protobuf:"bytes,7,opt,name=jws,proto3" json:"jws,omitempty"`
	// Value of the Linked Data proof.
	// e.g. z2aArNcQKX9aqYK7GRZmV7c9xfGuwB5YAXhkYY9DTvLdTCQEsXaNpz1G
	ProofValue string `protobuf:"bytes,8,opt,name=proofValue,proto3" json:"proofValue,omitempty"`
	// e.g.     "attributes": "pPYmqDvwwWBDPNykXVrBtKdsJDeZUGFA...tTERiLqsZ5oxCoCSodPQaggkDJy",
	Attributes                string `protobuf:"bytes,9,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Signature                 string `protobuf:"bytes,10,opt,name=signature,proto3" json:"signature,omitempty"`
	SignatureCorrectnessProof string `protobuf:"bytes,11,opt,name=signatureCorrectnessProof,proto3" json:"signatureCorrectnessProof,omitempty"`
	PrimaryProof              string `protobuf:"bytes,12,opt,name=primaryProof,proto3" json:"primaryProof,omitempty"`
	NonRevocationProof        string `protobuf:"bytes,13,opt,name=nonRevocationProof,proto3" json:"nonRevocationProof,omitempty"`
	// The issuerData string
	IssuerData *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=issuerData,proto3" json:"issuerData,omitempty"`
	Creator    string                 `protobuf:"bytes,15,opt,name=creator,proto3" json:"creator,omitempty"`
	// The created string
	Created *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=created,proto3" json:"created,omitempty"`
	// CapabilityChain must be an array. Each element is either a string or an object.
	CapabilityChain         []string                `protobuf:"bytes,17,rep,name=capabilityChain,proto3" json:"capabilityChain,omitempty"` // oneof Any or string
	SignatureRepresentation SignatureRepresentation `protobuf:"varint,18,opt,name=signatureRepresentation,proto3,enum=api.vc.types.SignatureRepresentation" json:"signatureRepresentation,omitempty"`
}

func (x *CredentialProof) Reset() {
	*x = CredentialProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_vc_types_credential_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialProof) ProtoMessage() {}

func (x *CredentialProof) ProtoReflect() protoreflect.Message {
	mi := &file_api_vc_types_credential_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialProof.ProtoReflect.Descriptor instead.
func (*CredentialProof) Descriptor() ([]byte, []int) {
	return file_api_vc_types_credential_proto_rawDescGZIP(), []int{4}
}

func (x *CredentialProof) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CredentialProof) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *CredentialProof) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CredentialProof) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *CredentialProof) GetVerificationMethod() string {
	if x != nil {
		return x.VerificationMethod
	}
	return ""
}

func (x *CredentialProof) GetProofPurpose() string {
	if x != nil {
		return x.ProofPurpose
	}
	return ""
}

func (x *CredentialProof) GetJws() string {
	if x != nil {
		return x.Jws
	}
	return ""
}

func (x *CredentialProof) GetProofValue() string {
	if x != nil {
		return x.ProofValue
	}
	return ""
}

func (x *CredentialProof) GetAttributes() string {
	if x != nil {
		return x.Attributes
	}
	return ""
}

func (x *CredentialProof) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *CredentialProof) GetSignatureCorrectnessProof() string {
	if x != nil {
		return x.SignatureCorrectnessProof
	}
	return ""
}

func (x *CredentialProof) GetPrimaryProof() string {
	if x != nil {
		return x.PrimaryProof
	}
	return ""
}

func (x *CredentialProof) GetNonRevocationProof() string {
	if x != nil {
		return x.NonRevocationProof
	}
	return ""
}

func (x *CredentialProof) GetIssuerData() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuerData
	}
	return nil
}

func (x *CredentialProof) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *CredentialProof) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *CredentialProof) GetCapabilityChain() []string {
	if x != nil {
		return x.CapabilityChain
	}
	return nil
}

func (x *CredentialProof) GetSignatureRepresentation() SignatureRepresentation {
	if x != nil {
		return x.SignatureRepresentation
	}
	return SignatureRepresentation_proofValue
}

// CredentialOptions options
type CredentialOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The intended domain of validity for the proof. For example website.example
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// A challenge provided by the requesting party of the proof. For example 6e62f66e-67de-11eb-b490-ef3eeefa55f2
	Challenge   string                `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
	Credentials *VerifiableCredential `protobuf:"bytes,3,opt,name=credentials,proto3" json:"credentials,omitempty"` // without proof
	// The method of credential status to issue the credential including. If omitted credential status will be included.
	CredentialStatus *CredentialStatus `protobuf:"bytes,4,opt,name=credentialStatus,proto3" json:"credentialStatus,omitempty"`
	// The created string
	Created *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *CredentialOptions) Reset() {
	*x = CredentialOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_vc_types_credential_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialOptions) ProtoMessage() {}

func (x *CredentialOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_vc_types_credential_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialOptions.ProtoReflect.Descriptor instead.
func (*CredentialOptions) Descriptor() ([]byte, []int) {
	return file_api_vc_types_credential_proto_rawDescGZIP(), []int{5}
}

func (x *CredentialOptions) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CredentialOptions) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *CredentialOptions) GetCredentials() *VerifiableCredential {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *CredentialOptions) GetCredentialStatus() *CredentialStatus {
	if x != nil {
		return x.CredentialStatus
	}
	return nil
}

func (x *CredentialOptions) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

// JWTCredClaims is JWT Claims extension by Verifiable Credential (with custom "vc" claim).
// swagger:model
type JWTCredClaims struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iss string                `protobuf:"bytes,1,opt,name=iss,proto3" json:"iss,omitempty"`                                                                                       // issuer
	Sub string                `protobuf:"bytes,2,opt,name=sub,proto3" json:"sub,omitempty"`                                                                                       // subject
	Aud []string              `protobuf:"bytes,3,rep,name=aud,proto3" json:"aud,omitempty"`                                                                                       // audience
	Exp int64                 `protobuf:"varint,4,opt,name=exp,proto3" json:"exp,omitempty"`                                                                                      // expiry
	Nbf int64                 `protobuf:"varint,5,opt,name=nbf,proto3" json:"nbf,omitempty"`                                                                                      // NotBefore
	Iat int64                 `protobuf:"varint,6,opt,name=iat,proto3" json:"iat,omitempty"`                                                                                      // IssuedAt
	Jti string                `protobuf:"bytes,7,opt,name=jti,proto3" json:"jti,omitempty"`                                                                                       // id
	Vc  map[string]*anypb.Any `protobuf:"bytes,8,rep,name=vc,proto3" json:"vc,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // VerifiableCredential
}

func (x *JWTCredClaims) Reset() {
	*x = JWTCredClaims{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_vc_types_credential_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTCredClaims) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTCredClaims) ProtoMessage() {}

func (x *JWTCredClaims) ProtoReflect() protoreflect.Message {
	mi := &file_api_vc_types_credential_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTCredClaims.ProtoReflect.Descriptor instead.
func (*JWTCredClaims) Descriptor() ([]byte, []int) {
	return file_api_vc_types_credential_proto_rawDescGZIP(), []int{6}
}

func (x *JWTCredClaims) GetIss() string {
	if x != nil {
		return x.Iss
	}
	return ""
}

func (x *JWTCredClaims) GetSub() string {
	if x != nil {
		return x.Sub
	}
	return ""
}

func (x *JWTCredClaims) GetAud() []string {
	if x != nil {
		return x.Aud
	}
	return nil
}

func (x *JWTCredClaims) GetExp() int64 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *JWTCredClaims) GetNbf() int64 {
	if x != nil {
		return x.Nbf
	}
	return 0
}

func (x *JWTCredClaims) GetIat() int64 {
	if x != nil {
		return x.Iat
	}
	return 0
}

func (x *JWTCredClaims) GetJti() string {
	if x != nil {
		return x.Jti
	}
	return ""
}

func (x *JWTCredClaims) GetVc() map[string]*anypb.Any {
	if x != nil {
		return x.Vc
	}
	return nil
}

// A verifiable credential is a set of one or more claims made by the same entity. Credentials
// might also include an identifier and metadata to describe properties of the credential,
// such as the issuer, the expiry date and time, a representative image, a public key to use for
// verification purposes, the revocation mechanism, and so on. The metadata might be signed by the issuer.
// A verifiable credential is a set of tamper-evident claims and metadata that cryptographically prove who issued it.
// Verifiable credentials = Credential Metadata + Claims + Proofs
// Examples of verifiable credentials include digital employee
// identification cards, digital birth certificates, and digital educational certificates.
// swagger:model
type VerifiableCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the credential.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The JSON-LD context of the credential. Each item in the @context array MUST be a string.
	//  "@context": [
	//    "https://www.w3.org/2018/credentials/v1",
	//    "https://www.w3.org/2018/credentials/examples/v1"
	//  ]
	Context []string `protobuf:"bytes,2,rep,name=context,proto3" json:"context,omitempty"`
	// The JSON-LD type of the credential. Each item in the type array MUST be a string.
	// e.g. ["VerifiableCredential", "AlumniCredential"]
	Type []string `protobuf:"bytes,3,rep,name=type,proto3" json:"type,omitempty"`
	// A JSON-LD Verifiable Credential Issuer. The issuer object MUST be either a string or an object of the following form:
	// e.g. https://example.edu/issuers/565049
	//
	// Types that are assignable to Issuer:
	//	*VerifiableCredential_IssuserId
	//	*VerifiableCredential_IssuerObject
	Issuer isVerifiableCredential_Issuer `protobuf_oneof:"issuer"`
	// The issuanceDate string
	IssuanceDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=issuanceDate,proto3" json:"issuanceDate,omitempty"`
	// The expirationDate string
	ExpirationDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
	// The method of credential status to issue the credential including. If omitted credential status will be included.
	CredentialSubject *anypb.Any        `protobuf:"bytes,8,opt,name=credentialSubject,proto3" json:"credentialSubject,omitempty"`
	CredentialSchema  *CredentialSchema `protobuf:"bytes,9,opt,name=credentialSchema,proto3" json:"credentialSchema,omitempty"`
	TermsOfUse        *TermsOfUse       `protobuf:"bytes,10,opt,name=termsOfUse,proto3" json:"termsOfUse,omitempty"`
	//  Evidence can be included by an issuer to provide the verifier with additional supporting information in a
	//  verifiable credential. This could be used by the verifier to establish the confidence with which
	//  it relies on the claims in the verifiable credential.
	//   "evidence": [{
	//    "id": "https://example.edu/evidence/f2aeec97-fc0d-42bf-8ca7-0548192d4231",
	//    "type": ["DocumentVerification"],
	//    "verifier": "https://example.edu/issuers/14",
	//    "evidenceDocument": "DriversLicense",
	//    "subjectPresence": "Physical",
	//    "documentPresence": "Physical",
	//    "licenseNumber": "123AB4567"
	//  }],
	Evidence []*anypb.Any `protobuf:"bytes,11,rep,name=evidence,proto3" json:"evidence,omitempty"`
	// A JSON-LD Linked Data proof
	Proof *CredentialProof `protobuf:"bytes,12,opt,name=proof,proto3" json:"proof,omitempty"`
	Name  string           `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"` // non-standard
}

func (x *VerifiableCredential) Reset() {
	*x = VerifiableCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_vc_types_credential_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiableCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiableCredential) ProtoMessage() {}

func (x *VerifiableCredential) ProtoReflect() protoreflect.Message {
	mi := &file_api_vc_types_credential_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiableCredential.ProtoReflect.Descriptor instead.
func (*VerifiableCredential) Descriptor() ([]byte, []int) {
	return file_api_vc_types_credential_proto_rawDescGZIP(), []int{7}
}

func (x *VerifiableCredential) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VerifiableCredential) GetContext() []string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *VerifiableCredential) GetType() []string {
	if x != nil {
		return x.Type
	}
	return nil
}

func (m *VerifiableCredential) GetIssuer() isVerifiableCredential_Issuer {
	if m != nil {
		return m.Issuer
	}
	return nil
}

func (x *VerifiableCredential) GetIssuserId() string {
	if x, ok := x.GetIssuer().(*VerifiableCredential_IssuserId); ok {
		return x.IssuserId
	}
	return ""
}

func (x *VerifiableCredential) GetIssuerObject() *Issuer {
	if x, ok := x.GetIssuer().(*VerifiableCredential_IssuerObject); ok {
		return x.IssuerObject
	}
	return nil
}

func (x *VerifiableCredential) GetIssuanceDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuanceDate
	}
	return nil
}

func (x *VerifiableCredential) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *VerifiableCredential) GetCredentialSubject() *anypb.Any {
	if x != nil {
		return x.CredentialSubject
	}
	return nil
}

func (x *VerifiableCredential) GetCredentialSchema() *CredentialSchema {
	if x != nil {
		return x.CredentialSchema
	}
	return nil
}

func (x *VerifiableCredential) GetTermsOfUse() *TermsOfUse {
	if x != nil {
		return x.TermsOfUse
	}
	return nil
}

func (x *VerifiableCredential) GetEvidence() []*anypb.Any {
	if x != nil {
		return x.Evidence
	}
	return nil
}

func (x *VerifiableCredential) GetProof() *CredentialProof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *VerifiableCredential) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type isVerifiableCredential_Issuer interface {
	isVerifiableCredential_Issuer()
}

type VerifiableCredential_IssuserId struct {
	IssuserId string `protobuf:"bytes,4,opt,name=issuserId,proto3,oneof"`
}

type VerifiableCredential_IssuerObject struct {
	IssuerObject *Issuer `protobuf:"bytes,5,opt,name=issuerObject,proto3,oneof"`
}

func (*VerifiableCredential_IssuserId) isVerifiableCredential_Issuer() {}

func (*VerifiableCredential_IssuerObject) isVerifiableCredential_Issuer() {}

// VerifiableCredentialOptions options
type VerifiableCredentialOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The intended domain of validity for the proof. For example website.example
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// A challenge provided by the requesting party of the proof. For example 6e62f66e-67de-11eb-b490-ef3eeefa55f2
	Challenge string `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *VerifiableCredentialOptions) Reset() {
	*x = VerifiableCredentialOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_vc_types_credential_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiableCredentialOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiableCredentialOptions) ProtoMessage() {}

func (x *VerifiableCredentialOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_vc_types_credential_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiableCredentialOptions.ProtoReflect.Descriptor instead.
func (*VerifiableCredentialOptions) Descriptor() ([]byte, []int) {
	return file_api_vc_types_credential_proto_rawDescGZIP(), []int{8}
}

func (x *VerifiableCredentialOptions) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *VerifiableCredentialOptions) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

// RefreshableVerifiableCredential for verifiable credentials
// swagger:model
type RefreshableVerifiableCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the credential.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The JSON-LD context of the credential. Each item in the @context array MUST be a string.
	//  "@context": [
	//    "https://www.w3.org/2018/credentials/v1",
	//    "https://www.w3.org/2018/credentials/examples/v1"
	//  ]
	Context []string `protobuf:"bytes,2,rep,name=context,proto3" json:"context,omitempty"`
	// The JSON-LD type of the credential. Each item in the type array MUST be a string.
	Type []string `protobuf:"bytes,3,rep,name=type,proto3" json:"type,omitempty"`
	// A JSON-LD Verifiable Credential Issuer. The issuer object MUST be either a string or an object of the following form:
	//
	// Types that are assignable to Issuer:
	//	*RefreshableVerifiableCredential_IssuserId
	//	*RefreshableVerifiableCredential_IssuerObject
	Issuer isRefreshableVerifiableCredential_Issuer `protobuf_oneof:"issuer"`
	// The issuanceDate string
	IssuanceDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=issuanceDate,proto3" json:"issuanceDate,omitempty"`
	// The expirationDate string
	ExpirationDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
	// The method of credential status to issue the credential including. If omitted credential status will be included.
	CredentialSubject *anypb.Any        `protobuf:"bytes,8,opt,name=credentialSubject,proto3" json:"credentialSubject,omitempty"`
	CredentialSchema  *CredentialSchema `protobuf:"bytes,9,opt,name=credentialSchema,proto3" json:"credentialSchema,omitempty"`
	TermsOfUse        *TermsOfUse       `protobuf:"bytes,10,opt,name=termsOfUse,proto3" json:"termsOfUse,omitempty"`
	//  Evidence can be included by an issuer to provide the verifier with additional supporting information in a
	//  verifiable credential. This could be used by the verifier to establish the confidence with which
	//  it relies on the claims in the verifiable credential.
	Evidence []*anypb.Any `protobuf:"bytes,11,rep,name=evidence,proto3" json:"evidence,omitempty"`
	// A JSON-LD Linked Data proof
	Proof *CredentialProof `protobuf:"bytes,12,opt,name=proof,proto3" json:"proof,omitempty"`
	Name  string           `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"` // non-standard
	// RefreshService
	RefreshService *RefreshService `protobuf:"bytes,14,opt,name=refreshService,proto3" json:"refreshService,omitempty"`
}

func (x *RefreshableVerifiableCredential) Reset() {
	*x = RefreshableVerifiableCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_vc_types_credential_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshableVerifiableCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshableVerifiableCredential) ProtoMessage() {}

func (x *RefreshableVerifiableCredential) ProtoReflect() protoreflect.Message {
	mi := &file_api_vc_types_credential_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshableVerifiableCredential.ProtoReflect.Descriptor instead.
func (*RefreshableVerifiableCredential) Descriptor() ([]byte, []int) {
	return file_api_vc_types_credential_proto_rawDescGZIP(), []int{9}
}

func (x *RefreshableVerifiableCredential) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RefreshableVerifiableCredential) GetContext() []string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RefreshableVerifiableCredential) GetType() []string {
	if x != nil {
		return x.Type
	}
	return nil
}

func (m *RefreshableVerifiableCredential) GetIssuer() isRefreshableVerifiableCredential_Issuer {
	if m != nil {
		return m.Issuer
	}
	return nil
}

func (x *RefreshableVerifiableCredential) GetIssuserId() string {
	if x, ok := x.GetIssuer().(*RefreshableVerifiableCredential_IssuserId); ok {
		return x.IssuserId
	}
	return ""
}

func (x *RefreshableVerifiableCredential) GetIssuerObject() *Issuer {
	if x, ok := x.GetIssuer().(*RefreshableVerifiableCredential_IssuerObject); ok {
		return x.IssuerObject
	}
	return nil
}

func (x *RefreshableVerifiableCredential) GetIssuanceDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuanceDate
	}
	return nil
}

func (x *RefreshableVerifiableCredential) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *RefreshableVerifiableCredential) GetCredentialSubject() *anypb.Any {
	if x != nil {
		return x.CredentialSubject
	}
	return nil
}

func (x *RefreshableVerifiableCredential) GetCredentialSchema() *CredentialSchema {
	if x != nil {
		return x.CredentialSchema
	}
	return nil
}

func (x *RefreshableVerifiableCredential) GetTermsOfUse() *TermsOfUse {
	if x != nil {
		return x.TermsOfUse
	}
	return nil
}

func (x *RefreshableVerifiableCredential) GetEvidence() []*anypb.Any {
	if x != nil {
		return x.Evidence
	}
	return nil
}

func (x *RefreshableVerifiableCredential) GetProof() *CredentialProof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *RefreshableVerifiableCredential) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RefreshableVerifiableCredential) GetRefreshService() *RefreshService {
	if x != nil {
		return x.RefreshService
	}
	return nil
}

type isRefreshableVerifiableCredential_Issuer interface {
	isRefreshableVerifiableCredential_Issuer()
}

type RefreshableVerifiableCredential_IssuserId struct {
	IssuserId string `protobuf:"bytes,4,opt,name=issuserId,proto3,oneof"`
}

type RefreshableVerifiableCredential_IssuerObject struct {
	IssuerObject *Issuer `protobuf:"bytes,5,opt,name=issuerObject,proto3,oneof"`
}

func (*RefreshableVerifiableCredential_IssuserId) isRefreshableVerifiableCredential_Issuer() {}

func (*RefreshableVerifiableCredential_IssuerObject) isRefreshableVerifiableCredential_Issuer() {}

var File_api_vc_types_credential_proto protoreflect.FileDescriptor

var file_api_vc_types_credential_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7b, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x2f, 0x0a, 0x17, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x22, 0x36, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x9d, 0x03, 0x0a, 0x0c, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65,
	0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x50, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xde, 0x05, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x50, 0x75, 0x72, 0x70, 0x6f,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x77, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6a, 0x77, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6e, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x5f, 0x0a, 0x17, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x17, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x91, 0x02, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x4a, 0x0a,
	0x10, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x63,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22,
	0x8f, 0x02, 0x0a, 0x0d, 0x4a, 0x57, 0x54, 0x43, 0x72, 0x65, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x69, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x75, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x75, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x62, 0x66,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x62, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x69, 0x61, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6a, 0x74, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x74, 0x69, 0x12,
	0x33, 0x0a, 0x02, 0x76, 0x63, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4a, 0x57, 0x54, 0x43, 0x72,
	0x65, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x2e, 0x56, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x02, 0x76, 0x63, 0x1a, 0x4b, 0x0a, 0x07, 0x56, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x83, 0x05, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x69,
	0x73, 0x73, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x4a, 0x0a, 0x10,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x63, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x10, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d,
	0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x65, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x63, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x22, 0x53, 0x0a, 0x1b, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0xd4, 0x05, 0x0a,
	0x1f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x63, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x73,
	0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x73,
	0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42,
	0x0a, 0x11, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x11, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x4a, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x10, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x38,
	0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x52, 0x0a, 0x74, 0x65,
	0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x65, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x63, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x2a, 0x32, 0x0a, 0x17, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x6a, 0x77, 0x73, 0x10, 0x01, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x68, 0x61, 0x74, 0x74, 0x69, 0x2f, 0x47, 0x53, 0x53,
	0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_vc_types_credential_proto_rawDescOnce sync.Once
	file_api_vc_types_credential_proto_rawDescData = file_api_vc_types_credential_proto_rawDesc
)

func file_api_vc_types_credential_proto_rawDescGZIP() []byte {
	file_api_vc_types_credential_proto_rawDescOnce.Do(func() {
		file_api_vc_types_credential_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_vc_types_credential_proto_rawDescData)
	})
	return file_api_vc_types_credential_proto_rawDescData
}

var file_api_vc_types_credential_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_vc_types_credential_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_api_vc_types_credential_proto_goTypes = []interface{}{
	(SignatureRepresentation)(0),            // 0: api.vc.types.SignatureRepresentation
	(*CredentialStatus)(nil),                // 1: api.vc.types.CredentialStatus
	(*DeriveCredentialOptions)(nil),         // 2: api.vc.types.DeriveCredentialOptions
	(*CredentialSchema)(nil),                // 3: api.vc.types.CredentialSchema
	(*ProofOptions)(nil),                    // 4: api.vc.types.ProofOptions
	(*CredentialProof)(nil),                 // 5: api.vc.types.CredentialProof
	(*CredentialOptions)(nil),               // 6: api.vc.types.CredentialOptions
	(*JWTCredClaims)(nil),                   // 7: api.vc.types.JWTCredClaims
	(*VerifiableCredential)(nil),            // 8: api.vc.types.VerifiableCredential
	(*VerifiableCredentialOptions)(nil),     // 9: api.vc.types.VerifiableCredentialOptions
	(*RefreshableVerifiableCredential)(nil), // 10: api.vc.types.RefreshableVerifiableCredential
	nil,                                     // 11: api.vc.types.JWTCredClaims.VcEntry
	(*LangValue)(nil),                       // 12: api.vc.types.LangValue
	(*timestamppb.Timestamp)(nil),           // 13: google.protobuf.Timestamp
	(*Issuer)(nil),                          // 14: api.vc.types.Issuer
	(*anypb.Any)(nil),                       // 15: google.protobuf.Any
	(*TermsOfUse)(nil),                      // 16: api.vc.types.TermsOfUse
	(*RefreshService)(nil),                  // 17: api.vc.types.RefreshService
}
var file_api_vc_types_credential_proto_depIdxs = []int32{
	12, // 0: api.vc.types.CredentialStatus.statusReason:type_name -> api.vc.types.LangValue
	0,  // 1: api.vc.types.ProofOptions.proofRepresentation:type_name -> api.vc.types.SignatureRepresentation
	13, // 2: api.vc.types.ProofOptions.created:type_name -> google.protobuf.Timestamp
	13, // 3: api.vc.types.CredentialProof.issuerData:type_name -> google.protobuf.Timestamp
	13, // 4: api.vc.types.CredentialProof.created:type_name -> google.protobuf.Timestamp
	0,  // 5: api.vc.types.CredentialProof.signatureRepresentation:type_name -> api.vc.types.SignatureRepresentation
	8,  // 6: api.vc.types.CredentialOptions.credentials:type_name -> api.vc.types.VerifiableCredential
	1,  // 7: api.vc.types.CredentialOptions.credentialStatus:type_name -> api.vc.types.CredentialStatus
	13, // 8: api.vc.types.CredentialOptions.created:type_name -> google.protobuf.Timestamp
	11, // 9: api.vc.types.JWTCredClaims.vc:type_name -> api.vc.types.JWTCredClaims.VcEntry
	14, // 10: api.vc.types.VerifiableCredential.issuerObject:type_name -> api.vc.types.Issuer
	13, // 11: api.vc.types.VerifiableCredential.issuanceDate:type_name -> google.protobuf.Timestamp
	13, // 12: api.vc.types.VerifiableCredential.expirationDate:type_name -> google.protobuf.Timestamp
	15, // 13: api.vc.types.VerifiableCredential.credentialSubject:type_name -> google.protobuf.Any
	3,  // 14: api.vc.types.VerifiableCredential.credentialSchema:type_name -> api.vc.types.CredentialSchema
	16, // 15: api.vc.types.VerifiableCredential.termsOfUse:type_name -> api.vc.types.TermsOfUse
	15, // 16: api.vc.types.VerifiableCredential.evidence:type_name -> google.protobuf.Any
	5,  // 17: api.vc.types.VerifiableCredential.proof:type_name -> api.vc.types.CredentialProof
	14, // 18: api.vc.types.RefreshableVerifiableCredential.issuerObject:type_name -> api.vc.types.Issuer
	13, // 19: api.vc.types.RefreshableVerifiableCredential.issuanceDate:type_name -> google.protobuf.Timestamp
	13, // 20: api.vc.types.RefreshableVerifiableCredential.expirationDate:type_name -> google.protobuf.Timestamp
	15, // 21: api.vc.types.RefreshableVerifiableCredential.credentialSubject:type_name -> google.protobuf.Any
	3,  // 22: api.vc.types.RefreshableVerifiableCredential.credentialSchema:type_name -> api.vc.types.CredentialSchema
	16, // 23: api.vc.types.RefreshableVerifiableCredential.termsOfUse:type_name -> api.vc.types.TermsOfUse
	15, // 24: api.vc.types.RefreshableVerifiableCredential.evidence:type_name -> google.protobuf.Any
	5,  // 25: api.vc.types.RefreshableVerifiableCredential.proof:type_name -> api.vc.types.CredentialProof
	17, // 26: api.vc.types.RefreshableVerifiableCredential.refreshService:type_name -> api.vc.types.RefreshService
	15, // 27: api.vc.types.JWTCredClaims.VcEntry.value:type_name -> google.protobuf.Any
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_api_vc_types_credential_proto_init() }
func file_api_vc_types_credential_proto_init() {
	if File_api_vc_types_credential_proto != nil {
		return
	}
	file_api_vc_types_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_vc_types_credential_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_vc_types_credential_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeriveCredentialOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_vc_types_credential_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_vc_types_credential_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProofOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_vc_types_credential_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_vc_types_credential_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_vc_types_credential_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTCredClaims); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_vc_types_credential_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifiableCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_vc_types_credential_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifiableCredentialOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_vc_types_credential_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshableVerifiableCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_vc_types_credential_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*VerifiableCredential_IssuserId)(nil),
		(*VerifiableCredential_IssuerObject)(nil),
	}
	file_api_vc_types_credential_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*RefreshableVerifiableCredential_IssuserId)(nil),
		(*RefreshableVerifiableCredential_IssuerObject)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_vc_types_credential_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_vc_types_credential_proto_goTypes,
		DependencyIndexes: file_api_vc_types_credential_proto_depIdxs,
		EnumInfos:         file_api_vc_types_credential_proto_enumTypes,
		MessageInfos:      file_api_vc_types_credential_proto_msgTypes,
	}.Build()
	File_api_vc_types_credential_proto = out.File
	file_api_vc_types_credential_proto_rawDesc = nil
	file_api_vc_types_credential_proto_goTypes = nil
	file_api_vc_types_credential_proto_depIdxs = nil
}
