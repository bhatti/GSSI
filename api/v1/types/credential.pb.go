// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: api/v1/types/credential.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CredentialStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of credential status to issue the credential with
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The status of credential
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// statusReason
	// {
	//   "value": "Address is out of date.",
	//   "lang": "en"
	// },
	StatusReason *LangValue `protobuf:"bytes,3,opt,name=statusReason,proto3" json:"statusReason,omitempty"`
}

func (x *CredentialStatus) Reset() {
	*x = CredentialStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_types_credential_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialStatus) ProtoMessage() {}

func (x *CredentialStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_types_credential_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialStatus.ProtoReflect.Descriptor instead.
func (*CredentialStatus) Descriptor() ([]byte, []int) {
	return file_api_v1_types_credential_proto_rawDescGZIP(), []int{0}
}

func (x *CredentialStatus) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CredentialStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CredentialStatus) GetStatusReason() *LangValue {
	if x != nil {
		return x.StatusReason
	}
	return nil
}

type DeriveCredentialOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An encoded nonce provided by the holder of the credential to be included into the LinkedDataProof.
	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *DeriveCredentialOptions) Reset() {
	*x = DeriveCredentialOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_types_credential_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeriveCredentialOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeriveCredentialOptions) ProtoMessage() {}

func (x *DeriveCredentialOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_types_credential_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeriveCredentialOptions.ProtoReflect.Descriptor instead.
func (*DeriveCredentialOptions) Descriptor() ([]byte, []int) {
	return file_api_v1_types_credential_proto_rawDescGZIP(), []int{1}
}

func (x *DeriveCredentialOptions) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type CredentialSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of schema
	// e.g. https://example.org/examples/degree.json
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// type of schema
	// e.g. JsonSchemaValidator2018 or ZkpExampleSchema2018
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CredentialSchema) Reset() {
	*x = CredentialSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_types_credential_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialSchema) ProtoMessage() {}

func (x *CredentialSchema) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_types_credential_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialSchema.ProtoReflect.Descriptor instead.
func (*CredentialSchema) Descriptor() ([]byte, []int) {
	return file_api_v1_types_credential_proto_rawDescGZIP(), []int{2}
}

func (x *CredentialSchema) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CredentialSchema) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// CredentialProof for verifiable credentials
type CredentialProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Linked Data Signature Suite used to produce proof.
	// e.g. RsaSignature2018 or CLSignature2019
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// A value chosen by the verifier to mitigate authentication proof replay attacks.
	Challenge string `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
	// The domain of the proof to restrict its use to a particular target.
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	// A value chosen by the creator of a proof to randomize proof values for privacy purposes.
	Nonce string `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Verification Method used to verify proof.
	// e.g. https://example.edu/issuers/14#key-1 or https://example.edu/issuers/565049#key-1
	VerificationMethod string `protobuf:"bytes,5,opt,name=verificationMethod,proto3" json:"verificationMethod,omitempty"`
	// The purpose of the proof to be used with verificationMethod
	// e.g. assertionMethod
	ProofPurpose string `protobuf:"bytes,6,opt,name=proofPurpose,proto3" json:"proofPurpose,omitempty"`
	// Detached JSON Web Signature
	Jws string `protobuf:"bytes,7,opt,name=jws,proto3" json:"jws,omitempty"`
	// Value of the Linked Data proof.
	// e.g. z2aArNcQKX9aqYK7GRZmV7c9xfGuwB5YAXhkYY9DTvLdTCQEsXaNpz1G
	ProofValue string `protobuf:"bytes,8,opt,name=proofValue,proto3" json:"proofValue,omitempty"`
	// e.g.     "attributes": "pPYmqDvwwWBDPNykXVrBtKdsJDeZUGFA...tTERiLqsZ5oxCoCSodPQaggkDJy",
	Attributes                string `protobuf:"bytes,9,opt,name=attributes,proto3" json:"attributes,omitempty"`
	Signature                 string `protobuf:"bytes,10,opt,name=signature,proto3" json:"signature,omitempty"`
	SignatureCorrectnessProof string `protobuf:"bytes,11,opt,name=signatureCorrectnessProof,proto3" json:"signatureCorrectnessProof,omitempty"`
	PrimaryProof              string `protobuf:"bytes,12,opt,name=primaryProof,proto3" json:"primaryProof,omitempty"`
	NonRevocationProof        string `protobuf:"bytes,13,opt,name=nonRevocationProof,proto3" json:"nonRevocationProof,omitempty"`
	// The issuerData string
	IssuerData *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=issuerData,proto3" json:"issuerData,omitempty"`
	// The created string
	Created *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *CredentialProof) Reset() {
	*x = CredentialProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_types_credential_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialProof) ProtoMessage() {}

func (x *CredentialProof) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_types_credential_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialProof.ProtoReflect.Descriptor instead.
func (*CredentialProof) Descriptor() ([]byte, []int) {
	return file_api_v1_types_credential_proto_rawDescGZIP(), []int{3}
}

func (x *CredentialProof) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CredentialProof) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *CredentialProof) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CredentialProof) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *CredentialProof) GetVerificationMethod() string {
	if x != nil {
		return x.VerificationMethod
	}
	return ""
}

func (x *CredentialProof) GetProofPurpose() string {
	if x != nil {
		return x.ProofPurpose
	}
	return ""
}

func (x *CredentialProof) GetJws() string {
	if x != nil {
		return x.Jws
	}
	return ""
}

func (x *CredentialProof) GetProofValue() string {
	if x != nil {
		return x.ProofValue
	}
	return ""
}

func (x *CredentialProof) GetAttributes() string {
	if x != nil {
		return x.Attributes
	}
	return ""
}

func (x *CredentialProof) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *CredentialProof) GetSignatureCorrectnessProof() string {
	if x != nil {
		return x.SignatureCorrectnessProof
	}
	return ""
}

func (x *CredentialProof) GetPrimaryProof() string {
	if x != nil {
		return x.PrimaryProof
	}
	return ""
}

func (x *CredentialProof) GetNonRevocationProof() string {
	if x != nil {
		return x.NonRevocationProof
	}
	return ""
}

func (x *CredentialProof) GetIssuerData() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuerData
	}
	return nil
}

func (x *CredentialProof) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

// Credential for verifiable credentials
// Examples of verifiable credentials include digital employee
// identification cards, digital birth certificates, and digital educational certificates.
type Credential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the credential.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The JSON-LD context of the credential. Each item in the @context array MUST be a string.
	//  "@context": [
	//    "https://www.w3.org/2018/credentials/v1",
	//    "https://www.w3.org/2018/credentials/examples/v1"
	//  ]
	Context []string `protobuf:"bytes,2,rep,name=context,proto3" json:"context,omitempty"`
	// The JSON-LD type of the credential. Each item in the type array MUST be a string.
	Type []string `protobuf:"bytes,3,rep,name=type,proto3" json:"type,omitempty"`
	// A JSON-LD Verifiable Credential Issuer. The issuer object MUST be either a string or an object of the following form:
	//
	// Types that are assignable to Issuer:
	//	*Credential_IssuserId
	//	*Credential_IssuerObject
	Issuer isCredential_Issuer `protobuf_oneof:"issuer"`
	// The issuanceDate string
	IssuanceDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=issuanceDate,proto3" json:"issuanceDate,omitempty"`
	// The expirationDate string
	ExpirationDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
	// The method of credential status to issue the credential including. If omitted credential status will be included.
	CredentialSubject *anypb.Any        `protobuf:"bytes,8,opt,name=credentialSubject,proto3" json:"credentialSubject,omitempty"`
	CredentialSchema  *CredentialSchema `protobuf:"bytes,9,opt,name=credentialSchema,proto3" json:"credentialSchema,omitempty"`
	TermsOfUse        *TermsOfUse       `protobuf:"bytes,10,opt,name=termsOfUse,proto3" json:"termsOfUse,omitempty"`
	//  Evidence can be included by an issuer to provide the verifier with additional supporting information in a
	//  verifiable credential. This could be used by the verifier to establish the confidence with which
	//  it relies on the claims in the verifiable credential.
	//   "evidence": [{
	//    "id": "https://example.edu/evidence/f2aeec97-fc0d-42bf-8ca7-0548192d4231",
	//    "type": ["DocumentVerification"],
	//    "verifier": "https://example.edu/issuers/14",
	//    "evidenceDocument": "DriversLicense",
	//    "subjectPresence": "Physical",
	//    "documentPresence": "Physical",
	//    "licenseNumber": "123AB4567"
	//  }],
	Evidence []*anypb.Any `protobuf:"bytes,11,rep,name=evidence,proto3" json:"evidence,omitempty"`
}

func (x *Credential) Reset() {
	*x = Credential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_types_credential_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_types_credential_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_api_v1_types_credential_proto_rawDescGZIP(), []int{4}
}

func (x *Credential) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Credential) GetContext() []string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Credential) GetType() []string {
	if x != nil {
		return x.Type
	}
	return nil
}

func (m *Credential) GetIssuer() isCredential_Issuer {
	if m != nil {
		return m.Issuer
	}
	return nil
}

func (x *Credential) GetIssuserId() string {
	if x, ok := x.GetIssuer().(*Credential_IssuserId); ok {
		return x.IssuserId
	}
	return ""
}

func (x *Credential) GetIssuerObject() *Issuer {
	if x, ok := x.GetIssuer().(*Credential_IssuerObject); ok {
		return x.IssuerObject
	}
	return nil
}

func (x *Credential) GetIssuanceDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuanceDate
	}
	return nil
}

func (x *Credential) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *Credential) GetCredentialSubject() *anypb.Any {
	if x != nil {
		return x.CredentialSubject
	}
	return nil
}

func (x *Credential) GetCredentialSchema() *CredentialSchema {
	if x != nil {
		return x.CredentialSchema
	}
	return nil
}

func (x *Credential) GetTermsOfUse() *TermsOfUse {
	if x != nil {
		return x.TermsOfUse
	}
	return nil
}

func (x *Credential) GetEvidence() []*anypb.Any {
	if x != nil {
		return x.Evidence
	}
	return nil
}

type isCredential_Issuer interface {
	isCredential_Issuer()
}

type Credential_IssuserId struct {
	IssuserId string `protobuf:"bytes,4,opt,name=issuserId,proto3,oneof"`
}

type Credential_IssuerObject struct {
	IssuerObject *Issuer `protobuf:"bytes,5,opt,name=issuerObject,proto3,oneof"`
}

func (*Credential_IssuserId) isCredential_Issuer() {}

func (*Credential_IssuerObject) isCredential_Issuer() {}

// CredentialOptions options
type CredentialOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The intended domain of validity for the proof. For example website.example
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// A challenge provided by the requesting party of the proof. For example 6e62f66e-67de-11eb-b490-ef3eeefa55f2
	Challenge   string      `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
	Credentials *Credential `protobuf:"bytes,3,opt,name=credentials,proto3" json:"credentials,omitempty"`
	// The method of credential status to issue the credential including. If omitted credential status will be included.
	CredentialStatus *CredentialStatus `protobuf:"bytes,4,opt,name=credentialStatus,proto3" json:"credentialStatus,omitempty"`
	// The created string
	Created *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *CredentialOptions) Reset() {
	*x = CredentialOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_types_credential_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialOptions) ProtoMessage() {}

func (x *CredentialOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_types_credential_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialOptions.ProtoReflect.Descriptor instead.
func (*CredentialOptions) Descriptor() ([]byte, []int) {
	return file_api_v1_types_credential_proto_rawDescGZIP(), []int{5}
}

func (x *CredentialOptions) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CredentialOptions) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

func (x *CredentialOptions) GetCredentials() *Credential {
	if x != nil {
		return x.Credentials
	}
	return nil
}

func (x *CredentialOptions) GetCredentialStatus() *CredentialStatus {
	if x != nil {
		return x.CredentialStatus
	}
	return nil
}

func (x *CredentialOptions) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

// A verifiable credential is a set of one or more claims made by the same entity. Credentials
// might also include an identifier and metadata to describe properties of the credential,
// such as the issuer, the expiry date and time, a representative image, a public key to use for
// verification purposes, the revocation mechanism, and so on. The metadata might be signed by the issuer.
// A verifiable credential is a set of tamper-evident claims and metadata that cryptographically prove who issued it.
// Verifiable credentials = Credential Metadata + Claims + Proofs
type VerifiableCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the credential.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The JSON-LD context of the credential. Each item in the @context array MUST be a string.
	//  "@context": [
	//    "https://www.w3.org/2018/credentials/v1",
	//    "https://www.w3.org/2018/credentials/examples/v1"
	//  ]
	Context []string `protobuf:"bytes,2,rep,name=context,proto3" json:"context,omitempty"`
	// The JSON-LD type of the credential. Each item in the type array MUST be a string.
	// e.g. ["VerifiableCredential", "AlumniCredential"]
	Type []string `protobuf:"bytes,3,rep,name=type,proto3" json:"type,omitempty"`
	// A JSON-LD Verifiable Credential Issuer. The issuer object MUST be either a string or an object of the following form:
	// e.g. https://example.edu/issuers/565049
	//
	// Types that are assignable to Issuer:
	//	*VerifiableCredential_IssuserId
	//	*VerifiableCredential_IssuerObject
	Issuer isVerifiableCredential_Issuer `protobuf_oneof:"issuer"`
	// The issuanceDate string
	IssuanceDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=issuanceDate,proto3" json:"issuanceDate,omitempty"`
	// The expirationDate string
	ExpirationDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
	// The method of credential status to issue the credential including. If omitted credential status will be included.
	CredentialSubject *anypb.Any        `protobuf:"bytes,8,opt,name=credentialSubject,proto3" json:"credentialSubject,omitempty"`
	CredentialSchema  *CredentialSchema `protobuf:"bytes,9,opt,name=credentialSchema,proto3" json:"credentialSchema,omitempty"`
	TermsOfUse        *TermsOfUse       `protobuf:"bytes,10,opt,name=termsOfUse,proto3" json:"termsOfUse,omitempty"`
	//  Evidence can be included by an issuer to provide the verifier with additional supporting information in a
	//  verifiable credential. This could be used by the verifier to establish the confidence with which
	//  it relies on the claims in the verifiable credential.
	Evidence []*anypb.Any `protobuf:"bytes,11,rep,name=evidence,proto3" json:"evidence,omitempty"`
	// A JSON-LD Linked Data proof
	Proof *CredentialProof `protobuf:"bytes,12,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *VerifiableCredential) Reset() {
	*x = VerifiableCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_types_credential_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiableCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiableCredential) ProtoMessage() {}

func (x *VerifiableCredential) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_types_credential_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiableCredential.ProtoReflect.Descriptor instead.
func (*VerifiableCredential) Descriptor() ([]byte, []int) {
	return file_api_v1_types_credential_proto_rawDescGZIP(), []int{6}
}

func (x *VerifiableCredential) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VerifiableCredential) GetContext() []string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *VerifiableCredential) GetType() []string {
	if x != nil {
		return x.Type
	}
	return nil
}

func (m *VerifiableCredential) GetIssuer() isVerifiableCredential_Issuer {
	if m != nil {
		return m.Issuer
	}
	return nil
}

func (x *VerifiableCredential) GetIssuserId() string {
	if x, ok := x.GetIssuer().(*VerifiableCredential_IssuserId); ok {
		return x.IssuserId
	}
	return ""
}

func (x *VerifiableCredential) GetIssuerObject() *Issuer {
	if x, ok := x.GetIssuer().(*VerifiableCredential_IssuerObject); ok {
		return x.IssuerObject
	}
	return nil
}

func (x *VerifiableCredential) GetIssuanceDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuanceDate
	}
	return nil
}

func (x *VerifiableCredential) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *VerifiableCredential) GetCredentialSubject() *anypb.Any {
	if x != nil {
		return x.CredentialSubject
	}
	return nil
}

func (x *VerifiableCredential) GetCredentialSchema() *CredentialSchema {
	if x != nil {
		return x.CredentialSchema
	}
	return nil
}

func (x *VerifiableCredential) GetTermsOfUse() *TermsOfUse {
	if x != nil {
		return x.TermsOfUse
	}
	return nil
}

func (x *VerifiableCredential) GetEvidence() []*anypb.Any {
	if x != nil {
		return x.Evidence
	}
	return nil
}

func (x *VerifiableCredential) GetProof() *CredentialProof {
	if x != nil {
		return x.Proof
	}
	return nil
}

type isVerifiableCredential_Issuer interface {
	isVerifiableCredential_Issuer()
}

type VerifiableCredential_IssuserId struct {
	IssuserId string `protobuf:"bytes,4,opt,name=issuserId,proto3,oneof"`
}

type VerifiableCredential_IssuerObject struct {
	IssuerObject *Issuer `protobuf:"bytes,5,opt,name=issuerObject,proto3,oneof"`
}

func (*VerifiableCredential_IssuserId) isVerifiableCredential_Issuer() {}

func (*VerifiableCredential_IssuerObject) isVerifiableCredential_Issuer() {}

// VerifiableCredentialOptions options
type VerifiableCredentialOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The intended domain of validity for the proof. For example website.example
	Domain string `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// A challenge provided by the requesting party of the proof. For example 6e62f66e-67de-11eb-b490-ef3eeefa55f2
	Challenge string `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *VerifiableCredentialOptions) Reset() {
	*x = VerifiableCredentialOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_types_credential_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifiableCredentialOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifiableCredentialOptions) ProtoMessage() {}

func (x *VerifiableCredentialOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_types_credential_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifiableCredentialOptions.ProtoReflect.Descriptor instead.
func (*VerifiableCredentialOptions) Descriptor() ([]byte, []int) {
	return file_api_v1_types_credential_proto_rawDescGZIP(), []int{7}
}

func (x *VerifiableCredentialOptions) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *VerifiableCredentialOptions) GetChallenge() string {
	if x != nil {
		return x.Challenge
	}
	return ""
}

// RefreshableVerifiableCredential for verifiable credentials
type RefreshableVerifiableCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the credential.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The JSON-LD context of the credential. Each item in the @context array MUST be a string.
	//  "@context": [
	//    "https://www.w3.org/2018/credentials/v1",
	//    "https://www.w3.org/2018/credentials/examples/v1"
	//  ]
	Context []string `protobuf:"bytes,2,rep,name=context,proto3" json:"context,omitempty"`
	// The JSON-LD type of the credential. Each item in the type array MUST be a string.
	Type []string `protobuf:"bytes,3,rep,name=type,proto3" json:"type,omitempty"`
	// A JSON-LD Verifiable Credential Issuer. The issuer object MUST be either a string or an object of the following form:
	//
	// Types that are assignable to Issuer:
	//	*RefreshableVerifiableCredential_IssuserId
	//	*RefreshableVerifiableCredential_IssuerObject
	Issuer isRefreshableVerifiableCredential_Issuer `protobuf_oneof:"issuer"`
	// The issuanceDate string
	IssuanceDate *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=issuanceDate,proto3" json:"issuanceDate,omitempty"`
	// The expirationDate string
	ExpirationDate *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=expirationDate,proto3" json:"expirationDate,omitempty"`
	// The method of credential status to issue the credential including. If omitted credential status will be included.
	CredentialSubject *anypb.Any        `protobuf:"bytes,8,opt,name=credentialSubject,proto3" json:"credentialSubject,omitempty"`
	CredentialSchema  *CredentialSchema `protobuf:"bytes,9,opt,name=credentialSchema,proto3" json:"credentialSchema,omitempty"`
	TermsOfUse        *TermsOfUse       `protobuf:"bytes,10,opt,name=termsOfUse,proto3" json:"termsOfUse,omitempty"`
	//  Evidence can be included by an issuer to provide the verifier with additional supporting information in a
	//  verifiable credential. This could be used by the verifier to establish the confidence with which
	//  it relies on the claims in the verifiable credential.
	Evidence []*anypb.Any `protobuf:"bytes,11,rep,name=evidence,proto3" json:"evidence,omitempty"`
	// A JSON-LD Linked Data proof
	Proof *CredentialProof `protobuf:"bytes,12,opt,name=proof,proto3" json:"proof,omitempty"`
	// RefreshService
	RefreshService *RefreshService `protobuf:"bytes,13,opt,name=refreshService,proto3" json:"refreshService,omitempty"`
}

func (x *RefreshableVerifiableCredential) Reset() {
	*x = RefreshableVerifiableCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_types_credential_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshableVerifiableCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshableVerifiableCredential) ProtoMessage() {}

func (x *RefreshableVerifiableCredential) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_types_credential_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshableVerifiableCredential.ProtoReflect.Descriptor instead.
func (*RefreshableVerifiableCredential) Descriptor() ([]byte, []int) {
	return file_api_v1_types_credential_proto_rawDescGZIP(), []int{8}
}

func (x *RefreshableVerifiableCredential) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RefreshableVerifiableCredential) GetContext() []string {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *RefreshableVerifiableCredential) GetType() []string {
	if x != nil {
		return x.Type
	}
	return nil
}

func (m *RefreshableVerifiableCredential) GetIssuer() isRefreshableVerifiableCredential_Issuer {
	if m != nil {
		return m.Issuer
	}
	return nil
}

func (x *RefreshableVerifiableCredential) GetIssuserId() string {
	if x, ok := x.GetIssuer().(*RefreshableVerifiableCredential_IssuserId); ok {
		return x.IssuserId
	}
	return ""
}

func (x *RefreshableVerifiableCredential) GetIssuerObject() *Issuer {
	if x, ok := x.GetIssuer().(*RefreshableVerifiableCredential_IssuerObject); ok {
		return x.IssuerObject
	}
	return nil
}

func (x *RefreshableVerifiableCredential) GetIssuanceDate() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuanceDate
	}
	return nil
}

func (x *RefreshableVerifiableCredential) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *RefreshableVerifiableCredential) GetCredentialSubject() *anypb.Any {
	if x != nil {
		return x.CredentialSubject
	}
	return nil
}

func (x *RefreshableVerifiableCredential) GetCredentialSchema() *CredentialSchema {
	if x != nil {
		return x.CredentialSchema
	}
	return nil
}

func (x *RefreshableVerifiableCredential) GetTermsOfUse() *TermsOfUse {
	if x != nil {
		return x.TermsOfUse
	}
	return nil
}

func (x *RefreshableVerifiableCredential) GetEvidence() []*anypb.Any {
	if x != nil {
		return x.Evidence
	}
	return nil
}

func (x *RefreshableVerifiableCredential) GetProof() *CredentialProof {
	if x != nil {
		return x.Proof
	}
	return nil
}

func (x *RefreshableVerifiableCredential) GetRefreshService() *RefreshService {
	if x != nil {
		return x.RefreshService
	}
	return nil
}

type isRefreshableVerifiableCredential_Issuer interface {
	isRefreshableVerifiableCredential_Issuer()
}

type RefreshableVerifiableCredential_IssuserId struct {
	IssuserId string `protobuf:"bytes,4,opt,name=issuserId,proto3,oneof"`
}

type RefreshableVerifiableCredential_IssuerObject struct {
	IssuerObject *Issuer `protobuf:"bytes,5,opt,name=issuerObject,proto3,oneof"`
}

func (*RefreshableVerifiableCredential_IssuserId) isRefreshableVerifiableCredential_Issuer() {}

func (*RefreshableVerifiableCredential_IssuerObject) isRefreshableVerifiableCredential_Issuer() {}

var File_api_v1_types_credential_proto protoreflect.FileDescriptor

var file_api_v1_types_credential_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x78, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x17, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x36, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xb9, 0x04, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6a, 0x77, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x77, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x19,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2e,
	0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x6f, 0x6e, 0x52,
	0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x3a,
	0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x22, 0xa7, 0x04, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x09, 0x69, 0x73, 0x73, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x11, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x47,
	0x0a, 0x10, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x10, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x35, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x73,
	0x4f, 0x66, 0x55, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55,
	0x73, 0x65, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x22, 0x81, 0x02, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x47, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xe3,
	0x04, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3e,
	0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42,
	0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x10, 0x63,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x35, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d,
	0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08,
	0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x42, 0x08, 0x0a, 0x06, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x22, 0x53, 0x0a, 0x1b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0xb1, 0x05, 0x0a, 0x1f, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x69,
	0x73, 0x73, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x11, 0x63, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x47, 0x0a, 0x10,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x10, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x35, 0x0a, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66,
	0x55, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65,
	0x52, 0x0a, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08,
	0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30,
	0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x42, 0x25, 0x5a,
	0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x68, 0x61, 0x74,
	0x74, 0x69, 0x2f, 0x47, 0x53, 0x53, 0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_types_credential_proto_rawDescOnce sync.Once
	file_api_v1_types_credential_proto_rawDescData = file_api_v1_types_credential_proto_rawDesc
)

func file_api_v1_types_credential_proto_rawDescGZIP() []byte {
	file_api_v1_types_credential_proto_rawDescOnce.Do(func() {
		file_api_v1_types_credential_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_types_credential_proto_rawDescData)
	})
	return file_api_v1_types_credential_proto_rawDescData
}

var file_api_v1_types_credential_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_api_v1_types_credential_proto_goTypes = []interface{}{
	(*CredentialStatus)(nil),                // 0: api.types.CredentialStatus
	(*DeriveCredentialOptions)(nil),         // 1: api.types.DeriveCredentialOptions
	(*CredentialSchema)(nil),                // 2: api.types.CredentialSchema
	(*CredentialProof)(nil),                 // 3: api.types.CredentialProof
	(*Credential)(nil),                      // 4: api.types.Credential
	(*CredentialOptions)(nil),               // 5: api.types.CredentialOptions
	(*VerifiableCredential)(nil),            // 6: api.types.VerifiableCredential
	(*VerifiableCredentialOptions)(nil),     // 7: api.types.VerifiableCredentialOptions
	(*RefreshableVerifiableCredential)(nil), // 8: api.types.RefreshableVerifiableCredential
	(*LangValue)(nil),                       // 9: api.types.LangValue
	(*timestamppb.Timestamp)(nil),           // 10: google.protobuf.Timestamp
	(*Issuer)(nil),                          // 11: api.types.Issuer
	(*anypb.Any)(nil),                       // 12: google.protobuf.Any
	(*TermsOfUse)(nil),                      // 13: api.types.TermsOfUse
	(*RefreshService)(nil),                  // 14: api.types.RefreshService
}
var file_api_v1_types_credential_proto_depIdxs = []int32{
	9,  // 0: api.types.CredentialStatus.statusReason:type_name -> api.types.LangValue
	10, // 1: api.types.CredentialProof.issuerData:type_name -> google.protobuf.Timestamp
	10, // 2: api.types.CredentialProof.created:type_name -> google.protobuf.Timestamp
	11, // 3: api.types.Credential.issuerObject:type_name -> api.types.Issuer
	10, // 4: api.types.Credential.issuanceDate:type_name -> google.protobuf.Timestamp
	10, // 5: api.types.Credential.expirationDate:type_name -> google.protobuf.Timestamp
	12, // 6: api.types.Credential.credentialSubject:type_name -> google.protobuf.Any
	2,  // 7: api.types.Credential.credentialSchema:type_name -> api.types.CredentialSchema
	13, // 8: api.types.Credential.termsOfUse:type_name -> api.types.TermsOfUse
	12, // 9: api.types.Credential.evidence:type_name -> google.protobuf.Any
	4,  // 10: api.types.CredentialOptions.credentials:type_name -> api.types.Credential
	0,  // 11: api.types.CredentialOptions.credentialStatus:type_name -> api.types.CredentialStatus
	10, // 12: api.types.CredentialOptions.created:type_name -> google.protobuf.Timestamp
	11, // 13: api.types.VerifiableCredential.issuerObject:type_name -> api.types.Issuer
	10, // 14: api.types.VerifiableCredential.issuanceDate:type_name -> google.protobuf.Timestamp
	10, // 15: api.types.VerifiableCredential.expirationDate:type_name -> google.protobuf.Timestamp
	12, // 16: api.types.VerifiableCredential.credentialSubject:type_name -> google.protobuf.Any
	2,  // 17: api.types.VerifiableCredential.credentialSchema:type_name -> api.types.CredentialSchema
	13, // 18: api.types.VerifiableCredential.termsOfUse:type_name -> api.types.TermsOfUse
	12, // 19: api.types.VerifiableCredential.evidence:type_name -> google.protobuf.Any
	3,  // 20: api.types.VerifiableCredential.proof:type_name -> api.types.CredentialProof
	11, // 21: api.types.RefreshableVerifiableCredential.issuerObject:type_name -> api.types.Issuer
	10, // 22: api.types.RefreshableVerifiableCredential.issuanceDate:type_name -> google.protobuf.Timestamp
	10, // 23: api.types.RefreshableVerifiableCredential.expirationDate:type_name -> google.protobuf.Timestamp
	12, // 24: api.types.RefreshableVerifiableCredential.credentialSubject:type_name -> google.protobuf.Any
	2,  // 25: api.types.RefreshableVerifiableCredential.credentialSchema:type_name -> api.types.CredentialSchema
	13, // 26: api.types.RefreshableVerifiableCredential.termsOfUse:type_name -> api.types.TermsOfUse
	12, // 27: api.types.RefreshableVerifiableCredential.evidence:type_name -> google.protobuf.Any
	3,  // 28: api.types.RefreshableVerifiableCredential.proof:type_name -> api.types.CredentialProof
	14, // 29: api.types.RefreshableVerifiableCredential.refreshService:type_name -> api.types.RefreshService
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_api_v1_types_credential_proto_init() }
func file_api_v1_types_credential_proto_init() {
	if File_api_v1_types_credential_proto != nil {
		return
	}
	file_api_v1_types_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_v1_types_credential_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_types_credential_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeriveCredentialOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_types_credential_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_types_credential_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_types_credential_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_types_credential_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_types_credential_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifiableCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_types_credential_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifiableCredentialOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_types_credential_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshableVerifiableCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_v1_types_credential_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Credential_IssuserId)(nil),
		(*Credential_IssuerObject)(nil),
	}
	file_api_v1_types_credential_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*VerifiableCredential_IssuserId)(nil),
		(*VerifiableCredential_IssuerObject)(nil),
	}
	file_api_v1_types_credential_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*RefreshableVerifiableCredential_IssuserId)(nil),
		(*RefreshableVerifiableCredential_IssuerObject)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_types_credential_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v1_types_credential_proto_goTypes,
		DependencyIndexes: file_api_v1_types_credential_proto_depIdxs,
		MessageInfos:      file_api_v1_types_credential_proto_msgTypes,
	}.Build()
	File_api_v1_types_credential_proto = out.File
	file_api_v1_types_credential_proto_rawDesc = nil
	file_api_v1_types_credential_proto_goTypes = nil
	file_api_v1_types_credential_proto_depIdxs = nil
}
