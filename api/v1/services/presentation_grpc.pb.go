// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/v1/services/presentation.proto

package services

import (
	context "context"
	types "github.com/bhatti/GSSI/api/v1/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CredentialsPresentServiceClient is the client API for CredentialsPresentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CredentialsPresentServiceClient interface {
	// GET /presentations - Gets list of presentations or verifiable presentations
	// GET /credentials
	// 200	Credentials retrieved
	// 400	Bad Request
	// 401	Not Authorized
	// 410	Gone! There is no data here
	// 500	Internal Error
	// 501	Not Implemented
	GetAll(ctx context.Context, in *GetAllPresentationRequest, opts ...grpc.CallOption) (CredentialsPresentService_GetAllClient, error)
	// POST /credentials/derive - Derives a credential and returns it in the response body.
	// 201	Credential derived successfully.
	// 400	Invalid Request
	// 500	Internal Error
	// 501	Not Implemented
	DeriveCredential(ctx context.Context, in *DeriveCredentialRequest, opts ...grpc.CallOption) (*types.RefreshableVerifiablePresentation, error)
	// POST /presentations/prove - Proves a presentation and returns it in the response body.
	// 201	Presentation successfully proved!
	// 400	invalid input!
	// 500	error!
	ProvePresentation(ctx context.Context, in *ProvePresentationRequest, opts ...grpc.CallOption) (*types.RefreshableVerifiablePresentation, error)
	// POST /exchanges/{exchange-id} - Initiates an exchange of information.
	// 200	Proceed with exchange.
	// 400	Request is malformed.
	// 500	Internal server error.
	// 501	Service not implemented.
	InitiateExchange(ctx context.Context, in *InitiateExchangeRequest, opts ...grpc.CallOption) (CredentialsPresentService_InitiateExchangeClient, error)
	// PUT /exchanges/{exchange-id}/{transaction-id} - Receives information related to an existing exchange.
	// 200	Proceed with exchange.
	// 400	Request is malformed.
	// 500	Internal server error.
	// 501	Service not implemented.
	ContinueExchange(ctx context.Context, in *ContinueExchangeRequest, opts ...grpc.CallOption) (CredentialsPresentService_ContinueExchangeClient, error)
}

type credentialsPresentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCredentialsPresentServiceClient(cc grpc.ClientConnInterface) CredentialsPresentServiceClient {
	return &credentialsPresentServiceClient{cc}
}

func (c *credentialsPresentServiceClient) GetAll(ctx context.Context, in *GetAllPresentationRequest, opts ...grpc.CallOption) (CredentialsPresentService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &CredentialsPresentService_ServiceDesc.Streams[0], "/api.services.CredentialsPresentService/getAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &credentialsPresentServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CredentialsPresentService_GetAllClient interface {
	Recv() (*types.RefreshableVerifiablePresentation, error)
	grpc.ClientStream
}

type credentialsPresentServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *credentialsPresentServiceGetAllClient) Recv() (*types.RefreshableVerifiablePresentation, error) {
	m := new(types.RefreshableVerifiablePresentation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *credentialsPresentServiceClient) DeriveCredential(ctx context.Context, in *DeriveCredentialRequest, opts ...grpc.CallOption) (*types.RefreshableVerifiablePresentation, error) {
	out := new(types.RefreshableVerifiablePresentation)
	err := c.cc.Invoke(ctx, "/api.services.CredentialsPresentService/deriveCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialsPresentServiceClient) ProvePresentation(ctx context.Context, in *ProvePresentationRequest, opts ...grpc.CallOption) (*types.RefreshableVerifiablePresentation, error) {
	out := new(types.RefreshableVerifiablePresentation)
	err := c.cc.Invoke(ctx, "/api.services.CredentialsPresentService/provePresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *credentialsPresentServiceClient) InitiateExchange(ctx context.Context, in *InitiateExchangeRequest, opts ...grpc.CallOption) (CredentialsPresentService_InitiateExchangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &CredentialsPresentService_ServiceDesc.Streams[1], "/api.services.CredentialsPresentService/initiateExchange", opts...)
	if err != nil {
		return nil, err
	}
	x := &credentialsPresentServiceInitiateExchangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CredentialsPresentService_InitiateExchangeClient interface {
	Recv() (*types.RefreshableVerifiableCredential, error)
	grpc.ClientStream
}

type credentialsPresentServiceInitiateExchangeClient struct {
	grpc.ClientStream
}

func (x *credentialsPresentServiceInitiateExchangeClient) Recv() (*types.RefreshableVerifiableCredential, error) {
	m := new(types.RefreshableVerifiableCredential)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *credentialsPresentServiceClient) ContinueExchange(ctx context.Context, in *ContinueExchangeRequest, opts ...grpc.CallOption) (CredentialsPresentService_ContinueExchangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &CredentialsPresentService_ServiceDesc.Streams[2], "/api.services.CredentialsPresentService/continueExchange", opts...)
	if err != nil {
		return nil, err
	}
	x := &credentialsPresentServiceContinueExchangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CredentialsPresentService_ContinueExchangeClient interface {
	Recv() (*types.RefreshableVerifiableCredential, error)
	grpc.ClientStream
}

type credentialsPresentServiceContinueExchangeClient struct {
	grpc.ClientStream
}

func (x *credentialsPresentServiceContinueExchangeClient) Recv() (*types.RefreshableVerifiableCredential, error) {
	m := new(types.RefreshableVerifiableCredential)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CredentialsPresentServiceServer is the server API for CredentialsPresentService service.
// All implementations must embed UnimplementedCredentialsPresentServiceServer
// for forward compatibility
type CredentialsPresentServiceServer interface {
	// GET /presentations - Gets list of presentations or verifiable presentations
	// GET /credentials
	// 200	Credentials retrieved
	// 400	Bad Request
	// 401	Not Authorized
	// 410	Gone! There is no data here
	// 500	Internal Error
	// 501	Not Implemented
	GetAll(*GetAllPresentationRequest, CredentialsPresentService_GetAllServer) error
	// POST /credentials/derive - Derives a credential and returns it in the response body.
	// 201	Credential derived successfully.
	// 400	Invalid Request
	// 500	Internal Error
	// 501	Not Implemented
	DeriveCredential(context.Context, *DeriveCredentialRequest) (*types.RefreshableVerifiablePresentation, error)
	// POST /presentations/prove - Proves a presentation and returns it in the response body.
	// 201	Presentation successfully proved!
	// 400	invalid input!
	// 500	error!
	ProvePresentation(context.Context, *ProvePresentationRequest) (*types.RefreshableVerifiablePresentation, error)
	// POST /exchanges/{exchange-id} - Initiates an exchange of information.
	// 200	Proceed with exchange.
	// 400	Request is malformed.
	// 500	Internal server error.
	// 501	Service not implemented.
	InitiateExchange(*InitiateExchangeRequest, CredentialsPresentService_InitiateExchangeServer) error
	// PUT /exchanges/{exchange-id}/{transaction-id} - Receives information related to an existing exchange.
	// 200	Proceed with exchange.
	// 400	Request is malformed.
	// 500	Internal server error.
	// 501	Service not implemented.
	ContinueExchange(*ContinueExchangeRequest, CredentialsPresentService_ContinueExchangeServer) error
	mustEmbedUnimplementedCredentialsPresentServiceServer()
}

// UnimplementedCredentialsPresentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCredentialsPresentServiceServer struct {
}

func (UnimplementedCredentialsPresentServiceServer) GetAll(*GetAllPresentationRequest, CredentialsPresentService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedCredentialsPresentServiceServer) DeriveCredential(context.Context, *DeriveCredentialRequest) (*types.RefreshableVerifiablePresentation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeriveCredential not implemented")
}
func (UnimplementedCredentialsPresentServiceServer) ProvePresentation(context.Context, *ProvePresentationRequest) (*types.RefreshableVerifiablePresentation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvePresentation not implemented")
}
func (UnimplementedCredentialsPresentServiceServer) InitiateExchange(*InitiateExchangeRequest, CredentialsPresentService_InitiateExchangeServer) error {
	return status.Errorf(codes.Unimplemented, "method InitiateExchange not implemented")
}
func (UnimplementedCredentialsPresentServiceServer) ContinueExchange(*ContinueExchangeRequest, CredentialsPresentService_ContinueExchangeServer) error {
	return status.Errorf(codes.Unimplemented, "method ContinueExchange not implemented")
}
func (UnimplementedCredentialsPresentServiceServer) mustEmbedUnimplementedCredentialsPresentServiceServer() {
}

// UnsafeCredentialsPresentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CredentialsPresentServiceServer will
// result in compilation errors.
type UnsafeCredentialsPresentServiceServer interface {
	mustEmbedUnimplementedCredentialsPresentServiceServer()
}

func RegisterCredentialsPresentServiceServer(s grpc.ServiceRegistrar, srv CredentialsPresentServiceServer) {
	s.RegisterService(&CredentialsPresentService_ServiceDesc, srv)
}

func _CredentialsPresentService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllPresentationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CredentialsPresentServiceServer).GetAll(m, &credentialsPresentServiceGetAllServer{stream})
}

type CredentialsPresentService_GetAllServer interface {
	Send(*types.RefreshableVerifiablePresentation) error
	grpc.ServerStream
}

type credentialsPresentServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *credentialsPresentServiceGetAllServer) Send(m *types.RefreshableVerifiablePresentation) error {
	return x.ServerStream.SendMsg(m)
}

func _CredentialsPresentService_DeriveCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeriveCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsPresentServiceServer).DeriveCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.services.CredentialsPresentService/deriveCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsPresentServiceServer).DeriveCredential(ctx, req.(*DeriveCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialsPresentService_ProvePresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvePresentationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CredentialsPresentServiceServer).ProvePresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.services.CredentialsPresentService/provePresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CredentialsPresentServiceServer).ProvePresentation(ctx, req.(*ProvePresentationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CredentialsPresentService_InitiateExchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InitiateExchangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CredentialsPresentServiceServer).InitiateExchange(m, &credentialsPresentServiceInitiateExchangeServer{stream})
}

type CredentialsPresentService_InitiateExchangeServer interface {
	Send(*types.RefreshableVerifiableCredential) error
	grpc.ServerStream
}

type credentialsPresentServiceInitiateExchangeServer struct {
	grpc.ServerStream
}

func (x *credentialsPresentServiceInitiateExchangeServer) Send(m *types.RefreshableVerifiableCredential) error {
	return x.ServerStream.SendMsg(m)
}

func _CredentialsPresentService_ContinueExchange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContinueExchangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CredentialsPresentServiceServer).ContinueExchange(m, &credentialsPresentServiceContinueExchangeServer{stream})
}

type CredentialsPresentService_ContinueExchangeServer interface {
	Send(*types.RefreshableVerifiableCredential) error
	grpc.ServerStream
}

type credentialsPresentServiceContinueExchangeServer struct {
	grpc.ServerStream
}

func (x *credentialsPresentServiceContinueExchangeServer) Send(m *types.RefreshableVerifiableCredential) error {
	return x.ServerStream.SendMsg(m)
}

// CredentialsPresentService_ServiceDesc is the grpc.ServiceDesc for CredentialsPresentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CredentialsPresentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.services.CredentialsPresentService",
	HandlerType: (*CredentialsPresentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "deriveCredential",
			Handler:    _CredentialsPresentService_DeriveCredential_Handler,
		},
		{
			MethodName: "provePresentation",
			Handler:    _CredentialsPresentService_ProvePresentation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getAll",
			Handler:       _CredentialsPresentService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "initiateExchange",
			Handler:       _CredentialsPresentService_InitiateExchange_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "continueExchange",
			Handler:       _CredentialsPresentService_ContinueExchange_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/v1/services/presentation.proto",
}
