// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: api/wallet/services/wallet.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VCWalletControllerClient is the client API for VCWalletController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VCWalletControllerClient interface {
	// Creates new wallet profile and returns error if wallet profile is already created.
	// CreateProfile swagger:route POST /vcwallet/create-profile vcwallet createProfileRequest
	//
	// Responses:
	// 200: createProfileRes
	CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error)
	// Updates an existing wallet profile and returns error if profile doesn't exists.
	// UpdateProfile swagger:route POST /vcwallet/update-profile vcwallet UpdateProfileRequest
	// Caution:
	// - you might lose your existing keys if you change kms options.
	// - you might lose your existing wallet contents if you change storage/EDV options
	// (ex: switching context storage provider or changing EDV settings).
	// Responses:
	// 200: updateProfileRes
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
	// Checks if profile exists for given wallet user.
	// ProfileExists swagger:route GET /vcwallet/profile/{id} vcwallet checkProfile
	// Responses:
	// 200: emptyRes
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	ProfileExists(ctx context.Context, in *WalletUserRequest, opts ...grpc.CallOption) (*WalletUserResponse, error)
	// Open swagger:route POST /vcwallet/open vcwallet unlockWalletReq
	// Unlocks given wallet's key manager instance & content store and
	// returns a authorization token to be used for performing wallet operations.
	// Responses:
	//    default: genericError
	//        200: unlockWalletRes
	Open(ctx context.Context, in *UnlockWalletRequest, opts ...grpc.CallOption) (*UnlockWalletResponse, error)
	// Close swagger:route POST /vcwallet/close vcwallet lockWalletReq
	// Expires token issued to this VC wallet, removes wallet's key manager instance and closes wallet content store.
	// returns response containing bool flag false if token is not found or already expired for this wallet user.
	// Responses:
	//    default: genericError
	//        200: lockWalletRes
	Close(ctx context.Context, in *LockWalletRequest, opts ...grpc.CallOption) (*LockWalletResponse, error)
	// adds given data model to wallet content store.
	// Add swagger:route POST /vcwallet/add vcwallet addContentReq
	// Supported data models:
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#Collection
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#Credential
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#DIDResolutionResponse
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#meta-data
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#connection
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#Key
	//
	// Responses:
	//    default: genericError
	//        200: emptyRes
	Add(ctx context.Context, in *AddContentRequest, opts ...grpc.CallOption) (*AddContentResponse, error)
	// removes given content from wallet content store.
	// Remove swagger:route POST /vcwallet/remove vcwallet removeContentReq
	//
	// removes given content from wallet content store.
	//
	// Supported data models:
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#Collection
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#Credential
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#DIDResolutionResponse
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#meta-data
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#connection
	//
	// Responses:
	//    default: genericError
	//        200: emptyRes
	Remove(ctx context.Context, in *RemoveContentRequest, opts ...grpc.CallOption) (*RemoveContentResponse, error)
	// get swagger:route GET /vcwallet/get vcwallet getContentReq
	// changed POST to GET
	// gets content from wallet content store.
	//
	// Supported data models:
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#Collection
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#Credential
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#DIDResolutionResponse
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#meta-data
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#connection
	//
	// Responses:
	//    default: genericError
	//        200: getContentRes
	Get(ctx context.Context, in *GetContentRequest, opts ...grpc.CallOption) (*GetContentResponse, error)
	// getAll swagger:route GET /vcwallet/getall vcwallet getAllContentReq
	// changed POST to GET
	//
	// gets all contents from wallet content store for given content type.
	//
	// Supported data models:
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#Collection
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#Credential
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#DIDResolutionResponse
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#meta-data
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#connection
	//
	// Responses:
	//    default: genericError
	//        200: getAllContentRes
	GetAll(ctx context.Context, in *GetAllContentRequest, opts ...grpc.CallOption) (*GetAllContentResponse, error)
	// guery swagger:route GET /vcwallet/query vcwallet contentQueryReq
	//
	// runs query against wallet credential contents and returns presentation containing credential results.
	//
	// This function may return multiple presentations as a result based on combination of query types used.
	//
	// https://w3c-ccg.github.io/universal-wallet-interop-spec/#query
	//
	// Supported Query Types:
	//      - https://www.w3.org/TR/json-ld11-framing
	//      - https://identity.foundation/presentation-exchange
	//      - https://w3c-ccg.github.io/vp-request-spec/#query-by-example
	//      - https://w3c-ccg.github.io/vp-request-spec/#did-authentication-request
	//
	// Responses:
	//    default: genericError
	//        200: contentQueryRes
	Query(ctx context.Context, in *ContentQueryRequest, opts ...grpc.CallOption) (*ContentQueryResponse, error)
	// Issue swagger:route POST /vcwallet/issue vcwallet issueReq
	//
	// adds proof to a Verifiable Credential.
	//
	// https://w3c-ccg.github.io/universal-wallet-interop-spec/#issue
	//
	// Responses:
	//    default: genericError
	//        200: issueRes
	Issue(ctx context.Context, in *IssueRequest, opts ...grpc.CallOption) (*IssueResponse, error)
	// prove swagger:route POST /vcwallet/prove vcwallet proveReq
	//
	// produces a Verifiable Presentation.
	//
	// https://w3c-ccg.github.io/universal-wallet-interop-spec/#prove
	//
	// Responses:
	//    default: genericError
	//        200: proveRes
	Prove(ctx context.Context, in *ProveRequest, opts ...grpc.CallOption) (*ProveResponse, error)
	// Verify swagger:route POST /vcwallet/verify vcwallet verifyReq
	//
	// verifies a Verifiable Credential or a Verifiable Presentation.
	//
	// https://w3c-ccg.github.io/universal-wallet-interop-spec/#prove
	//
	// Responses:
	//    default: genericError
	//        200: verifyRes
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error)
	// Derive swagger:route POST /vcwallet/derive vcwallet deriveReq
	//
	// derives a Verifiable Credential.
	//
	// https://w3c-ccg.github.io/universal-wallet-interop-spec/#derive
	//
	// Responses:
	//    default: genericError
	//        200: deriveRes
	Derive(ctx context.Context, in *DeriveRequest, opts ...grpc.CallOption) (*DeriveResponse, error)
	// createKeyPair swagger:route POST /vcwallet/create-key-pair vcwallet createKeyPairReq
	//
	// creates a new key pair from wallet.
	//
	// Responses:
	//    default: genericError
	//        200: createKeyPairRes
	CreateKeyPair(ctx context.Context, in *CreateKeyPairRequest, opts ...grpc.CallOption) (*CreateKeyPairResponse, error)
	// connect swagger:route POST /vcwallet/connect vcwallet connectReq
	//
	// accepts out-of-band invitations and performs DID exchange.
	//
	// Responses:
	//    default: genericError
	//        200: connectRes
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	// accepts out-of-band invitation and sends message proposing presentation
	// from wallet to relying party.
	// ProposePresentation accepts out-of-band invitation and sends message proposing presentation
	// from wallet to relying party.
	// https://w3c-ccg.github.io/universal-wallet-interop-spec/#proposepresentation
	//
	// proposePresentation swagger:route POST /vcwallet/propose-presentation vcwallet proposePresReq
	//
	// accepts out-of-band invitation and sends message proposing presentation
	// from wallet to relying party.
	// https://w3c-ccg.github.io/universal-wallet-interop-spec/#proposepresentation
	//
	// Currently Supporting
	// [0454-present-proof-v2](https://github.com/hyperledger/aries-rfcs/tree/master/features/0454-present-proof-v2)
	//
	// Responses:
	//    default: genericError
	//        200: proposePresRes
	ProposePresentation(ctx context.Context, in *ProposePresentationRequest, opts ...grpc.CallOption) (*ProposePresentationResponse, error)
	// presentProof swagger:route POST /vcwallet/present-proof vcwallet presentProofReq
	//
	// sends message present proof message from wallet to relying party.
	// https://w3c-ccg.github.io/universal-wallet-interop-spec/#presentproof
	//
	// Currently Supporting
	// [0454-present-proof-v2](https://github.com/hyperledger/aries-rfcs/tree/master/features/0454-present-proof-v2)
	//
	// Responses:
	//    default: genericError
	//        200: presentProofRes
	PresentProof(ctx context.Context, in *PresentProofRequest, opts ...grpc.CallOption) (*PresentProofResponse, error)
	// proposeCredential swagger:route POST /vcwallet/propose-credential vcwallet proposeCredReq
	//
	// Sends propose credential message from wallet to issuer and optionally waits for offer credential response.
	// https://w3c-ccg.github.io/universal-wallet-interop-spec/#proposecredential
	//
	// Currently Supporting : 0453-issueCredentialV2
	// https://github.com/hyperledger/aries-rfcs/blob/main/features/0453-issue-credential-v2/README.md
	//
	// Responses:
	//    default: genericError
	//        200: proposeCredRes
	ProposeCredential(ctx context.Context, in *ProposeCredentialRequest, opts ...grpc.CallOption) (*ProposeCredentialResponse, error)
	// requestCredential swagger:route POST /vcwallet/request-credential vcwallet requestCredReq
	//
	// Sends request credential message from wallet to issuer and optionally waits for credential fulfillment.
	// https://w3c-ccg.github.io/universal-wallet-interop-spec/#requestcredential
	//
	// Currently Supporting : 0453-issueCredentialV2
	// https://github.com/hyperledger/aries-rfcs/blob/main/features/0453-issue-credential-v2/README.md
	//
	// Responses:
	//    default: genericError
	//        200: requestCredRes
	RequestCredential(ctx context.Context, in *RequestCredentialRequest, opts ...grpc.CallOption) (*RequestCredentialResponse, error)
	// resolveCredentialManifest swagger:route POST /vcwallet/resolve-credential-manifest vcwallet resolveCredManifest
	//
	// Resolves given credential manifest by credential fulfillment or credential.
	// Supports: https://identity.foundation/credential-manifest/
	//
	// Responses:
	//    default: genericError
	//        200: resolveCredManifest
	ResolveCredentialManifest(ctx context.Context, in *ResolveCredentialManifestRequest, opts ...grpc.CallOption) (*ResolveCredentialManifestResponse, error)
}

type vCWalletControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewVCWalletControllerClient(cc grpc.ClientConnInterface) VCWalletControllerClient {
	return &vCWalletControllerClient{cc}
}

func (c *vCWalletControllerClient) CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error) {
	out := new(CreateProfileResponse)
	err := c.cc.Invoke(ctx, "/api.wallet.services.VCWalletController/createProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCWalletControllerClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	out := new(UpdateProfileResponse)
	err := c.cc.Invoke(ctx, "/api.wallet.services.VCWalletController/updateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCWalletControllerClient) ProfileExists(ctx context.Context, in *WalletUserRequest, opts ...grpc.CallOption) (*WalletUserResponse, error) {
	out := new(WalletUserResponse)
	err := c.cc.Invoke(ctx, "/api.wallet.services.VCWalletController/profileExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCWalletControllerClient) Open(ctx context.Context, in *UnlockWalletRequest, opts ...grpc.CallOption) (*UnlockWalletResponse, error) {
	out := new(UnlockWalletResponse)
	err := c.cc.Invoke(ctx, "/api.wallet.services.VCWalletController/open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCWalletControllerClient) Close(ctx context.Context, in *LockWalletRequest, opts ...grpc.CallOption) (*LockWalletResponse, error) {
	out := new(LockWalletResponse)
	err := c.cc.Invoke(ctx, "/api.wallet.services.VCWalletController/close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCWalletControllerClient) Add(ctx context.Context, in *AddContentRequest, opts ...grpc.CallOption) (*AddContentResponse, error) {
	out := new(AddContentResponse)
	err := c.cc.Invoke(ctx, "/api.wallet.services.VCWalletController/add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCWalletControllerClient) Remove(ctx context.Context, in *RemoveContentRequest, opts ...grpc.CallOption) (*RemoveContentResponse, error) {
	out := new(RemoveContentResponse)
	err := c.cc.Invoke(ctx, "/api.wallet.services.VCWalletController/remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCWalletControllerClient) Get(ctx context.Context, in *GetContentRequest, opts ...grpc.CallOption) (*GetContentResponse, error) {
	out := new(GetContentResponse)
	err := c.cc.Invoke(ctx, "/api.wallet.services.VCWalletController/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCWalletControllerClient) GetAll(ctx context.Context, in *GetAllContentRequest, opts ...grpc.CallOption) (*GetAllContentResponse, error) {
	out := new(GetAllContentResponse)
	err := c.cc.Invoke(ctx, "/api.wallet.services.VCWalletController/getAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCWalletControllerClient) Query(ctx context.Context, in *ContentQueryRequest, opts ...grpc.CallOption) (*ContentQueryResponse, error) {
	out := new(ContentQueryResponse)
	err := c.cc.Invoke(ctx, "/api.wallet.services.VCWalletController/query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCWalletControllerClient) Issue(ctx context.Context, in *IssueRequest, opts ...grpc.CallOption) (*IssueResponse, error) {
	out := new(IssueResponse)
	err := c.cc.Invoke(ctx, "/api.wallet.services.VCWalletController/issue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCWalletControllerClient) Prove(ctx context.Context, in *ProveRequest, opts ...grpc.CallOption) (*ProveResponse, error) {
	out := new(ProveResponse)
	err := c.cc.Invoke(ctx, "/api.wallet.services.VCWalletController/prove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCWalletControllerClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*VerifyResponse, error) {
	out := new(VerifyResponse)
	err := c.cc.Invoke(ctx, "/api.wallet.services.VCWalletController/verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCWalletControllerClient) Derive(ctx context.Context, in *DeriveRequest, opts ...grpc.CallOption) (*DeriveResponse, error) {
	out := new(DeriveResponse)
	err := c.cc.Invoke(ctx, "/api.wallet.services.VCWalletController/derive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCWalletControllerClient) CreateKeyPair(ctx context.Context, in *CreateKeyPairRequest, opts ...grpc.CallOption) (*CreateKeyPairResponse, error) {
	out := new(CreateKeyPairResponse)
	err := c.cc.Invoke(ctx, "/api.wallet.services.VCWalletController/createKeyPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCWalletControllerClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/api.wallet.services.VCWalletController/connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCWalletControllerClient) ProposePresentation(ctx context.Context, in *ProposePresentationRequest, opts ...grpc.CallOption) (*ProposePresentationResponse, error) {
	out := new(ProposePresentationResponse)
	err := c.cc.Invoke(ctx, "/api.wallet.services.VCWalletController/proposePresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCWalletControllerClient) PresentProof(ctx context.Context, in *PresentProofRequest, opts ...grpc.CallOption) (*PresentProofResponse, error) {
	out := new(PresentProofResponse)
	err := c.cc.Invoke(ctx, "/api.wallet.services.VCWalletController/presentProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCWalletControllerClient) ProposeCredential(ctx context.Context, in *ProposeCredentialRequest, opts ...grpc.CallOption) (*ProposeCredentialResponse, error) {
	out := new(ProposeCredentialResponse)
	err := c.cc.Invoke(ctx, "/api.wallet.services.VCWalletController/proposeCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCWalletControllerClient) RequestCredential(ctx context.Context, in *RequestCredentialRequest, opts ...grpc.CallOption) (*RequestCredentialResponse, error) {
	out := new(RequestCredentialResponse)
	err := c.cc.Invoke(ctx, "/api.wallet.services.VCWalletController/requestCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCWalletControllerClient) ResolveCredentialManifest(ctx context.Context, in *ResolveCredentialManifestRequest, opts ...grpc.CallOption) (*ResolveCredentialManifestResponse, error) {
	out := new(ResolveCredentialManifestResponse)
	err := c.cc.Invoke(ctx, "/api.wallet.services.VCWalletController/resolveCredentialManifest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VCWalletControllerServer is the server API for VCWalletController service.
// All implementations must embed UnimplementedVCWalletControllerServer
// for forward compatibility
type VCWalletControllerServer interface {
	// Creates new wallet profile and returns error if wallet profile is already created.
	// CreateProfile swagger:route POST /vcwallet/create-profile vcwallet createProfileRequest
	//
	// Responses:
	// 200: createProfileRes
	CreateProfile(context.Context, *CreateProfileRequest) (*CreateProfileResponse, error)
	// Updates an existing wallet profile and returns error if profile doesn't exists.
	// UpdateProfile swagger:route POST /vcwallet/update-profile vcwallet UpdateProfileRequest
	// Caution:
	// - you might lose your existing keys if you change kms options.
	// - you might lose your existing wallet contents if you change storage/EDV options
	// (ex: switching context storage provider or changing EDV settings).
	// Responses:
	// 200: updateProfileRes
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
	// Checks if profile exists for given wallet user.
	// ProfileExists swagger:route GET /vcwallet/profile/{id} vcwallet checkProfile
	// Responses:
	// 200: emptyRes
	// 400	Bad Request
	// 401	Not Authorized
	// 500	Internal Error
	ProfileExists(context.Context, *WalletUserRequest) (*WalletUserResponse, error)
	// Open swagger:route POST /vcwallet/open vcwallet unlockWalletReq
	// Unlocks given wallet's key manager instance & content store and
	// returns a authorization token to be used for performing wallet operations.
	// Responses:
	//    default: genericError
	//        200: unlockWalletRes
	Open(context.Context, *UnlockWalletRequest) (*UnlockWalletResponse, error)
	// Close swagger:route POST /vcwallet/close vcwallet lockWalletReq
	// Expires token issued to this VC wallet, removes wallet's key manager instance and closes wallet content store.
	// returns response containing bool flag false if token is not found or already expired for this wallet user.
	// Responses:
	//    default: genericError
	//        200: lockWalletRes
	Close(context.Context, *LockWalletRequest) (*LockWalletResponse, error)
	// adds given data model to wallet content store.
	// Add swagger:route POST /vcwallet/add vcwallet addContentReq
	// Supported data models:
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#Collection
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#Credential
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#DIDResolutionResponse
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#meta-data
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#connection
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#Key
	//
	// Responses:
	//    default: genericError
	//        200: emptyRes
	Add(context.Context, *AddContentRequest) (*AddContentResponse, error)
	// removes given content from wallet content store.
	// Remove swagger:route POST /vcwallet/remove vcwallet removeContentReq
	//
	// removes given content from wallet content store.
	//
	// Supported data models:
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#Collection
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#Credential
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#DIDResolutionResponse
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#meta-data
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#connection
	//
	// Responses:
	//    default: genericError
	//        200: emptyRes
	Remove(context.Context, *RemoveContentRequest) (*RemoveContentResponse, error)
	// get swagger:route GET /vcwallet/get vcwallet getContentReq
	// changed POST to GET
	// gets content from wallet content store.
	//
	// Supported data models:
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#Collection
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#Credential
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#DIDResolutionResponse
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#meta-data
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#connection
	//
	// Responses:
	//    default: genericError
	//        200: getContentRes
	Get(context.Context, *GetContentRequest) (*GetContentResponse, error)
	// getAll swagger:route GET /vcwallet/getall vcwallet getAllContentReq
	// changed POST to GET
	//
	// gets all contents from wallet content store for given content type.
	//
	// Supported data models:
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#Collection
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#Credential
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#DIDResolutionResponse
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#meta-data
	//      - https://w3c-ccg.github.io/universal-wallet-interop-spec/#connection
	//
	// Responses:
	//    default: genericError
	//        200: getAllContentRes
	GetAll(context.Context, *GetAllContentRequest) (*GetAllContentResponse, error)
	// guery swagger:route GET /vcwallet/query vcwallet contentQueryReq
	//
	// runs query against wallet credential contents and returns presentation containing credential results.
	//
	// This function may return multiple presentations as a result based on combination of query types used.
	//
	// https://w3c-ccg.github.io/universal-wallet-interop-spec/#query
	//
	// Supported Query Types:
	//      - https://www.w3.org/TR/json-ld11-framing
	//      - https://identity.foundation/presentation-exchange
	//      - https://w3c-ccg.github.io/vp-request-spec/#query-by-example
	//      - https://w3c-ccg.github.io/vp-request-spec/#did-authentication-request
	//
	// Responses:
	//    default: genericError
	//        200: contentQueryRes
	Query(context.Context, *ContentQueryRequest) (*ContentQueryResponse, error)
	// Issue swagger:route POST /vcwallet/issue vcwallet issueReq
	//
	// adds proof to a Verifiable Credential.
	//
	// https://w3c-ccg.github.io/universal-wallet-interop-spec/#issue
	//
	// Responses:
	//    default: genericError
	//        200: issueRes
	Issue(context.Context, *IssueRequest) (*IssueResponse, error)
	// prove swagger:route POST /vcwallet/prove vcwallet proveReq
	//
	// produces a Verifiable Presentation.
	//
	// https://w3c-ccg.github.io/universal-wallet-interop-spec/#prove
	//
	// Responses:
	//    default: genericError
	//        200: proveRes
	Prove(context.Context, *ProveRequest) (*ProveResponse, error)
	// Verify swagger:route POST /vcwallet/verify vcwallet verifyReq
	//
	// verifies a Verifiable Credential or a Verifiable Presentation.
	//
	// https://w3c-ccg.github.io/universal-wallet-interop-spec/#prove
	//
	// Responses:
	//    default: genericError
	//        200: verifyRes
	Verify(context.Context, *VerifyRequest) (*VerifyResponse, error)
	// Derive swagger:route POST /vcwallet/derive vcwallet deriveReq
	//
	// derives a Verifiable Credential.
	//
	// https://w3c-ccg.github.io/universal-wallet-interop-spec/#derive
	//
	// Responses:
	//    default: genericError
	//        200: deriveRes
	Derive(context.Context, *DeriveRequest) (*DeriveResponse, error)
	// createKeyPair swagger:route POST /vcwallet/create-key-pair vcwallet createKeyPairReq
	//
	// creates a new key pair from wallet.
	//
	// Responses:
	//    default: genericError
	//        200: createKeyPairRes
	CreateKeyPair(context.Context, *CreateKeyPairRequest) (*CreateKeyPairResponse, error)
	// connect swagger:route POST /vcwallet/connect vcwallet connectReq
	//
	// accepts out-of-band invitations and performs DID exchange.
	//
	// Responses:
	//    default: genericError
	//        200: connectRes
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	// accepts out-of-band invitation and sends message proposing presentation
	// from wallet to relying party.
	// ProposePresentation accepts out-of-band invitation and sends message proposing presentation
	// from wallet to relying party.
	// https://w3c-ccg.github.io/universal-wallet-interop-spec/#proposepresentation
	//
	// proposePresentation swagger:route POST /vcwallet/propose-presentation vcwallet proposePresReq
	//
	// accepts out-of-band invitation and sends message proposing presentation
	// from wallet to relying party.
	// https://w3c-ccg.github.io/universal-wallet-interop-spec/#proposepresentation
	//
	// Currently Supporting
	// [0454-present-proof-v2](https://github.com/hyperledger/aries-rfcs/tree/master/features/0454-present-proof-v2)
	//
	// Responses:
	//    default: genericError
	//        200: proposePresRes
	ProposePresentation(context.Context, *ProposePresentationRequest) (*ProposePresentationResponse, error)
	// presentProof swagger:route POST /vcwallet/present-proof vcwallet presentProofReq
	//
	// sends message present proof message from wallet to relying party.
	// https://w3c-ccg.github.io/universal-wallet-interop-spec/#presentproof
	//
	// Currently Supporting
	// [0454-present-proof-v2](https://github.com/hyperledger/aries-rfcs/tree/master/features/0454-present-proof-v2)
	//
	// Responses:
	//    default: genericError
	//        200: presentProofRes
	PresentProof(context.Context, *PresentProofRequest) (*PresentProofResponse, error)
	// proposeCredential swagger:route POST /vcwallet/propose-credential vcwallet proposeCredReq
	//
	// Sends propose credential message from wallet to issuer and optionally waits for offer credential response.
	// https://w3c-ccg.github.io/universal-wallet-interop-spec/#proposecredential
	//
	// Currently Supporting : 0453-issueCredentialV2
	// https://github.com/hyperledger/aries-rfcs/blob/main/features/0453-issue-credential-v2/README.md
	//
	// Responses:
	//    default: genericError
	//        200: proposeCredRes
	ProposeCredential(context.Context, *ProposeCredentialRequest) (*ProposeCredentialResponse, error)
	// requestCredential swagger:route POST /vcwallet/request-credential vcwallet requestCredReq
	//
	// Sends request credential message from wallet to issuer and optionally waits for credential fulfillment.
	// https://w3c-ccg.github.io/universal-wallet-interop-spec/#requestcredential
	//
	// Currently Supporting : 0453-issueCredentialV2
	// https://github.com/hyperledger/aries-rfcs/blob/main/features/0453-issue-credential-v2/README.md
	//
	// Responses:
	//    default: genericError
	//        200: requestCredRes
	RequestCredential(context.Context, *RequestCredentialRequest) (*RequestCredentialResponse, error)
	// resolveCredentialManifest swagger:route POST /vcwallet/resolve-credential-manifest vcwallet resolveCredManifest
	//
	// Resolves given credential manifest by credential fulfillment or credential.
	// Supports: https://identity.foundation/credential-manifest/
	//
	// Responses:
	//    default: genericError
	//        200: resolveCredManifest
	ResolveCredentialManifest(context.Context, *ResolveCredentialManifestRequest) (*ResolveCredentialManifestResponse, error)
	mustEmbedUnimplementedVCWalletControllerServer()
}

// UnimplementedVCWalletControllerServer must be embedded to have forward compatible implementations.
type UnimplementedVCWalletControllerServer struct {
}

func (UnimplementedVCWalletControllerServer) CreateProfile(context.Context, *CreateProfileRequest) (*CreateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedVCWalletControllerServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedVCWalletControllerServer) ProfileExists(context.Context, *WalletUserRequest) (*WalletUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileExists not implemented")
}
func (UnimplementedVCWalletControllerServer) Open(context.Context, *UnlockWalletRequest) (*UnlockWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedVCWalletControllerServer) Close(context.Context, *LockWalletRequest) (*LockWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedVCWalletControllerServer) Add(context.Context, *AddContentRequest) (*AddContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedVCWalletControllerServer) Remove(context.Context, *RemoveContentRequest) (*RemoveContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedVCWalletControllerServer) Get(context.Context, *GetContentRequest) (*GetContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedVCWalletControllerServer) GetAll(context.Context, *GetAllContentRequest) (*GetAllContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedVCWalletControllerServer) Query(context.Context, *ContentQueryRequest) (*ContentQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedVCWalletControllerServer) Issue(context.Context, *IssueRequest) (*IssueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Issue not implemented")
}
func (UnimplementedVCWalletControllerServer) Prove(context.Context, *ProveRequest) (*ProveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prove not implemented")
}
func (UnimplementedVCWalletControllerServer) Verify(context.Context, *VerifyRequest) (*VerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedVCWalletControllerServer) Derive(context.Context, *DeriveRequest) (*DeriveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Derive not implemented")
}
func (UnimplementedVCWalletControllerServer) CreateKeyPair(context.Context, *CreateKeyPairRequest) (*CreateKeyPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKeyPair not implemented")
}
func (UnimplementedVCWalletControllerServer) Connect(context.Context, *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedVCWalletControllerServer) ProposePresentation(context.Context, *ProposePresentationRequest) (*ProposePresentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposePresentation not implemented")
}
func (UnimplementedVCWalletControllerServer) PresentProof(context.Context, *PresentProofRequest) (*PresentProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresentProof not implemented")
}
func (UnimplementedVCWalletControllerServer) ProposeCredential(context.Context, *ProposeCredentialRequest) (*ProposeCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposeCredential not implemented")
}
func (UnimplementedVCWalletControllerServer) RequestCredential(context.Context, *RequestCredentialRequest) (*RequestCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestCredential not implemented")
}
func (UnimplementedVCWalletControllerServer) ResolveCredentialManifest(context.Context, *ResolveCredentialManifestRequest) (*ResolveCredentialManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveCredentialManifest not implemented")
}
func (UnimplementedVCWalletControllerServer) mustEmbedUnimplementedVCWalletControllerServer() {}

// UnsafeVCWalletControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VCWalletControllerServer will
// result in compilation errors.
type UnsafeVCWalletControllerServer interface {
	mustEmbedUnimplementedVCWalletControllerServer()
}

func RegisterVCWalletControllerServer(s grpc.ServiceRegistrar, srv VCWalletControllerServer) {
	s.RegisterService(&VCWalletController_ServiceDesc, srv)
}

func _VCWalletController_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCWalletControllerServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wallet.services.VCWalletController/createProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCWalletControllerServer).CreateProfile(ctx, req.(*CreateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCWalletController_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCWalletControllerServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wallet.services.VCWalletController/updateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCWalletControllerServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCWalletController_ProfileExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCWalletControllerServer).ProfileExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wallet.services.VCWalletController/profileExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCWalletControllerServer).ProfileExists(ctx, req.(*WalletUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCWalletController_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCWalletControllerServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wallet.services.VCWalletController/open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCWalletControllerServer).Open(ctx, req.(*UnlockWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCWalletController_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCWalletControllerServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wallet.services.VCWalletController/close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCWalletControllerServer).Close(ctx, req.(*LockWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCWalletController_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCWalletControllerServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wallet.services.VCWalletController/add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCWalletControllerServer).Add(ctx, req.(*AddContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCWalletController_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCWalletControllerServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wallet.services.VCWalletController/remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCWalletControllerServer).Remove(ctx, req.(*RemoveContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCWalletController_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCWalletControllerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wallet.services.VCWalletController/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCWalletControllerServer).Get(ctx, req.(*GetContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCWalletController_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCWalletControllerServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wallet.services.VCWalletController/getAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCWalletControllerServer).GetAll(ctx, req.(*GetAllContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCWalletController_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCWalletControllerServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wallet.services.VCWalletController/query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCWalletControllerServer).Query(ctx, req.(*ContentQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCWalletController_Issue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCWalletControllerServer).Issue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wallet.services.VCWalletController/issue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCWalletControllerServer).Issue(ctx, req.(*IssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCWalletController_Prove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCWalletControllerServer).Prove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wallet.services.VCWalletController/prove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCWalletControllerServer).Prove(ctx, req.(*ProveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCWalletController_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCWalletControllerServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wallet.services.VCWalletController/verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCWalletControllerServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCWalletController_Derive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeriveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCWalletControllerServer).Derive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wallet.services.VCWalletController/derive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCWalletControllerServer).Derive(ctx, req.(*DeriveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCWalletController_CreateKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCWalletControllerServer).CreateKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wallet.services.VCWalletController/createKeyPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCWalletControllerServer).CreateKeyPair(ctx, req.(*CreateKeyPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCWalletController_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCWalletControllerServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wallet.services.VCWalletController/connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCWalletControllerServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCWalletController_ProposePresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposePresentationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCWalletControllerServer).ProposePresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wallet.services.VCWalletController/proposePresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCWalletControllerServer).ProposePresentation(ctx, req.(*ProposePresentationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCWalletController_PresentProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PresentProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCWalletControllerServer).PresentProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wallet.services.VCWalletController/presentProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCWalletControllerServer).PresentProof(ctx, req.(*PresentProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCWalletController_ProposeCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposeCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCWalletControllerServer).ProposeCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wallet.services.VCWalletController/proposeCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCWalletControllerServer).ProposeCredential(ctx, req.(*ProposeCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCWalletController_RequestCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCWalletControllerServer).RequestCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wallet.services.VCWalletController/requestCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCWalletControllerServer).RequestCredential(ctx, req.(*RequestCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCWalletController_ResolveCredentialManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveCredentialManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCWalletControllerServer).ResolveCredentialManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.wallet.services.VCWalletController/resolveCredentialManifest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCWalletControllerServer).ResolveCredentialManifest(ctx, req.(*ResolveCredentialManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VCWalletController_ServiceDesc is the grpc.ServiceDesc for VCWalletController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VCWalletController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.wallet.services.VCWalletController",
	HandlerType: (*VCWalletControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createProfile",
			Handler:    _VCWalletController_CreateProfile_Handler,
		},
		{
			MethodName: "updateProfile",
			Handler:    _VCWalletController_UpdateProfile_Handler,
		},
		{
			MethodName: "profileExists",
			Handler:    _VCWalletController_ProfileExists_Handler,
		},
		{
			MethodName: "open",
			Handler:    _VCWalletController_Open_Handler,
		},
		{
			MethodName: "close",
			Handler:    _VCWalletController_Close_Handler,
		},
		{
			MethodName: "add",
			Handler:    _VCWalletController_Add_Handler,
		},
		{
			MethodName: "remove",
			Handler:    _VCWalletController_Remove_Handler,
		},
		{
			MethodName: "get",
			Handler:    _VCWalletController_Get_Handler,
		},
		{
			MethodName: "getAll",
			Handler:    _VCWalletController_GetAll_Handler,
		},
		{
			MethodName: "query",
			Handler:    _VCWalletController_Query_Handler,
		},
		{
			MethodName: "issue",
			Handler:    _VCWalletController_Issue_Handler,
		},
		{
			MethodName: "prove",
			Handler:    _VCWalletController_Prove_Handler,
		},
		{
			MethodName: "verify",
			Handler:    _VCWalletController_Verify_Handler,
		},
		{
			MethodName: "derive",
			Handler:    _VCWalletController_Derive_Handler,
		},
		{
			MethodName: "createKeyPair",
			Handler:    _VCWalletController_CreateKeyPair_Handler,
		},
		{
			MethodName: "connect",
			Handler:    _VCWalletController_Connect_Handler,
		},
		{
			MethodName: "proposePresentation",
			Handler:    _VCWalletController_ProposePresentation_Handler,
		},
		{
			MethodName: "presentProof",
			Handler:    _VCWalletController_PresentProof_Handler,
		},
		{
			MethodName: "proposeCredential",
			Handler:    _VCWalletController_ProposeCredential_Handler,
		},
		{
			MethodName: "requestCredential",
			Handler:    _VCWalletController_RequestCredential_Handler,
		},
		{
			MethodName: "resolveCredentialManifest",
			Handler:    _VCWalletController_ResolveCredentialManifest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/wallet/services/wallet.proto",
}
