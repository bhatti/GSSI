syntax = "proto3";

package api.wallet.types;

// References
// https://w3c-ccg.github.io/universal-wallet-interop-spec/#interface

option go_package = "github.com/bhatti/GSSI/api/wallet/types";

import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";

// Profile of VC wallet contains wallet specific settings of wallet user to be remembered.
// swagger:model
message Profile {
  // ID unique identifier assigned to this wallet profile.
  string id = 1;

  // Unique identifier to identify wallet profile user.
  string userID = 2;

  // Encrypted MasterLock is for localkms.
  // passphrase for local kms for key operations.
  // Optional, if this option is provided then wallet for this profile will use local KMS for key operations.
  string localKMSPassphrase = 3; //masterLockCipher

  // KeyServerURL for remotekms.
  // passphrase for web/remote kms for key operations.
  // Optional, if this option is provided then wallet for this profile will use web/remote KMS for key operations.
  string keyServerURL = 4;

  // EDV configuration
  // edv configuration for storing wallet contents for this profile
  // Optional, if not provided then agent storage provider will be used as store provider.
  EDVConfiguration edvConfiguration = 5;
}


// EDVConfiguration contains configuration for EDV settings for profile creation.
// Encrypted Data Vault https://identity.foundation/confidential-storage/#encrypted-data-vault
message EDVConfiguration {
  // EDV server URL for storing wallet contents.
  string serverURL = 1;

  // EDV vault ID for storing the wallet contents.
  string vaultID = 2;

  // Encryption key ID of already existing key in wallet profile kms.
  // If profile is using localkms then wallet will create this key set for wallet user.
  string encryptionKID = 3;

  // MAC operation key ID of already existing key in wallet profile kms.
  // If profile is using localkms then wallet will create this key set for wallet user.
  string macKID = 4;
}

// UnlockAuth contains different options for authorizing access to wallet's EDV content store & webkms.
// swagger:model
message UnlockAuth {
  // Http header 'authorization' bearer token to be used.
  // Optional, only if required by wallet user (for webkms or edv).
  string authToken = 1;

  // Http header 'authorization' GNAP token to be used.
  // Optional, only if required by wallet user (for webkms or edv).
  string gnapToken = 2;

  // Capability if ZCAP sign header feature to be used for authorizing access.
  // Optional, can be used only if ZCAP sign header feature is configured with command controller.
  string capability = 3;

  // AuthZKeyStoreURL if ZCAP sign header feature to be used for authorizing access.
  // Optional, can be used only if ZCAP sign header feature is configured with command controller.
  string authzKeyStoreURL = 4;

  // SecretShare if ZCAP sign header feature to be used for authorizing access.
  // Optional, can be used only if ZCAP sign header feature is configured with command controller.
  string secretShare = 5;
}

// WalletAuth contains wallet auth parameters for performing wallet operations.
// swagger:model
message WalletAuth {
  // Authorization token for performing wallet operations.
  string auth = 1;

  // ID of wallet user.
  string userID = 2;
}

// QueryParams contains credential queries for querying credential from wallet.
// Refer https://w3c-ccg.github.io/vp-request-spec/#format for more details.
message QueryParams {
  // Type of the query.
  // Allowed values  'QueryByExample', 'QueryByFrame', 'PresentationExchange', 'DIDAuth'
  string type = 1;

  // Query can contain one or more credential queries.
  repeated bytes credentialQuery = 2; // json raw-message
}

// DeriveOptions model containing options for deriving a credential.
//
message DeriveOptions {
  // Frame is JSON-LD frame used for selective disclosure.
  google.protobuf.Any frame = 1; // map[string]interface{}
  // Nonce to prove uniqueness or freshness of the proof.
  string nonce = 2;
}

// KeyPair is response of creating key pair inside wallet.
message KeyPair {
  // base64 encoded key ID of the key created.
  string keyID = 1;
  // base64 encoded public key of the key pair created.
  string publicKey = 2;
}


// ConnectOpts is option for accepting out-of-band invitation and to perform DID exchange.
message ConnectOpts {
  // Label to be shared with the other agent during the subsequent DID exchange.
  string myLabel = 1;

  // router connections to be used to establish connection.
  repeated string routerConnections = 2;

  // DID to be used when reusing a connection.
  string reuseConnection = 3;

  // To use any recognized DID in the services array for a reusable connection.
  bool reuseAnyConnection = 4;

  // Timeout (in milliseconds) waiting for connection status to be completed.
  google.protobuf.Duration timeout = 5;
}


// CredentialInteractionStatus holds the status of credential share/issuance interaction from wallet.
// Typically holds web redirect info of credential interaction conclusion or problem-report.
message CredentialInteractionStatus {
  // One of the status present proof or issue credential interaction
  // Refer https://github.com/hyperledger/aries-rfcs/blob/main/features/0015-acks/README.md#ack-status.
  string status = 1;
  // Optional web redirect URL info sent by verifier.
  string url = 2; // redirectUrl
}
