syntax = "proto3";

package api.wallet.types;

// References
// https://w3c-ccg.github.io/universal-wallet-interop-spec/#interface

option go_package = "github.com/bhatti/GSSI/api/wallet/types";

import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "api/vc/types/credential.proto";
import "api/vc/types/presentation.proto";
import "api/did/doc/types/outofband.proto";
import "api/did/presentproof/types/presentproof.proto";


// EDVConfiguration contains configuration for EDV settings for profile creation.
message EDVConfiguration {
  // EDV server URL for storing wallet contents.
  string serverURL = 1;
  string vaultID = 2;

  // Encryption key ID of already existing key in wallet profile kms.
  // If profile is using localkms then wallet will create this key set for wallet user.
  string encryptionKID = 3;

  // MAC operation key ID of already existing key in wallet profile kms.
  // If profile is using localkms then wallet will create this key set for wallet user.
  string macKID = 4;
}

// UnlockAuth contains different options for authorizing access to wallet's EDV content store & webkms.
message UnlockAuth {
  // Http header 'authorization' bearer token to be used.
  // Optional, only if required by wallet user (for webkms or edv).
  string authToken = 1;

  // Http header 'authorization' GNAP token to be used.
  // Optional, only if required by wallet user (for webkms or edv).
  string gnapToken = 2;

  // Capability if ZCAP sign header feature to be used for authorizing access.
  // Optional, can be used only if ZCAP sign header feature is configured with command controller.
  string capability = 3;

  // AuthZKeyStoreURL if ZCAP sign header feature to be used for authorizing access.
  // Optional, can be used only if ZCAP sign header feature is configured with command controller.
  string authzKeyStoreURL = 4;

  // SecretShare if ZCAP sign header feature to be used for authorizing access.
  // Optional, can be used only if ZCAP sign header feature is configured with command controller.
  string secretShare = 5;
}

// CreateOrUpdateProfileRequest is request model for
// creating a new wallet profile or updating an existing wallet profile.
message CreateOrUpdateProfileRequest {
  // Unique identifier to identify wallet user
  string userID = 1;

  // passphrase for local kms for key operations.
  // Optional, if this option is provided then wallet for this profile will use local KMS for key operations.
  string localKMSPassphrase = 2;

  // passphrase for web/remote kms for key operations.
  // Optional, if this option is provided then wallet for this profile will use web/remote KMS for key operations.
  string keyStoreURL = 3;

  // edv configuration for storing wallet contents for this profile
  // Optional, if not provided then agent storage provider will be used as store provider.
  EDVConfiguration edvConfiguration = 4;
}


// UnlockWalletRequest contains different options for unlocking wallet.
message UnlockWalletRequest {
  // user ID of the wallet to be unlocked.
  string userID = 1;

  // passphrase for local kms for key operations.
  // Optional, to be used if profile for this wallet user is setup with local KMS.
  string localKMSPassphrase = 2;

  // WebKMSAuth for authorizing acccess to web/remote kms.
  // Optional, to be used if profile for this wallet user is setup with web/remote KMS.
  UnlockAuth webKMSAuth = 3;

  // Options for authorizing access to wallet's EDV content store.
  // Optional, to be used only if profile for this wallet user is setup to use EDV as content store.
  UnlockAuth edvUnlocks = 4;

  // Time duration in milliseconds after which wallet will expire its unlock status.
  google.protobuf.Duration expiry = 5;
}


// UnlockWalletResponse contains response for wallet unlock operation.
message UnlockWalletResponse {
  // Token for granting access to wallet for subsequent wallet operations.
  string token = 1;
}

// LockWalletRequest contains options for locking wallet.
message LockWalletRequest {
  // user ID of the wallet to be locked.
  string userID = 1;
}

// LockWalletResponse contains response for wallet lock operation.
message LockWalletResponse {
  // Closed status of the wallet lock operation.
  // if true, wallet is closed successfully
  // if false, wallet is already closed or never unlocked.
  bool closed = 1;
}

// WalletAuth contains wallet auth parameters for performing wallet operations.
message WalletAuth {
  // Authorization token for performing wallet operations.
  string auth = 1;

  // ID of wallet user.
  string userID = 2;
}

// WalletUser contains wallet user info for performing profile operations.
message WalletUser {
  // ID of wallet user.
  string userID = 1;
}

// AddContentRequest is request for adding a content to wallet.
message AddContentRequest {
  // WalletAuth
  // Authorization token for performing wallet operations.
  string auth = 1;

  // ID of wallet user.
  string userID = 2;

  // type of the content to be added to the wallet.
  // supported types: collection, credential, didResolutionResponse, metadata, connection, key
  string contentType = 3;

  // content to be added to wallet content store.
  bytes content = 4; // json

  // ID of the wallet collection to which this content should belong.
  string collectionID = 5;
}

// RemoveContentRequest is request for removing a content from wallet.
message RemoveContentRequest {
  ///WalletAuth
  // Authorization token for performing wallet operations.
  string auth = 1;

  // ID of wallet user.
  string userID = 2;

  // type of the content to be removed from the wallet.
  // supported types: collection, credential, didResolutionResponse, metadata, connection
  string contentType = 3;

  // ID of the content to be removed from wallet
  string contentID = 4;
}


// GetContentRequest is request for getting a content from wallet.
message GetContentRequest {
  //WalletAuth
  // Authorization token for performing wallet operations.
  string auth = 1;

  // ID of wallet user.
  string userID = 2;


  // type of the content to be returned from wallet.
  // supported types: collection, credential, didResolutionResponse, metadata, connection
  string contentType = 3;

  // ID of the content to be returned from wallet
  string contentID = 4;
}

// GetContentResponse response for get content from wallet operation.
message GetContentResponse {
  // type of the content to be added to the wallet.
  string contentType = 1;

  // content retrieved from wallet content store.
  bytes content = 2;
}

// GetAllContentRequest is request for getting all contents from wallet for given content type.
message GetAllContentRequest {
  //WalletAuth
  // Authorization token for performing wallet operations.
  string auth = 1;

  // ID of wallet user.
  string userID = 2;


  // type of the contents to be returned from wallet.
  // supported types: collection, credential, didResolutionResponse, metadata, connection
  string contentType = 3;

  // ID of the collection on which the response contents to be filtered.
  string collectionID = 4;
}

// GetAllContentResponse response for get all content by content type wallet operation.
message GetAllContentResponse {
  // contents retrieved from wallet content store.
  // map of content ID to content.
  map<string, bytes> contents = 1;// json
}

// QueryParams contains credential queries for querying credential from wallet.
// Refer https://w3c-ccg.github.io/vp-request-spec/#format for more details.
message QueryParams {
  // Type of the query.
  // Allowed values  'QueryByExample', 'QueryByFrame', 'PresentationExchange', 'DIDAuth'
  string type = 1;

  // Query can contain one or more credential queries.
  repeated bytes credentialQuery = 2; // json raw-message
}

// ContentQueryRequest is request model for querying wallet contents.
message ContentQueryRequest {
  //WalletAuth
  // Authorization token for performing wallet operations.
  string auth = 1;

  // ID of wallet user.
  string userID = 2;

  // credential query(s) for querying wallet contents.
  repeated QueryParams query = 3;
}




// ContentQueryResponse response for wallet content query.
message ContentQueryResponse {
  // response presentation(s) containing query results.
  repeated api.vc.types.VerifiablePresentation results = 1;
}

// IssueRequest is request model for issuing credential from wallet.
message IssueRequest {
  //WalletAuth
  // Authorization token for performing wallet operations.
  string auth = 1;

  // ID of wallet user.
  string userID = 2;

  // raw credential to be issued from wallet.
  api.vc.types.VerifiableCredential credential = 3;

  // proof options for issuing credential
  api.vc.types.ProofOptions proofOptions = 4;
}

// IssueResponse is response for issue credential interface from wallet.
message IssueResponse {
  // credential issued.
  api.vc.types.VerifiableCredential credential = 1;
}

// ProveRequest for producing verifiable presentation from wallet.
// Contains options for proofs and credential. Any combination of credential option can be mixed.
message ProveRequest {
  //WalletAuth
  // Authorization token for performing wallet operations.
  string auth = 1;

  // ID of wallet user.
  string userID = 2;

  // IDs of credentials already saved in wallet content store.
  repeated string storedCredentials = 3;

  // List of raw credentials to be presented.
  repeated api.vc.types.VerifiableCredential rawCredentials = 4; // credentials

  // Presentation to be proved.
  api.vc.types.VerifiablePresentation presentation = 5;

  // proof options for issuing credential.
  api.vc.types.ProofOptions proofOptions = 6;
}

// ProveResponse contains response presentation from prove operation.
message ProveResponse {
  // presentation response from prove operation.
  api.vc.types.VerifiablePresentation presentation = 1;
}


// VerifyRequest request for verifying a credential or presentation from wallet.
// Any one of the credential option should be used.
message VerifyRequest {
  //WalletAuth
  // Authorization token for performing wallet operations.
  string auth = 1;

  // ID of wallet user.
  string userID = 2;

  // ID of the credential already saved in wallet content store.
  // optional, if provided then this option takes precedence over other options.
  string storedCredentialID = 3;

  // List of raw credential to be presented.
  // optional, if provided then this option takes precedence over presentation options.
  repeated api.vc.types.VerifiableCredential rawCredentials = 4; // credentials

  // Presentation to be proved.
  // optional, will be used only if other options are not provided.
  api.vc.types.VerifiablePresentation presentation = 5;
}

// VerifyResponse is response model for wallet verify operation.
message VerifyResponse {
  // if true then verification is successful.
  bool verified = 1;

  // error details if verified is false.
  string error = 2;
}

// DeriveOptions model containing options for deriving a credential.
//
message DeriveOptions {
  // Frame is JSON-LD frame used for selective disclosure.
  google.protobuf.Any frame = 1; // map[string]interface{}
  // Nonce to prove uniqueness or freshness of the proof.
  string nonce = 2;
}

// DeriveRequest is request model for deriving a credential from wallet.
message DeriveRequest {
  //WalletAuth
  // Authorization token for performing wallet operations.
  string auth = 1;

  // ID of wallet user.
  string userID = 2;

  // ID of the credential already saved in wallet content store.
  // optional, if provided then this option takes precedence.
  string storedCredentialID = 3;

  // List of raw credential to be presented.
  // optional, will be used only if other options is not provided.
  api.vc.types.VerifiableCredential rawCredentials = 4; // credentials

  // DeriveOptions options for deriving credential
  DeriveOptions deriveOption = 5;
}


// DeriveResponse is response for derived credential operation.
message DeriveResponse {
  // credential derived.
  api.vc.types.VerifiableCredential credential = 1; // credentials
}

// CreateKeyPairRequest is request model for creating key pair from wallet.
message CreateKeyPairRequest {
  //WalletAuth
  // Authorization token for performing wallet operations.
  string auth = 1;

  // ID of wallet user.
  string userID = 2;

  // type of the key to be created.
  string keyType = 3;
}

// KeyPair is response of creating key pair inside wallet.
message KeyPair {
  // base64 encoded key ID of the key created.
  string keyID = 1;
  // base64 encoded public key of the key pair created.
  string publicKey = 2;
}


// CreateKeyPairResponse is response model for creating key pair from wallet.
message CreateKeyPairResponse {
  // wallet.KeyPair
  // base64 encoded key ID of the key created.
  string keyID = 1;
  // base64 encoded public key of the key pair created.
  string publicKey = 2;
}

// ConnectRequest is request model for wallet DID connect operation.
message ConnectRequest {
  //WalletAuth
  // Authorization token for performing wallet operations.
  string auth = 1;

  // ID of wallet user.
  string userID = 2;

  // out-of-band invitation to establish connection.
  api.did.doc.types.Invitation invitation = 3;
  // ConnectOpts
  // Label to be shared with the other agent during the subsequent DID exchange.
  string myLabel = 4;

  // router connections to be used to establish connection.
  repeated string routerConnections = 5;

  // DID to be used when reusing a connection.
  string reuseConnection = 6;

  // To use any recognized DID in the services array for a reusable connection.
  bool reuseAnyConnection = 7;

  // Timeout (in milliseconds) waiting for connection status to be completed.
  google.protobuf.Duration timeout = 8;
}

// ConnectOpts is option for accepting out-of-band invitation and to perform DID exchange.
message ConnectOpts {
  // Label to be shared with the other agent during the subsequent DID exchange.
  string myLabel = 1;

  // router connections to be used to establish connection.
  repeated string routerConnections = 2;

  // DID to be used when reusing a connection.
  string reuseConnection = 3;

  // To use any recognized DID in the services array for a reusable connection.
  bool reuseAnyConnection = 4;

  // Timeout (in milliseconds) waiting for connection status to be completed.
  google.protobuf.Duration timeout = 5;
}


// ConnectResponse is response model from wallet DID connection operation.
message ConnectResponse {
  // connection ID of the connection established.
  string connectionID = 1;
}

// ProposePresentationRequest is request model for performing propose presentation operation from wallet.
message ProposePresentationRequest {
  //WalletAuth
  // Authorization token for performing wallet operations.
  string auth = 1;

  // ID of wallet user.
  string userID = 2;

  // WalletAuth

  api.did.doc.types.GenericInvitation invitation = 3;

  // Optional From DID option to customize sender DID.
  string from = 4;

  // Timeout (in milliseconds) waiting for operation to be completed.
  google.protobuf.Duration timeout = 5;

  // Options for accepting out-of-band invitation and to perform DID exchange (for DIDComm V1).
  ConnectOpts connectOptions = 6;
}

// ProposePresentationResponse is response model from wallet propose presentation operation.
message ProposePresentationResponse {
  // response request presentation message from  relying party.
  map<string, google.protobuf.Any> presentationRequest = 1;
}


// PresentProofRequest is request model from wallet present proof operation.
// Supported attachment MIME type "application/ld+json".
message PresentProofRequest {
  //WalletAuth
  // Authorization token for performing wallet operations.
  string auth = 1;

  // ID of wallet user.
  string userID = 2;

  // Thread ID from request presentation response
  string threadId = 3;

  // presentation to be sent as part of present proof message.
  api.did.presentproof.types.GenericPresentation presentation = 4; // raw json

  // If true then wallet will wait for present proof protocol status to be
  // done or abandoned till given Timeout.
  // Also, will return web redirect info if found in acknowledgment message or problem-report.
  bool waitForDone = 5;

  // Optional timeout (in milliseconds) waiting for present proof operation to be done.
  // will be taken into account only when WaitForDone is enabled.
  // If not provided then wallet will use its default timeout.
  google.protobuf.Duration waitForDoneTimeout = 6;
}

// CredentialInteractionStatus holds the status of credential share/issuance interaction from wallet.
// Typically holds web redirect info of credential interaction conclusion or problem-report.
message CredentialInteractionStatus {
  // One of the status present proof or issue credential interaction
  // Refer https://github.com/hyperledger/aries-rfcs/blob/main/features/0015-acks/README.md#ack-status.
  string status = 1;
  // Optional web redirect URL info sent by verifier.
  string url = 2; // redirectUrl
}

// PresentProofResponse is response model from wallet present proof operation.
message PresentProofResponse {
  string status = 1;
  // Optional web redirect URL info sent by verifier.
  string url = 2; // redirectUrl
}

// ProposeCredentialRequest is request model for performing propose credential operation from wallet.
message ProposeCredentialRequest {
  //WalletAuth
  // Authorization token for performing wallet operations.
  string auth = 1;

  // ID of wallet user.
  string userID = 2;

  // out-of-band invitation to establish connection and send propose credential message.
  api.did.doc.types.GenericInvitation invitation = 3;

  // Optional From DID option to customize sender DID.
  string from = 4;

  // Timeout (in milliseconds) waiting for operation to be completed.
  google.protobuf.Duration waitForDoneTimeout = 5;

  // Options for accepting out-of-band invitation and to perform DID exchange (for DIDComm V1).
  ConnectOpts connectOptions = 6;
}

// ProposeCredentialResponse is response model from wallet propose credential operation.
message ProposeCredentialResponse {
  // response offer credential message from issuer.
  map<string, google.protobuf.Any> offerCredential = 1;
}

// RequestCredentialRequest is request model from wallet request credential operation.
// Supported attachment MIME type "application/ld+json".
message RequestCredentialRequest {
  //WalletAuth
  // Authorization token for performing wallet operations.
  string auth = 1;

  // ID of wallet user.
  string userID = 2;

  // Thread ID from offer credential response previously received during propose credential interaction.
  string threadID = 3;

  // presentation to be sent as part of request credential message.
  api.did.presentproof.types.GenericPresentation presentation = 4; // raw json

  // If true then wallet will wait till it receives credential fulfillment response from issuer for given Timeout.
  // Also, will return web redirect info if found in fulfillment message or problem-report.
  bool waitForDone = 5;

  // Optional timeout (in milliseconds) waiting for credential fulfillment to arrive.
  // will be taken into account only when WaitForDone is enabled.
  // If not provided then wallet will use its default timeout.
  google.protobuf.Duration waitForDoneTimeout = 6;
}

// RequestCredentialResponse is response model from wallet request credential operation.
message RequestCredentialResponse {
  // One of the status present proof or issue credential interaction
  // Refer https://github.com/hyperledger/aries-rfcs/blob/main/features/0015-acks/README.md#ack-status.
  string status = 1;
  // Optional web redirect URL info sent by verifier.
  string url = 2; // redirectUrl
}

// ResolveCredentialManifestRequest is request model for resolving credential manifest from wallet.
message ResolveCredentialManifestRequest {
  //WalletAuth
  // Authorization token for performing wallet operations.
  string auth = 1;

  // ID of wallet user.
  string userID = 2;

  // Credential Manifest on which given credential fulfillment or credential needs to be resolved.
  api.did.presentproof.types.CredentialManifest manifest = 3;

  // Fulfillment to be be resolved.
  // If provided, then this option takes precedence over credential resolve option.
  api.did.presentproof.types.CredentialFulfillment fulfillment = 4;

  // Credential to be be resolved, to be provided along with 'DescriptorID' to be used for resolving.
  api.vc.types.VerifiableCredential credential = 5;

  // ID of the Credential from wallet content to be be resolved, to be provided along with 'DescriptorID'.
  string credentialID = 6;

  // ID of the output descriptor to be used for resolving given credential.
  string descriptorID = 7;
}

// ResolveCredentialManifestResponse is response model from wallet credential manifest resolve operation.
message ResolveCredentialManifestResponse {
  // List of Resolved Descriptor results.
  repeated api.did.presentproof.types.ResolvedDescriptor resolved = 1;
}