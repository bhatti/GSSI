// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: api/wallet/types/wallet.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Profile of VC wallet contains wallet specific settings of wallet user to be remembered.
// swagger:model
type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID unique identifier assigned to this wallet profile.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Unique identifier to identify wallet profile user.
	UserID string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	// Encrypted MasterLock is for localkms.
	// passphrase for local kms for key operations.
	// Optional, if this option is provided then wallet for this profile will use local KMS for key operations.
	LocalKMSPassphrase string `protobuf:"bytes,3,opt,name=localKMSPassphrase,proto3" json:"localKMSPassphrase,omitempty"` //masterLockCipher
	// KeyServerURL for remotekms.
	// passphrase for web/remote kms for key operations.
	// Optional, if this option is provided then wallet for this profile will use web/remote KMS for key operations.
	KeyServerURL string `protobuf:"bytes,4,opt,name=keyServerURL,proto3" json:"keyServerURL,omitempty"`
	// EDV configuration
	// edv configuration for storing wallet contents for this profile
	// Optional, if not provided then agent storage provider will be used as store provider.
	EdvConfiguration *EDVConfiguration `protobuf:"bytes,5,opt,name=edvConfiguration,proto3" json:"edvConfiguration,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_wallet_types_wallet_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_api_wallet_types_wallet_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_api_wallet_types_wallet_proto_rawDescGZIP(), []int{0}
}

func (x *Profile) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Profile) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Profile) GetLocalKMSPassphrase() string {
	if x != nil {
		return x.LocalKMSPassphrase
	}
	return ""
}

func (x *Profile) GetKeyServerURL() string {
	if x != nil {
		return x.KeyServerURL
	}
	return ""
}

func (x *Profile) GetEdvConfiguration() *EDVConfiguration {
	if x != nil {
		return x.EdvConfiguration
	}
	return nil
}

// EDVConfiguration contains configuration for EDV settings for profile creation.
// Encrypted Data Vault https://identity.foundation/confidential-storage/#encrypted-data-vault
type EDVConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// EDV server URL for storing wallet contents.
	ServerURL string `protobuf:"bytes,1,opt,name=serverURL,proto3" json:"serverURL,omitempty"`
	// EDV vault ID for storing the wallet contents.
	VaultID string `protobuf:"bytes,2,opt,name=vaultID,proto3" json:"vaultID,omitempty"`
	// Encryption key ID of already existing key in wallet profile kms.
	// If profile is using localkms then wallet will create this key set for wallet user.
	EncryptionKID string `protobuf:"bytes,3,opt,name=encryptionKID,proto3" json:"encryptionKID,omitempty"`
	// MAC operation key ID of already existing key in wallet profile kms.
	// If profile is using localkms then wallet will create this key set for wallet user.
	MacKID string `protobuf:"bytes,4,opt,name=macKID,proto3" json:"macKID,omitempty"`
}

func (x *EDVConfiguration) Reset() {
	*x = EDVConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_wallet_types_wallet_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EDVConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EDVConfiguration) ProtoMessage() {}

func (x *EDVConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_api_wallet_types_wallet_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EDVConfiguration.ProtoReflect.Descriptor instead.
func (*EDVConfiguration) Descriptor() ([]byte, []int) {
	return file_api_wallet_types_wallet_proto_rawDescGZIP(), []int{1}
}

func (x *EDVConfiguration) GetServerURL() string {
	if x != nil {
		return x.ServerURL
	}
	return ""
}

func (x *EDVConfiguration) GetVaultID() string {
	if x != nil {
		return x.VaultID
	}
	return ""
}

func (x *EDVConfiguration) GetEncryptionKID() string {
	if x != nil {
		return x.EncryptionKID
	}
	return ""
}

func (x *EDVConfiguration) GetMacKID() string {
	if x != nil {
		return x.MacKID
	}
	return ""
}

// UnlockAuth contains different options for authorizing access to wallet's EDV content store & webkms.
// swagger:model
type UnlockAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Http header 'authorization' bearer token to be used.
	// Optional, only if required by wallet user (for webkms or edv).
	AuthToken string `protobuf:"bytes,1,opt,name=authToken,proto3" json:"authToken,omitempty"`
	// Http header 'authorization' GNAP token to be used.
	// Optional, only if required by wallet user (for webkms or edv).
	GnapToken string `protobuf:"bytes,2,opt,name=gnapToken,proto3" json:"gnapToken,omitempty"`
	// Capability if ZCAP sign header feature to be used for authorizing access.
	// Optional, can be used only if ZCAP sign header feature is configured with command controller.
	Capability string `protobuf:"bytes,3,opt,name=capability,proto3" json:"capability,omitempty"`
	// AuthZKeyStoreURL if ZCAP sign header feature to be used for authorizing access.
	// Optional, can be used only if ZCAP sign header feature is configured with command controller.
	AuthzKeyStoreURL string `protobuf:"bytes,4,opt,name=authzKeyStoreURL,proto3" json:"authzKeyStoreURL,omitempty"`
	// SecretShare if ZCAP sign header feature to be used for authorizing access.
	// Optional, can be used only if ZCAP sign header feature is configured with command controller.
	SecretShare string `protobuf:"bytes,5,opt,name=secretShare,proto3" json:"secretShare,omitempty"`
}

func (x *UnlockAuth) Reset() {
	*x = UnlockAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_wallet_types_wallet_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlockAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlockAuth) ProtoMessage() {}

func (x *UnlockAuth) ProtoReflect() protoreflect.Message {
	mi := &file_api_wallet_types_wallet_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlockAuth.ProtoReflect.Descriptor instead.
func (*UnlockAuth) Descriptor() ([]byte, []int) {
	return file_api_wallet_types_wallet_proto_rawDescGZIP(), []int{2}
}

func (x *UnlockAuth) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *UnlockAuth) GetGnapToken() string {
	if x != nil {
		return x.GnapToken
	}
	return ""
}

func (x *UnlockAuth) GetCapability() string {
	if x != nil {
		return x.Capability
	}
	return ""
}

func (x *UnlockAuth) GetAuthzKeyStoreURL() string {
	if x != nil {
		return x.AuthzKeyStoreURL
	}
	return ""
}

func (x *UnlockAuth) GetSecretShare() string {
	if x != nil {
		return x.SecretShare
	}
	return ""
}

// WalletAuth contains wallet auth parameters for performing wallet operations.
// swagger:model
type WalletAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Authorization token for performing wallet operations.
	Auth string `protobuf:"bytes,1,opt,name=auth,proto3" json:"auth,omitempty"`
	// ID of wallet user.
	UserID string `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
}

func (x *WalletAuth) Reset() {
	*x = WalletAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_wallet_types_wallet_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletAuth) ProtoMessage() {}

func (x *WalletAuth) ProtoReflect() protoreflect.Message {
	mi := &file_api_wallet_types_wallet_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletAuth.ProtoReflect.Descriptor instead.
func (*WalletAuth) Descriptor() ([]byte, []int) {
	return file_api_wallet_types_wallet_proto_rawDescGZIP(), []int{3}
}

func (x *WalletAuth) GetAuth() string {
	if x != nil {
		return x.Auth
	}
	return ""
}

func (x *WalletAuth) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

// QueryParams contains credential queries for querying credential from wallet.
// Refer https://w3c-ccg.github.io/vp-request-spec/#format for more details.
type QueryParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the query.
	// Allowed values  'QueryByExample', 'QueryByFrame', 'PresentationExchange', 'DIDAuth'
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Query can contain one or more credential queries.
	CredentialQuery [][]byte `protobuf:"bytes,2,rep,name=credentialQuery,proto3" json:"credentialQuery,omitempty"` // json raw-message
}

func (x *QueryParams) Reset() {
	*x = QueryParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_wallet_types_wallet_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParams) ProtoMessage() {}

func (x *QueryParams) ProtoReflect() protoreflect.Message {
	mi := &file_api_wallet_types_wallet_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParams.ProtoReflect.Descriptor instead.
func (*QueryParams) Descriptor() ([]byte, []int) {
	return file_api_wallet_types_wallet_proto_rawDescGZIP(), []int{4}
}

func (x *QueryParams) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *QueryParams) GetCredentialQuery() [][]byte {
	if x != nil {
		return x.CredentialQuery
	}
	return nil
}

// DeriveOptions model containing options for deriving a credential.
//
type DeriveOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Frame is JSON-LD frame used for selective disclosure.
	Frame *anypb.Any `protobuf:"bytes,1,opt,name=frame,proto3" json:"frame,omitempty"` // map[string]interface{}
	// Nonce to prove uniqueness or freshness of the proof.
	Nonce string `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *DeriveOptions) Reset() {
	*x = DeriveOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_wallet_types_wallet_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeriveOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeriveOptions) ProtoMessage() {}

func (x *DeriveOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_wallet_types_wallet_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeriveOptions.ProtoReflect.Descriptor instead.
func (*DeriveOptions) Descriptor() ([]byte, []int) {
	return file_api_wallet_types_wallet_proto_rawDescGZIP(), []int{5}
}

func (x *DeriveOptions) GetFrame() *anypb.Any {
	if x != nil {
		return x.Frame
	}
	return nil
}

func (x *DeriveOptions) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

// KeyPair is response of creating key pair inside wallet.
type KeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// base64 encoded key ID of the key created.
	KeyID string `protobuf:"bytes,1,opt,name=keyID,proto3" json:"keyID,omitempty"`
	// base64 encoded public key of the key pair created.
	PublicKey string `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
}

func (x *KeyPair) Reset() {
	*x = KeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_wallet_types_wallet_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyPair) ProtoMessage() {}

func (x *KeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_api_wallet_types_wallet_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyPair.ProtoReflect.Descriptor instead.
func (*KeyPair) Descriptor() ([]byte, []int) {
	return file_api_wallet_types_wallet_proto_rawDescGZIP(), []int{6}
}

func (x *KeyPair) GetKeyID() string {
	if x != nil {
		return x.KeyID
	}
	return ""
}

func (x *KeyPair) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

// ConnectOpts is option for accepting out-of-band invitation and to perform DID exchange.
type ConnectOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label to be shared with the other agent during the subsequent DID exchange.
	MyLabel string `protobuf:"bytes,1,opt,name=myLabel,proto3" json:"myLabel,omitempty"`
	// router connections to be used to establish connection.
	RouterConnections []string `protobuf:"bytes,2,rep,name=routerConnections,proto3" json:"routerConnections,omitempty"`
	// DID to be used when reusing a connection.
	ReuseConnection string `protobuf:"bytes,3,opt,name=reuseConnection,proto3" json:"reuseConnection,omitempty"`
	// To use any recognized DID in the services array for a reusable connection.
	ReuseAnyConnection bool `protobuf:"varint,4,opt,name=reuseAnyConnection,proto3" json:"reuseAnyConnection,omitempty"`
	// Timeout (in milliseconds) waiting for connection status to be completed.
	Timeout *durationpb.Duration `protobuf:"bytes,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *ConnectOpts) Reset() {
	*x = ConnectOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_wallet_types_wallet_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectOpts) ProtoMessage() {}

func (x *ConnectOpts) ProtoReflect() protoreflect.Message {
	mi := &file_api_wallet_types_wallet_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectOpts.ProtoReflect.Descriptor instead.
func (*ConnectOpts) Descriptor() ([]byte, []int) {
	return file_api_wallet_types_wallet_proto_rawDescGZIP(), []int{7}
}

func (x *ConnectOpts) GetMyLabel() string {
	if x != nil {
		return x.MyLabel
	}
	return ""
}

func (x *ConnectOpts) GetRouterConnections() []string {
	if x != nil {
		return x.RouterConnections
	}
	return nil
}

func (x *ConnectOpts) GetReuseConnection() string {
	if x != nil {
		return x.ReuseConnection
	}
	return ""
}

func (x *ConnectOpts) GetReuseAnyConnection() bool {
	if x != nil {
		return x.ReuseAnyConnection
	}
	return false
}

func (x *ConnectOpts) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

// CredentialInteractionStatus holds the status of credential share/issuance interaction from wallet.
// Typically holds web redirect info of credential interaction conclusion or problem-report.
type CredentialInteractionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One of the status present proof or issue credential interaction
	// Refer https://github.com/hyperledger/aries-rfcs/blob/main/features/0015-acks/README.md#ack-status.
	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// Optional web redirect URL info sent by verifier.
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"` // redirectUrl
}

func (x *CredentialInteractionStatus) Reset() {
	*x = CredentialInteractionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_wallet_types_wallet_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CredentialInteractionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CredentialInteractionStatus) ProtoMessage() {}

func (x *CredentialInteractionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_wallet_types_wallet_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CredentialInteractionStatus.ProtoReflect.Descriptor instead.
func (*CredentialInteractionStatus) Descriptor() ([]byte, []int) {
	return file_api_wallet_types_wallet_proto_rawDescGZIP(), []int{8}
}

func (x *CredentialInteractionStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *CredentialInteractionStatus) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

var File_api_wallet_types_wallet_proto protoreflect.FileDescriptor

var file_api_wallet_types_wallet_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd5, 0x01, 0x0a,
	0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4b, 0x4d, 0x53, 0x50, 0x61, 0x73, 0x73,
	0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x4b, 0x4d, 0x53, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x52, 0x4c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x55, 0x52, 0x4c, 0x12, 0x4e, 0x0a, 0x10, 0x65, 0x64, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x45, 0x44, 0x56, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x10, 0x65, 0x64, 0x76, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x10, 0x45, 0x44, 0x56, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x75, 0x6c, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x61, 0x75, 0x6c, 0x74, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x63, 0x4b, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x63, 0x4b, 0x49, 0x44, 0x22,
	0xb6, 0x01, 0x0a, 0x0a, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x67, 0x6e, 0x61, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x67, 0x6e, 0x61, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x75,
	0x74, 0x68, 0x7a, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x7a, 0x4b, 0x65, 0x79, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x22, 0x38, 0x0a, 0x0a, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x22, 0x4b, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22,
	0x51, 0x0a, 0x0d, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2a, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x22, 0x3d, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65,
	0x79, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x22, 0xe4, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x74,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x75,
	0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x75, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x75, 0x73, 0x65, 0x41, 0x6e, 0x79, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x72, 0x65, 0x75, 0x73, 0x65, 0x41, 0x6e, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x47, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x62, 0x68, 0x61, 0x74, 0x74, 0x69, 0x2f, 0x47, 0x53, 0x53, 0x49, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_wallet_types_wallet_proto_rawDescOnce sync.Once
	file_api_wallet_types_wallet_proto_rawDescData = file_api_wallet_types_wallet_proto_rawDesc
)

func file_api_wallet_types_wallet_proto_rawDescGZIP() []byte {
	file_api_wallet_types_wallet_proto_rawDescOnce.Do(func() {
		file_api_wallet_types_wallet_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_wallet_types_wallet_proto_rawDescData)
	})
	return file_api_wallet_types_wallet_proto_rawDescData
}

var file_api_wallet_types_wallet_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_api_wallet_types_wallet_proto_goTypes = []interface{}{
	(*Profile)(nil),                     // 0: api.wallet.types.Profile
	(*EDVConfiguration)(nil),            // 1: api.wallet.types.EDVConfiguration
	(*UnlockAuth)(nil),                  // 2: api.wallet.types.UnlockAuth
	(*WalletAuth)(nil),                  // 3: api.wallet.types.WalletAuth
	(*QueryParams)(nil),                 // 4: api.wallet.types.QueryParams
	(*DeriveOptions)(nil),               // 5: api.wallet.types.DeriveOptions
	(*KeyPair)(nil),                     // 6: api.wallet.types.KeyPair
	(*ConnectOpts)(nil),                 // 7: api.wallet.types.ConnectOpts
	(*CredentialInteractionStatus)(nil), // 8: api.wallet.types.CredentialInteractionStatus
	(*anypb.Any)(nil),                   // 9: google.protobuf.Any
	(*durationpb.Duration)(nil),         // 10: google.protobuf.Duration
}
var file_api_wallet_types_wallet_proto_depIdxs = []int32{
	1,  // 0: api.wallet.types.Profile.edvConfiguration:type_name -> api.wallet.types.EDVConfiguration
	9,  // 1: api.wallet.types.DeriveOptions.frame:type_name -> google.protobuf.Any
	10, // 2: api.wallet.types.ConnectOpts.timeout:type_name -> google.protobuf.Duration
	3,  // [3:3] is the sub-list for method output_type
	3,  // [3:3] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_api_wallet_types_wallet_proto_init() }
func file_api_wallet_types_wallet_proto_init() {
	if File_api_wallet_types_wallet_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_wallet_types_wallet_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_wallet_types_wallet_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EDVConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_wallet_types_wallet_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlockAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_wallet_types_wallet_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_wallet_types_wallet_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_wallet_types_wallet_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeriveOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_wallet_types_wallet_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_wallet_types_wallet_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_wallet_types_wallet_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CredentialInteractionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_wallet_types_wallet_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_wallet_types_wallet_proto_goTypes,
		DependencyIndexes: file_api_wallet_types_wallet_proto_depIdxs,
		MessageInfos:      file_api_wallet_types_wallet_proto_msgTypes,
	}.Build()
	File_api_wallet_types_wallet_proto = out.File
	file_api_wallet_types_wallet_proto_rawDesc = nil
	file_api_wallet_types_wallet_proto_goTypes = nil
	file_api_wallet_types_wallet_proto_depIdxs = nil
}
